
Dynamics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abdc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  0800adb0  0800adb0  0000bdb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b25c  0800b25c  0000d1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b25c  0800b25c  0000c25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b264  0800b264  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b264  0800b264  0000c264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b268  0800b268  0000c268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800b26c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  200001e0  0800b44c  0000d1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  0800b44c  0000d774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a39  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e4  00000000  00000000  0001ec49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00021430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf6  00000000  00000000  000224b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022702  00000000  00000000  000231a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134a3  00000000  00000000  000458a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3d84  00000000  00000000  00058d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cacf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b24  00000000  00000000  0012cb14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00132638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ad94 	.word	0x0800ad94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800ad94 	.word	0x0800ad94

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <_write>:
static void MX_TIM14_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_IWDG_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *data, int len)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)data, len, HAL_MAX_DELAY);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	b29a      	uxth	r2, r3
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	4804      	ldr	r0, [pc, #16]	@ (8001088 <_write+0x28>)
 8001078:	f004 ff57 	bl	8005f2a <HAL_UART_Transmit>
  return len;
 800107c:	687b      	ldr	r3, [r7, #4]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000390 	.word	0x20000390

0800108c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800108c:	b5b0      	push	{r4, r5, r7, lr}
 800108e:	b096      	sub	sp, #88	@ 0x58
 8001090:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001092:	f001 fc6f 	bl	8002974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001096:	f000 f9eb 	bl	8001470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109a:	f000 fc45 	bl	8001928 <MX_GPIO_Init>
  MX_DMA_Init();
 800109e:	f000 fc23 	bl	80018e8 <MX_DMA_Init>
  MX_ADC1_Init();
 80010a2:	f000 fa51 	bl	8001548 <MX_ADC1_Init>
  MX_CAN1_Init();
 80010a6:	f000 facb 	bl	8001640 <MX_CAN1_Init>
  MX_CAN2_Init();
 80010aa:	f000 fb09 	bl	80016c0 <MX_CAN2_Init>
  MX_TIM13_Init();
 80010ae:	f000 fb61 	bl	8001774 <MX_TIM13_Init>
  MX_TIM14_Init();
 80010b2:	f000 fba7 	bl	8001804 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 80010b6:	f000 fbed 	bl	8001894 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 80010ba:	f000 fb41 	bl	8001740 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  
  //Watchdog
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 80010be:	480d      	ldr	r0, [pc, #52]	@ (80010f4 <main+0x68>)
 80010c0:	f003 fc19 	bl	80048f6 <HAL_IWDG_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <main+0x42>
    Error_Handler();
 80010ca:	f001 f835 	bl	8002138 <Error_Handler>
  }
  HAL_ADC_Start_DMA(&hadc1, ADC_VALUE, 4);    // Start ADC DMA for reading values
 80010ce:	2204      	movs	r2, #4
 80010d0:	4909      	ldr	r1, [pc, #36]	@ (80010f8 <main+0x6c>)
 80010d2:	480a      	ldr	r0, [pc, #40]	@ (80010fc <main+0x70>)
 80010d4:	f001 fd04 	bl	8002ae0 <HAL_ADC_Start_DMA>
  // Start Timer Interruptions for Input Captures
  HAL_TIM_IC_Start_IT(&htim13, TIM_CHANNEL_1);
 80010d8:	2100      	movs	r1, #0
 80010da:	4809      	ldr	r0, [pc, #36]	@ (8001100 <main+0x74>)
 80010dc:	f004 f9ac 	bl	8005438 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim14, TIM_CHANNEL_1);
 80010e0:	2100      	movs	r1, #0
 80010e2:	4808      	ldr	r0, [pc, #32]	@ (8001104 <main+0x78>)
 80010e4:	f004 f9a8 	bl	8005438 <HAL_TIM_IC_Start_IT>

  // Initialize moving average buffers with zeros
  for (int i = 0; i < 4; i++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80010ec:	e024      	b.n	8001138 <main+0xac>
  {
    for (int j = 0; j < ADC_BUFFER_SIZE; j++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80010f2:	e016      	b.n	8001122 <main+0x96>
 80010f4:	200002f4 	.word	0x200002f4
 80010f8:	200003dc 	.word	0x200003dc
 80010fc:	200001fc 	.word	0x200001fc
 8001100:	20000300 	.word	0x20000300
 8001104:	20000348 	.word	0x20000348
    {
      adc_buffers[i][j] = 0;
 8001108:	49b4      	ldr	r1, [pc, #720]	@ (80013dc <main+0x350>)
 800110a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800110c:	2232      	movs	r2, #50	@ 0x32
 800110e:	fb03 f202 	mul.w	r2, r3, r2
 8001112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001114:	4413      	add	r3, r2
 8001116:	2200      	movs	r2, #0
 8001118:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int j = 0; j < ADC_BUFFER_SIZE; j++)
 800111c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800111e:	3301      	adds	r3, #1
 8001120:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001124:	2b31      	cmp	r3, #49	@ 0x31
 8001126:	ddef      	ble.n	8001108 <main+0x7c>
    }
    adc_filtered[i] = 0;
 8001128:	4aad      	ldr	r2, [pc, #692]	@ (80013e0 <main+0x354>)
 800112a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800112c:	2100      	movs	r1, #0
 800112e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < 4; i++)
 8001132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001134:	3301      	adds	r3, #1
 8001136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800113a:	2b03      	cmp	r3, #3
 800113c:	ddd7      	ble.n	80010ee <main+0x62>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //WatchDog
    HAL_IWDG_Refresh(&hiwdg);
 800113e:	48a9      	ldr	r0, [pc, #676]	@ (80013e4 <main+0x358>)
 8001140:	f003 fc1d 	bl	800497e <HAL_IWDG_Refresh>
    
    // LED HEARTBEAT
    int32_t current_time = HAL_GetTick();
 8001144:	f001 fc7c 	bl	8002a40 <HAL_GetTick>
 8001148:	4603      	mov	r3, r0
 800114a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if ((current_time - previus_blink) >= blink_time)
 800114c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800114e:	4ba6      	ldr	r3, [pc, #664]	@ (80013e8 <main+0x35c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	1ad2      	subs	r2, r2, r3
 8001154:	4ba5      	ldr	r3, [pc, #660]	@ (80013ec <main+0x360>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	d307      	bcc.n	800116c <main+0xe0>
    {
      previus_blink = current_time;
 800115c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800115e:	4aa2      	ldr	r2, [pc, #648]	@ (80013e8 <main+0x35c>)
 8001160:	6013      	str	r3, [r2, #0]
      HAL_GPIO_TogglePin(LED_HEARTBEAT_GPIO_Port, LED_HEARTBEAT_Pin);
 8001162:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001166:	48a2      	ldr	r0, [pc, #648]	@ (80013f0 <main+0x364>)
 8001168:	f003 fbab 	bl	80048c2 <HAL_GPIO_TogglePin>
    }
    // LED HEARTBEAT END

    // Update ADC moving averages
    ADC_UpdateMovingAverage();
 800116c:	f000 fd4c 	bl	8001c08 <ADC_UpdateMovingAverage>

// ADC VARIABLES
#ifdef DYNAMICS_FRONT
    uint16_t adcST_Angle = adc_filtered[0];         // Steering Angle (Only Dynamics Front) - Filtered
 8001170:	4b9b      	ldr	r3, [pc, #620]	@ (80013e0 <main+0x354>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	877b      	strh	r3, [r7, #58]	@ 0x3a
#endif
#ifdef DYNAMICS_REAR
    uint16_t adcBRK_PRESS = adc_filtered[1];        // Brake Pressure (Only Dynamics Rear) - Filtered
#endif
    uint16_t adcSuspL = adc_filtered[2];            // Suspension Left - Filtered
 8001176:	4b9a      	ldr	r3, [pc, #616]	@ (80013e0 <main+0x354>)
 8001178:	889b      	ldrh	r3, [r3, #4]
 800117a:	873b      	strh	r3, [r7, #56]	@ 0x38
    uint16_t adcSuspR = adc_filtered[3];            // Suspension Right - Filtered
 800117c:	4b98      	ldr	r3, [pc, #608]	@ (80013e0 <main+0x354>)
 800117e:	88db      	ldrh	r3, [r3, #6]
 8001180:	86fb      	strh	r3, [r7, #54]	@ 0x36

// Steering Angle
#ifdef DYNAMICS_FRONT
    float ST_ANGLE;
    ST_ANGLE=MeasureSteeringAngle(adcST_Angle);
 8001182:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fc87 	bl	8001a98 <MeasureSteeringAngle>
 800118a:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
#endif
    // End Brake Pressure

    // Suspension Right
    float SUSP_R;
    SUSP_R = MeasureSuspensionPosition(adcSuspR);
 800118e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fcf1 	bl	8001b78 <MeasureSuspensionPosition>
 8001196:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
    // End Suspension Right

    // Suspension Left
    float SUSP_L;
    SUSP_L = MeasureSuspensionPosition(adcSuspL);
 800119a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fceb 	bl	8001b78 <MeasureSuspensionPosition>
 80011a2:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    // End Suspension Left

    // Input Capture processing starts here
    float filtered_time_left, filtered_time_right;
    float speed_km_left, speed_km_right;
    Speed_Measures();
 80011a6:	f000 fe35 	bl	8001e14 <Speed_Measures>
    filtered_time_left = Moving_Average_Filter_Left();
 80011aa:	f000 fe73 	bl	8001e94 <Moving_Average_Filter_Left>
 80011ae:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    filtered_time_right = Moving_Average_Filter_Right();
 80011b2:	f000 fe9d 	bl	8001ef0 <Moving_Average_Filter_Right>
 80011b6:	ed87 0a08 	vstr	s0, [r7, #32]
    float time_R = filtered_time_right * Timer_Period;
 80011ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80011be:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 80013f4 <main+0x368>
 80011c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c6:	edc7 7a07 	vstr	s15, [r7, #28]
    float time_L = filtered_time_left * Timer_Period;
 80011ca:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80011ce:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 80013f4 <main+0x368>
 80011d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d6:	edc7 7a06 	vstr	s15, [r7, #24]
    speed_km_left = Calculate_Speed_in_Wheel(time_L, last_capture_time_L);
 80011da:	4b87      	ldr	r3, [pc, #540]	@ (80013f8 <main+0x36c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	ed97 0a06 	vldr	s0, [r7, #24]
 80011e4:	f000 feb4 	bl	8001f50 <Calculate_Speed_in_Wheel>
 80011e8:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    speed_km_right = Calculate_Speed_in_Wheel(time_R, last_capture_time_R);
 80011ec:	4b83      	ldr	r3, [pc, #524]	@ (80013fc <main+0x370>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	ed97 0a07 	vldr	s0, [r7, #28]
 80011f6:	f000 feab 	bl	8001f50 <Calculate_Speed_in_Wheel>
 80011fa:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
    if (speed_km_left < 0.1f) speed_km_left = 0.0f;
 80011fe:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001202:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8001400 <main+0x374>
 8001206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120e:	d502      	bpl.n	8001216 <main+0x18a>
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	647b      	str	r3, [r7, #68]	@ 0x44
    if (speed_km_right < 0.1f) speed_km_right = 0.0f;
 8001216:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800121a:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8001400 <main+0x374>
 800121e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001226:	d502      	bpl.n	800122e <main+0x1a2>
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	643b      	str	r3, [r7, #64]	@ 0x40

// Input Capture processing ends here

// CAN communication starts here
#ifdef DYNAMICS_FRONT
    uint32_t now = HAL_GetTick();
 800122e:	f001 fc07 	bl	8002a40 <HAL_GetTick>
 8001232:	6178      	str	r0, [r7, #20]
    if ((now - last_can_send) >= can_send_interval)
 8001234:	4b73      	ldr	r3, [pc, #460]	@ (8001404 <main+0x378>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	1ad2      	subs	r2, r2, r3
 800123c:	4b72      	ldr	r3, [pc, #456]	@ (8001408 <main+0x37c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	f0c0 80ad 	bcc.w	80013a0 <main+0x314>
    {
      last_can_send = now;
 8001246:	4a6f      	ldr	r2, [pc, #444]	@ (8001404 <main+0x378>)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	6013      	str	r3, [r2, #0]

      int16_t angle = (int16_t)(ST_ANGLE * 10);
 800124c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001250:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001254:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800125c:	ee17 3a90 	vmov	r3, s15
 8001260:	827b      	strh	r3, [r7, #18]
      uint16_t susp_r = (uint16_t)(SUSP_R * 10);
 8001262:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001266:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800126a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001272:	ee17 3a90 	vmov	r3, s15
 8001276:	823b      	strh	r3, [r7, #16]
      uint16_t susp_l = (uint16_t)(SUSP_L * 10);
 8001278:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800127c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001288:	ee17 3a90 	vmov	r3, s15
 800128c:	81fb      	strh	r3, [r7, #14]
      uint16_t spd_left = (uint16_t)(speed_km_left * 10);
 800128e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001292:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001296:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800129e:	ee17 3a90 	vmov	r3, s15
 80012a2:	81bb      	strh	r3, [r7, #12]
      uint16_t spd_right = (uint16_t)(speed_km_right * 10);
 80012a4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80012a8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b4:	ee17 3a90 	vmov	r3, s15
 80012b8:	817b      	strh	r3, [r7, #10]

      TxHeader.IDE = CAN_ID_STD;
 80012ba:	4b54      	ldr	r3, [pc, #336]	@ (800140c <main+0x380>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
      TxHeader.StdId = 0x446;                       // Confirm ID
 80012c0:	4b52      	ldr	r3, [pc, #328]	@ (800140c <main+0x380>)
 80012c2:	f240 4246 	movw	r2, #1094	@ 0x446
 80012c6:	601a      	str	r2, [r3, #0]
      TxHeader.RTR = CAN_RTR_DATA;
 80012c8:	4b50      	ldr	r3, [pc, #320]	@ (800140c <main+0x380>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
      TxHeader.DLC = 6;
 80012ce:	4b4f      	ldr	r3, [pc, #316]	@ (800140c <main+0x380>)
 80012d0:	2206      	movs	r2, #6
 80012d2:	611a      	str	r2, [r3, #16]

      TxData[0] = angle & 0xFF;                     // Least significant byte first
 80012d4:	8a7b      	ldrh	r3, [r7, #18]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001410 <main+0x384>)
 80012da:	701a      	strb	r2, [r3, #0]
      TxData[1] = (angle >> 8) & 0xFF;              // Most significant byte
 80012dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012e0:	121b      	asrs	r3, r3, #8
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001410 <main+0x384>)
 80012e8:	705a      	strb	r2, [r3, #1]
      TxData[2] = susp_r & 0xFF;
 80012ea:	8a3b      	ldrh	r3, [r7, #16]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b48      	ldr	r3, [pc, #288]	@ (8001410 <main+0x384>)
 80012f0:	709a      	strb	r2, [r3, #2]
      TxData[3] = (susp_r >> 8) & 0xFF;
 80012f2:	8a3b      	ldrh	r3, [r7, #16]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4b45      	ldr	r3, [pc, #276]	@ (8001410 <main+0x384>)
 80012fc:	70da      	strb	r2, [r3, #3]
      TxData[4] = susp_l & 0xFF;
 80012fe:	89fb      	ldrh	r3, [r7, #14]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b43      	ldr	r3, [pc, #268]	@ (8001410 <main+0x384>)
 8001304:	711a      	strb	r2, [r3, #4]
      TxData[5] = (susp_l >> 8) & 0xFF;
 8001306:	89fb      	ldrh	r3, [r7, #14]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	b29b      	uxth	r3, r3
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b40      	ldr	r3, [pc, #256]	@ (8001410 <main+0x384>)
 8001310:	715a      	strb	r2, [r3, #5]

      if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001312:	4b40      	ldr	r3, [pc, #256]	@ (8001414 <main+0x388>)
 8001314:	4a3e      	ldr	r2, [pc, #248]	@ (8001410 <main+0x384>)
 8001316:	493d      	ldr	r1, [pc, #244]	@ (800140c <main+0x380>)
 8001318:	483f      	ldr	r0, [pc, #252]	@ (8001418 <main+0x38c>)
 800131a:	f002 f9b1 	bl	8003680 <HAL_CAN_AddTxMessage>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <main+0x29c>
      {
        Error_Handler();
 8001324:	f000 ff08 	bl	8002138 <Error_Handler>
      }
      if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001328:	4b3a      	ldr	r3, [pc, #232]	@ (8001414 <main+0x388>)
 800132a:	4a39      	ldr	r2, [pc, #228]	@ (8001410 <main+0x384>)
 800132c:	4937      	ldr	r1, [pc, #220]	@ (800140c <main+0x380>)
 800132e:	483b      	ldr	r0, [pc, #236]	@ (800141c <main+0x390>)
 8001330:	f002 f9a6 	bl	8003680 <HAL_CAN_AddTxMessage>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <main+0x2b2>
      {
        Error_Handler();
 800133a:	f000 fefd 	bl	8002138 <Error_Handler>
      }

      TxHeader.StdId = 0x456;
 800133e:	4b33      	ldr	r3, [pc, #204]	@ (800140c <main+0x380>)
 8001340:	f240 4256 	movw	r2, #1110	@ 0x456
 8001344:	601a      	str	r2, [r3, #0]
      TxHeader.DLC = 4;
 8001346:	4b31      	ldr	r3, [pc, #196]	@ (800140c <main+0x380>)
 8001348:	2204      	movs	r2, #4
 800134a:	611a      	str	r2, [r3, #16]

      TxData[0] = spd_left & 0xFF;
 800134c:	89bb      	ldrh	r3, [r7, #12]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	4b2f      	ldr	r3, [pc, #188]	@ (8001410 <main+0x384>)
 8001352:	701a      	strb	r2, [r3, #0]
      TxData[1] = (spd_left >> 8) & 0xFF;
 8001354:	89bb      	ldrh	r3, [r7, #12]
 8001356:	0a1b      	lsrs	r3, r3, #8
 8001358:	b29b      	uxth	r3, r3
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b2c      	ldr	r3, [pc, #176]	@ (8001410 <main+0x384>)
 800135e:	705a      	strb	r2, [r3, #1]
      TxData[2] = spd_right & 0xFF;
 8001360:	897b      	ldrh	r3, [r7, #10]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	4b2a      	ldr	r3, [pc, #168]	@ (8001410 <main+0x384>)
 8001366:	709a      	strb	r2, [r3, #2]
      TxData[3] = (spd_right >> 8) & 0xFF;
 8001368:	897b      	ldrh	r3, [r7, #10]
 800136a:	0a1b      	lsrs	r3, r3, #8
 800136c:	b29b      	uxth	r3, r3
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b27      	ldr	r3, [pc, #156]	@ (8001410 <main+0x384>)
 8001372:	70da      	strb	r2, [r3, #3]

      if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001374:	4b27      	ldr	r3, [pc, #156]	@ (8001414 <main+0x388>)
 8001376:	4a26      	ldr	r2, [pc, #152]	@ (8001410 <main+0x384>)
 8001378:	4924      	ldr	r1, [pc, #144]	@ (800140c <main+0x380>)
 800137a:	4827      	ldr	r0, [pc, #156]	@ (8001418 <main+0x38c>)
 800137c:	f002 f980 	bl	8003680 <HAL_CAN_AddTxMessage>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <main+0x2fe>
      {
        Error_Handler();
 8001386:	f000 fed7 	bl	8002138 <Error_Handler>
      }
      if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800138a:	4b22      	ldr	r3, [pc, #136]	@ (8001414 <main+0x388>)
 800138c:	4a20      	ldr	r2, [pc, #128]	@ (8001410 <main+0x384>)
 800138e:	491f      	ldr	r1, [pc, #124]	@ (800140c <main+0x380>)
 8001390:	4822      	ldr	r0, [pc, #136]	@ (800141c <main+0x390>)
 8001392:	f002 f975 	bl	8003680 <HAL_CAN_AddTxMessage>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <main+0x314>
      {
        Error_Handler();
 800139c:	f000 fecc 	bl	8002138 <Error_Handler>
#endif
// CAN communication ends here

// Bluetooth messages
static uint32_t last_debug_time = 0;
uint32_t current_debug_time = HAL_GetTick();
 80013a0:	f001 fb4e 	bl	8002a40 <HAL_GetTick>
 80013a4:	6078      	str	r0, [r7, #4]

// Imprimir apenas a cada 500ms
if ((current_debug_time - last_debug_time) >= 500) {
 80013a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001420 <main+0x394>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013b2:	f4ff aec4 	bcc.w	800113e <main+0xb2>
    last_debug_time = current_debug_time;
 80013b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001420 <main+0x394>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6013      	str	r3, [r2, #0]
    
    #ifdef DYNAMICS_FRONT
    printf("Steering Angle: %.2f ADC: %u \n", ST_ANGLE, adcST_Angle);
 80013bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80013be:	f7ff f8e3 	bl	8000588 <__aeabi_f2d>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 80013c8:	9100      	str	r1, [sp, #0]
 80013ca:	4816      	ldr	r0, [pc, #88]	@ (8001424 <main+0x398>)
 80013cc:	f006 f88e 	bl	80074ec <iprintf>
    #endif
    #ifdef DYNAMICS_REAR
    printf("Pressure Brake %.2f bar  ADC: %u \n", BRK_PRESS, adcBRK_PRESS);
    #endif
    printf("Susp R: %.2fmm Susp L: %.2fmm\n", SUSP_R, SUSP_L);
 80013d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013d2:	f7ff f8d9 	bl	8000588 <__aeabi_f2d>
 80013d6:	4604      	mov	r4, r0
 80013d8:	e026      	b.n	8001428 <main+0x39c>
 80013da:	bf00      	nop
 80013dc:	200003f4 	.word	0x200003f4
 80013e0:	20000588 	.word	0x20000588
 80013e4:	200002f4 	.word	0x200002f4
 80013e8:	200003d8 	.word	0x200003d8
 80013ec:	20000000 	.word	0x20000000
 80013f0:	40020800 	.word	0x40020800
 80013f4:	3785492a 	.word	0x3785492a
 80013f8:	200003ec 	.word	0x200003ec
 80013fc:	200003f0 	.word	0x200003f0
 8001400:	3dcccccd 	.word	0x3dcccccd
 8001404:	200005e8 	.word	0x200005e8
 8001408:	20000004 	.word	0x20000004
 800140c:	200005ec 	.word	0x200005ec
 8001410:	20000604 	.word	0x20000604
 8001414:	2000060c 	.word	0x2000060c
 8001418:	200002a4 	.word	0x200002a4
 800141c:	200002cc 	.word	0x200002cc
 8001420:	20000610 	.word	0x20000610
 8001424:	0800adb0 	.word	0x0800adb0
 8001428:	460d      	mov	r5, r1
 800142a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800142c:	f7ff f8ac 	bl	8000588 <__aeabi_f2d>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	e9cd 2300 	strd	r2, r3, [sp]
 8001438:	4622      	mov	r2, r4
 800143a:	462b      	mov	r3, r5
 800143c:	480a      	ldr	r0, [pc, #40]	@ (8001468 <main+0x3dc>)
 800143e:	f006 f855 	bl	80074ec <iprintf>
    printf("Speed L: %.2f Speed R: %.2f km/h\n", speed_km_left, speed_km_right);
 8001442:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001444:	f7ff f8a0 	bl	8000588 <__aeabi_f2d>
 8001448:	4604      	mov	r4, r0
 800144a:	460d      	mov	r5, r1
 800144c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800144e:	f7ff f89b 	bl	8000588 <__aeabi_f2d>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	e9cd 2300 	strd	r2, r3, [sp]
 800145a:	4622      	mov	r2, r4
 800145c:	462b      	mov	r3, r5
 800145e:	4803      	ldr	r0, [pc, #12]	@ (800146c <main+0x3e0>)
 8001460:	f006 f844 	bl	80074ec <iprintf>
  {
 8001464:	e66b      	b.n	800113e <main+0xb2>
 8001466:	bf00      	nop
 8001468:	0800add0 	.word	0x0800add0
 800146c:	0800adf0 	.word	0x0800adf0

08001470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b094      	sub	sp, #80	@ 0x50
 8001474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	2234      	movs	r2, #52	@ 0x34
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f006 f8ab 	bl	80075da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	4b29      	ldr	r3, [pc, #164]	@ (8001540 <SystemClock_Config+0xd0>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149c:	4a28      	ldr	r2, [pc, #160]	@ (8001540 <SystemClock_Config+0xd0>)
 800149e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a4:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <SystemClock_Config+0xd0>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b0:	2300      	movs	r3, #0
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	4b23      	ldr	r3, [pc, #140]	@ (8001544 <SystemClock_Config+0xd4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a22      	ldr	r2, [pc, #136]	@ (8001544 <SystemClock_Config+0xd4>)
 80014ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b20      	ldr	r3, [pc, #128]	@ (8001544 <SystemClock_Config+0xd4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80014cc:	2309      	movs	r3, #9
 80014ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014d6:	2301      	movs	r3, #1
 80014d8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014da:	2302      	movs	r3, #2
 80014dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014e4:	2304      	movs	r3, #4
 80014e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014e8:	2348      	movs	r3, #72	@ 0x48
 80014ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014f0:	2302      	movs	r3, #2
 80014f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4618      	mov	r0, r3
 80014fe:	f003 fc6f 	bl	8004de0 <HAL_RCC_OscConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001508:	f000 fe16 	bl	8002138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150c:	230f      	movs	r3, #15
 800150e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001510:	2302      	movs	r3, #2
 8001512:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001518:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800151c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	2102      	movs	r1, #2
 8001528:	4618      	mov	r0, r3
 800152a:	f003 fa39 	bl	80049a0 <HAL_RCC_ClockConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001534:	f000 fe00 	bl	8002138 <Error_Handler>
  }
}
 8001538:	bf00      	nop
 800153a:	3750      	adds	r7, #80	@ 0x50
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40023800 	.word	0x40023800
 8001544:	40007000 	.word	0x40007000

08001548 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800154e:	463b      	mov	r3, r7
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800155a:	4b36      	ldr	r3, [pc, #216]	@ (8001634 <MX_ADC1_Init+0xec>)
 800155c:	4a36      	ldr	r2, [pc, #216]	@ (8001638 <MX_ADC1_Init+0xf0>)
 800155e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001560:	4b34      	ldr	r3, [pc, #208]	@ (8001634 <MX_ADC1_Init+0xec>)
 8001562:	2200      	movs	r2, #0
 8001564:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001566:	4b33      	ldr	r3, [pc, #204]	@ (8001634 <MX_ADC1_Init+0xec>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800156c:	4b31      	ldr	r3, [pc, #196]	@ (8001634 <MX_ADC1_Init+0xec>)
 800156e:	2201      	movs	r2, #1
 8001570:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001572:	4b30      	ldr	r3, [pc, #192]	@ (8001634 <MX_ADC1_Init+0xec>)
 8001574:	2201      	movs	r2, #1
 8001576:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001578:	4b2e      	ldr	r3, [pc, #184]	@ (8001634 <MX_ADC1_Init+0xec>)
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001580:	4b2c      	ldr	r3, [pc, #176]	@ (8001634 <MX_ADC1_Init+0xec>)
 8001582:	2200      	movs	r2, #0
 8001584:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001586:	4b2b      	ldr	r3, [pc, #172]	@ (8001634 <MX_ADC1_Init+0xec>)
 8001588:	4a2c      	ldr	r2, [pc, #176]	@ (800163c <MX_ADC1_Init+0xf4>)
 800158a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800158c:	4b29      	ldr	r3, [pc, #164]	@ (8001634 <MX_ADC1_Init+0xec>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001592:	4b28      	ldr	r3, [pc, #160]	@ (8001634 <MX_ADC1_Init+0xec>)
 8001594:	2204      	movs	r2, #4
 8001596:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001598:	4b26      	ldr	r3, [pc, #152]	@ (8001634 <MX_ADC1_Init+0xec>)
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015a0:	4b24      	ldr	r3, [pc, #144]	@ (8001634 <MX_ADC1_Init+0xec>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015a6:	4823      	ldr	r0, [pc, #140]	@ (8001634 <MX_ADC1_Init+0xec>)
 80015a8:	f001 fa56 	bl	8002a58 <HAL_ADC_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80015b2:	f000 fdc1 	bl	8002138 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015b6:	2301      	movs	r3, #1
 80015b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80015be:	2307      	movs	r3, #7
 80015c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c2:	463b      	mov	r3, r7
 80015c4:	4619      	mov	r1, r3
 80015c6:	481b      	ldr	r0, [pc, #108]	@ (8001634 <MX_ADC1_Init+0xec>)
 80015c8:	f001 fb9c 	bl	8002d04 <HAL_ADC_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80015d2:	f000 fdb1 	bl	8002138 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015d6:	2302      	movs	r3, #2
 80015d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80015da:	2302      	movs	r3, #2
 80015dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015de:	463b      	mov	r3, r7
 80015e0:	4619      	mov	r1, r3
 80015e2:	4814      	ldr	r0, [pc, #80]	@ (8001634 <MX_ADC1_Init+0xec>)
 80015e4:	f001 fb8e 	bl	8002d04 <HAL_ADC_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80015ee:	f000 fda3 	bl	8002138 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015f2:	2308      	movs	r3, #8
 80015f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80015f6:	2303      	movs	r3, #3
 80015f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015fa:	463b      	mov	r3, r7
 80015fc:	4619      	mov	r1, r3
 80015fe:	480d      	ldr	r0, [pc, #52]	@ (8001634 <MX_ADC1_Init+0xec>)
 8001600:	f001 fb80 	bl	8002d04 <HAL_ADC_ConfigChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800160a:	f000 fd95 	bl	8002138 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800160e:	2309      	movs	r3, #9
 8001610:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001612:	2304      	movs	r3, #4
 8001614:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001616:	463b      	mov	r3, r7
 8001618:	4619      	mov	r1, r3
 800161a:	4806      	ldr	r0, [pc, #24]	@ (8001634 <MX_ADC1_Init+0xec>)
 800161c:	f001 fb72 	bl	8002d04 <HAL_ADC_ConfigChannel>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001626:	f000 fd87 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200001fc 	.word	0x200001fc
 8001638:	40012000 	.word	0x40012000
 800163c:	0f000001 	.word	0x0f000001

08001640 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001644:	4b1c      	ldr	r3, [pc, #112]	@ (80016b8 <MX_CAN1_Init+0x78>)
 8001646:	4a1d      	ldr	r2, [pc, #116]	@ (80016bc <MX_CAN1_Init+0x7c>)
 8001648:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800164a:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <MX_CAN1_Init+0x78>)
 800164c:	2204      	movs	r2, #4
 800164e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001650:	4b19      	ldr	r3, [pc, #100]	@ (80016b8 <MX_CAN1_Init+0x78>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001656:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <MX_CAN1_Init+0x78>)
 8001658:	2200      	movs	r2, #0
 800165a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800165c:	4b16      	ldr	r3, [pc, #88]	@ (80016b8 <MX_CAN1_Init+0x78>)
 800165e:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8001662:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001664:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <MX_CAN1_Init+0x78>)
 8001666:	2200      	movs	r2, #0
 8001668:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800166a:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <MX_CAN1_Init+0x78>)
 800166c:	2200      	movs	r2, #0
 800166e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <MX_CAN1_Init+0x78>)
 8001672:	2201      	movs	r2, #1
 8001674:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <MX_CAN1_Init+0x78>)
 8001678:	2200      	movs	r2, #0
 800167a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800167c:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <MX_CAN1_Init+0x78>)
 800167e:	2200      	movs	r2, #0
 8001680:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001682:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <MX_CAN1_Init+0x78>)
 8001684:	2200      	movs	r2, #0
 8001686:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001688:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <MX_CAN1_Init+0x78>)
 800168a:	2200      	movs	r2, #0
 800168c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800168e:	480a      	ldr	r0, [pc, #40]	@ (80016b8 <MX_CAN1_Init+0x78>)
 8001690:	f001 fdd8 	bl	8003244 <HAL_CAN_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800169a:	f000 fd4d 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterConfig1();
 800169e:	f000 fce9 	bl	8002074 <CAN_FilterConfig1>
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <MX_CAN1_Init+0x78>)
 80016a4:	f001 ffa8 	bl	80035f8 <HAL_CAN_Start>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_CAN1_Init+0x72>
  {
    Error_Handler();
 80016ae:	f000 fd43 	bl	8002138 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200002a4 	.word	0x200002a4
 80016bc:	40006400 	.word	0x40006400

080016c0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80016c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001738 <MX_CAN2_Init+0x78>)
 80016c6:	4a1d      	ldr	r2, [pc, #116]	@ (800173c <MX_CAN2_Init+0x7c>)
 80016c8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 80016ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <MX_CAN2_Init+0x78>)
 80016cc:	2204      	movs	r2, #4
 80016ce:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80016d0:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <MX_CAN2_Init+0x78>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016d6:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <MX_CAN2_Init+0x78>)
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_7TQ;
 80016dc:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <MX_CAN2_Init+0x78>)
 80016de:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 80016e2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016e4:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <MX_CAN2_Init+0x78>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80016ea:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <MX_CAN2_Init+0x78>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 80016f0:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <MX_CAN2_Init+0x78>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <MX_CAN2_Init+0x78>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80016fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <MX_CAN2_Init+0x78>)
 80016fe:	2200      	movs	r2, #0
 8001700:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001702:	4b0d      	ldr	r3, [pc, #52]	@ (8001738 <MX_CAN2_Init+0x78>)
 8001704:	2200      	movs	r2, #0
 8001706:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001708:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <MX_CAN2_Init+0x78>)
 800170a:	2200      	movs	r2, #0
 800170c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800170e:	480a      	ldr	r0, [pc, #40]	@ (8001738 <MX_CAN2_Init+0x78>)
 8001710:	f001 fd98 	bl	8003244 <HAL_CAN_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 800171a:	f000 fd0d 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterConfig2();
 800171e:	f000 fcdb 	bl	80020d8 <CAN_FilterConfig2>
  if (HAL_CAN_Start(&hcan2) != HAL_OK)
 8001722:	4805      	ldr	r0, [pc, #20]	@ (8001738 <MX_CAN2_Init+0x78>)
 8001724:	f001 ff68 	bl	80035f8 <HAL_CAN_Start>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_CAN2_Init+0x72>
  {
    Error_Handler();
 800172e:	f000 fd03 	bl	8002138 <Error_Handler>
  }
  /* USER CODE END CAN2_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200002cc 	.word	0x200002cc
 800173c:	40006800 	.word	0x40006800

08001740 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001744:	4b09      	ldr	r3, [pc, #36]	@ (800176c <MX_IWDG_Init+0x2c>)
 8001746:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <MX_IWDG_Init+0x30>)
 8001748:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <MX_IWDG_Init+0x2c>)
 800174c:	2204      	movs	r2, #4
 800174e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1000;
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <MX_IWDG_Init+0x2c>)
 8001752:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001756:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	@ (800176c <MX_IWDG_Init+0x2c>)
 800175a:	f003 f8cc 	bl	80048f6 <HAL_IWDG_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001764:	f000 fce8 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200002f4 	.word	0x200002f4
 8001770:	40003000 	.word	0x40003000

08001774 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800177a:	463b      	mov	r3, r7
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001786:	4b1d      	ldr	r3, [pc, #116]	@ (80017fc <MX_TIM13_Init+0x88>)
 8001788:	4a1d      	ldr	r2, [pc, #116]	@ (8001800 <MX_TIM13_Init+0x8c>)
 800178a:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 1143;
 800178c:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <MX_TIM13_Init+0x88>)
 800178e:	f240 4277 	movw	r2, #1143	@ 0x477
 8001792:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001794:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <MX_TIM13_Init+0x88>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800179a:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <MX_TIM13_Init+0x88>)
 800179c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017a0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <MX_TIM13_Init+0x88>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a8:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <MX_TIM13_Init+0x88>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80017ae:	4813      	ldr	r0, [pc, #76]	@ (80017fc <MX_TIM13_Init+0x88>)
 80017b0:	f003 fd9a 	bl	80052e8 <HAL_TIM_Base_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM13_Init+0x4a>
  {
    Error_Handler();
 80017ba:	f000 fcbd 	bl	8002138 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 80017be:	480f      	ldr	r0, [pc, #60]	@ (80017fc <MX_TIM13_Init+0x88>)
 80017c0:	f003 fde1 	bl	8005386 <HAL_TIM_IC_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM13_Init+0x5a>
  {
    Error_Handler();
 80017ca:	f000 fcb5 	bl	8002138 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80017ce:	2302      	movs	r3, #2
 80017d0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017d2:	2301      	movs	r3, #1
 80017d4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017de:	463b      	mov	r3, r7
 80017e0:	2200      	movs	r2, #0
 80017e2:	4619      	mov	r1, r3
 80017e4:	4805      	ldr	r0, [pc, #20]	@ (80017fc <MX_TIM13_Init+0x88>)
 80017e6:	f004 f83f 	bl	8005868 <HAL_TIM_IC_ConfigChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM13_Init+0x80>
  {
    Error_Handler();
 80017f0:	f000 fca2 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000300 	.word	0x20000300
 8001800:	40001c00 	.word	0x40001c00

08001804 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800180a:	463b      	mov	r3, r7
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001816:	4b1d      	ldr	r3, [pc, #116]	@ (800188c <MX_TIM14_Init+0x88>)
 8001818:	4a1d      	ldr	r2, [pc, #116]	@ (8001890 <MX_TIM14_Init+0x8c>)
 800181a:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1143;
 800181c:	4b1b      	ldr	r3, [pc, #108]	@ (800188c <MX_TIM14_Init+0x88>)
 800181e:	f240 4277 	movw	r2, #1143	@ 0x477
 8001822:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001824:	4b19      	ldr	r3, [pc, #100]	@ (800188c <MX_TIM14_Init+0x88>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800182a:	4b18      	ldr	r3, [pc, #96]	@ (800188c <MX_TIM14_Init+0x88>)
 800182c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001830:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001832:	4b16      	ldr	r3, [pc, #88]	@ (800188c <MX_TIM14_Init+0x88>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001838:	4b14      	ldr	r3, [pc, #80]	@ (800188c <MX_TIM14_Init+0x88>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800183e:	4813      	ldr	r0, [pc, #76]	@ (800188c <MX_TIM14_Init+0x88>)
 8001840:	f003 fd52 	bl	80052e8 <HAL_TIM_Base_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 800184a:	f000 fc75 	bl	8002138 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 800184e:	480f      	ldr	r0, [pc, #60]	@ (800188c <MX_TIM14_Init+0x88>)
 8001850:	f003 fd99 	bl	8005386 <HAL_TIM_IC_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 800185a:	f000 fc6d 	bl	8002138 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800185e:	2302      	movs	r3, #2
 8001860:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001862:	2301      	movs	r3, #1
 8001864:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800186e:	463b      	mov	r3, r7
 8001870:	2200      	movs	r2, #0
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	@ (800188c <MX_TIM14_Init+0x88>)
 8001876:	f003 fff7 	bl	8005868 <HAL_TIM_IC_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM14_Init+0x80>
  {
    Error_Handler();
 8001880:	f000 fc5a 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000348 	.word	0x20000348
 8001890:	40002000 	.word	0x40002000

08001894 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001898:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <MX_USART1_UART_Init+0x4c>)
 800189a:	4a12      	ldr	r2, [pc, #72]	@ (80018e4 <MX_USART1_UART_Init+0x50>)
 800189c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800189e:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <MX_USART1_UART_Init+0x4c>)
 80018a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <MX_USART1_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <MX_USART1_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <MX_USART1_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <MX_USART1_UART_Init+0x4c>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <MX_USART1_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <MX_USART1_UART_Init+0x4c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <MX_USART1_UART_Init+0x4c>)
 80018cc:	f004 fadd 	bl	8005e8a <HAL_UART_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018d6:	f000 fc2f 	bl	8002138 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000390 	.word	0x20000390
 80018e4:	40011000 	.word	0x40011000

080018e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <MX_DMA_Init+0x3c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001924 <MX_DMA_Init+0x3c>)
 80018f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fe:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <MX_DMA_Init+0x3c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	2038      	movs	r0, #56	@ 0x38
 8001910:	f002 fa9b 	bl	8003e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001914:	2038      	movs	r0, #56	@ 0x38
 8001916:	f002 fab4 	bl	8003e82 <HAL_NVIC_EnableIRQ>

}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800

08001928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	@ 0x28
 800192c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b51      	ldr	r3, [pc, #324]	@ (8001a88 <MX_GPIO_Init+0x160>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a50      	ldr	r2, [pc, #320]	@ (8001a88 <MX_GPIO_Init+0x160>)
 8001948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b4e      	ldr	r3, [pc, #312]	@ (8001a88 <MX_GPIO_Init+0x160>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a88 <MX_GPIO_Init+0x160>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a49      	ldr	r2, [pc, #292]	@ (8001a88 <MX_GPIO_Init+0x160>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b47      	ldr	r3, [pc, #284]	@ (8001a88 <MX_GPIO_Init+0x160>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b43      	ldr	r3, [pc, #268]	@ (8001a88 <MX_GPIO_Init+0x160>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a42      	ldr	r2, [pc, #264]	@ (8001a88 <MX_GPIO_Init+0x160>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b40      	ldr	r3, [pc, #256]	@ (8001a88 <MX_GPIO_Init+0x160>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b3c      	ldr	r3, [pc, #240]	@ (8001a88 <MX_GPIO_Init+0x160>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a3b      	ldr	r2, [pc, #236]	@ (8001a88 <MX_GPIO_Init+0x160>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b39      	ldr	r3, [pc, #228]	@ (8001a88 <MX_GPIO_Init+0x160>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_HEARTBEAT_GPIO_Port, LED_HEARTBEAT_Pin, GPIO_PIN_RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019b4:	4835      	ldr	r0, [pc, #212]	@ (8001a8c <MX_GPIO_Init+0x164>)
 80019b6:	f002 ff6b 	bl	8004890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPS_RX_Pin */
  GPIO_InitStruct.Pin = GPS_RX_Pin;
 80019ba:	2320      	movs	r3, #32
 80019bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	2303      	movs	r3, #3
 80019c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019ca:	2307      	movs	r3, #7
 80019cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	4619      	mov	r1, r3
 80019d4:	482d      	ldr	r0, [pc, #180]	@ (8001a8c <MX_GPIO_Init+0x164>)
 80019d6:	f002 fddf 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_TX_Pin */
  GPIO_InitStruct.Pin = GPS_TX_Pin;
 80019da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019ec:	2307      	movs	r3, #7
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4619      	mov	r1, r3
 80019f6:	4826      	ldr	r0, [pc, #152]	@ (8001a90 <MX_GPIO_Init+0x168>)
 80019f8:	f002 fdce 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_SDA_Pin */
  GPIO_InitStruct.Pin = GPS_SDA_Pin;
 80019fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a02:	2312      	movs	r3, #18
 8001a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPS_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	481c      	ldr	r0, [pc, #112]	@ (8001a8c <MX_GPIO_Init+0x164>)
 8001a1a:	f002 fdbd 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_SCL_Pin */
  GPIO_InitStruct.Pin = GPS_SCL_Pin;
 8001a1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a24:	2312      	movs	r3, #18
 8001a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a30:	2304      	movs	r3, #4
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPS_SCL_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4816      	ldr	r0, [pc, #88]	@ (8001a94 <MX_GPIO_Init+0x16c>)
 8001a3c:	f002 fdac 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = LED_HEARTBEAT_Pin;
 8001a40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4619      	mov	r1, r3
 8001a58:	480c      	ldr	r0, [pc, #48]	@ (8001a8c <MX_GPIO_Init+0x164>)
 8001a5a:	f002 fd9d 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pins : EEPROM_SCL_Pin EEPROM_SDA_Pin */
  GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8001a5e:	23c0      	movs	r3, #192	@ 0xc0
 8001a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a62:	2312      	movs	r3, #18
 8001a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a6e:	2304      	movs	r3, #4
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	4805      	ldr	r0, [pc, #20]	@ (8001a90 <MX_GPIO_Init+0x168>)
 8001a7a:	f002 fd8d 	bl	8004598 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a7e:	bf00      	nop
 8001a80:	3728      	adds	r7, #40	@ 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020000 	.word	0x40020000

08001a98 <MeasureSteeringAngle>:

/* USER CODE BEGIN 4 */
float MeasureSteeringAngle(uint16_t bits)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b08f      	sub	sp, #60	@ 0x3c
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
// Constants and variables
  const float ADC_MAX = 4095.0f;
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8001b58 <MeasureSteeringAngle+0xc0>)
 8001aa4:	637b      	str	r3, [r7, #52]	@ 0x34
  const float MCU_VREF = 3.3f;                    // MCU reference voltage
 8001aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b5c <MeasureSteeringAngle+0xc4>)
 8001aa8:	633b      	str	r3, [r7, #48]	@ 0x30
  const float SENSOR_VREF_Max = 4.5f;             // Maximum sensor reference voltage
 8001aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8001b60 <MeasureSteeringAngle+0xc8>)
 8001aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const float SENSOR_VREF_Min = 0.5f;             // Minimum sensor reference voltage
 8001aae:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8001ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  const float Resolution = 180.0f;                // Resolution of sensor -180 to 180
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b64 <MeasureSteeringAngle+0xcc>)
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  const float OFFSET = -31.3f;                    // In case of mechanical problems, put offset angle
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b68 <MeasureSteeringAngle+0xd0>)
 8001aba:	623b      	str	r3, [r7, #32]
  
  // Calculate Function Slope
  float max_v = SENSOR_VREF_Max * (2.0f/3.0f);
 8001abc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ac0:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001b6c <MeasureSteeringAngle+0xd4>
 8001ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac8:	edc7 7a07 	vstr	s15, [r7, #28]
  float min_v = SENSOR_VREF_Min * (2.0f/3.0f);
 8001acc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001ad0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001b6c <MeasureSteeringAngle+0xd4>
 8001ad4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad8:	edc7 7a06 	vstr	s15, [r7, #24]
  float inclination = 360.0f / (max_v - min_v);
 8001adc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ae0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ae4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ae8:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001b70 <MeasureSteeringAngle+0xd8>
 8001aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001af0:	edc7 7a05 	vstr	s15, [r7, #20]
  
  // Calculate Steering Angle
  float V_STA = (MCU_VREF * bits) / ADC_MAX;
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	ee07 3a90 	vmov	s15, r3
 8001afa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001afe:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b02:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b06:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b0e:	edc7 7a04 	vstr	s15, [r7, #16]
  float ST_Angle = inclination * V_STA - 45 - Resolution;
 8001b12:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b16:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1e:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001b74 <MeasureSteeringAngle+0xdc>
 8001b22:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001b26:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b2e:	edc7 7a03 	vstr	s15, [r7, #12]

  // If necessary add OFFSET
  ST_Angle += OFFSET;
 8001b32:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b36:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3e:	edc7 7a03 	vstr	s15, [r7, #12]
  return ST_Angle;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	ee07 3a90 	vmov	s15, r3
}
 8001b48:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4c:	373c      	adds	r7, #60	@ 0x3c
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	457ff000 	.word	0x457ff000
 8001b5c:	40533333 	.word	0x40533333
 8001b60:	40900000 	.word	0x40900000
 8001b64:	43340000 	.word	0x43340000
 8001b68:	c1fa6666 	.word	0xc1fa6666
 8001b6c:	3f2aaaab 	.word	0x3f2aaaab
 8001b70:	43b40000 	.word	0x43b40000
 8001b74:	42340000 	.word	0x42340000

08001b78 <MeasureSuspensionPosition>:

  return pressure; // Return the brake pressure in bar
}

float MeasureSuspensionPosition(uint16_t bits)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b08b      	sub	sp, #44	@ 0x2c
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	80fb      	strh	r3, [r7, #6]
  // Constants and Variables
  float V_SUSP;                                    // Voltage Signal from sensor
  float sensor_voltage = 5;                       // MAX Voltage level from sensor
 8001b82:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf8 <MeasureSuspensionPosition+0x80>)
 8001b84:	627b      	str	r3, [r7, #36]	@ 0x24
  float MCU_voltage = 3.3;                        // MAX MCU voltage level
 8001b86:	4b1d      	ldr	r3, [pc, #116]	@ (8001bfc <MeasureSuspensionPosition+0x84>)
 8001b88:	623b      	str	r3, [r7, #32]
  float Electrical_stroke = 75;                   // mm
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c00 <MeasureSuspensionPosition+0x88>)
 8001b8c:	61fb      	str	r3, [r7, #28]
  float SUSPENSION_POSITION;                      // Suspension level in mm
  float Conversion_Factor = MCU_voltage / sensor_voltage;
 8001b8e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001b92:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b9a:	edc7 7a06 	vstr	s15, [r7, #24]
  float volts;                                    // converted voltage
  // Calculate Voltage from ADC
  V_SUSP = (MCU_voltage * bits) / 4095;
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ba8:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bb0:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001c04 <MeasureSuspensionPosition+0x8c>
 8001bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bb8:	edc7 7a05 	vstr	s15, [r7, #20]
  volts = V_SUSP / Conversion_Factor;
 8001bbc:	edd7 6a05 	vldr	s13, [r7, #20]
 8001bc0:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc8:	edc7 7a04 	vstr	s15, [r7, #16]
  // Calculate Position
  SUSPENSION_POSITION = (Electrical_stroke * volts) / sensor_voltage;
 8001bcc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bd0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bd4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001bd8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001bdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001be0:	edc7 7a03 	vstr	s15, [r7, #12]

  return SUSPENSION_POSITION;                     // return suspension level in millimeters
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	ee07 3a90 	vmov	s15, r3
}
 8001bea:	eeb0 0a67 	vmov.f32	s0, s15
 8001bee:	372c      	adds	r7, #44	@ 0x2c
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	40a00000 	.word	0x40a00000
 8001bfc:	40533333 	.word	0x40533333
 8001c00:	42960000 	.word	0x42960000
 8001c04:	457ff000 	.word	0x457ff000

08001c08 <ADC_UpdateMovingAverage>:
/**
 * @brief  Updates the moving average for all ADC channels
 * @retval None
 */
void ADC_UpdateMovingAverage(void)
{
 8001c08:	b490      	push	{r4, r7}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
  // For each ADC channel
  for (int channel = 0; channel < 4; channel++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	e034      	b.n	8001c7e <ADC_UpdateMovingAverage+0x76>
  {
    // Add the new value to the circular buffer
    adc_buffers[channel][adc_buffer_index] = ADC_VALUE[channel];
 8001c14:	4b26      	ldr	r3, [pc, #152]	@ (8001cb0 <ADC_UpdateMovingAverage+0xa8>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461c      	mov	r4, r3
 8001c1a:	4a26      	ldr	r2, [pc, #152]	@ (8001cb4 <ADC_UpdateMovingAverage+0xac>)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001c22:	4a25      	ldr	r2, [pc, #148]	@ (8001cb8 <ADC_UpdateMovingAverage+0xb0>)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2132      	movs	r1, #50	@ 0x32
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	4423      	add	r3, r4
 8001c2e:	4601      	mov	r1, r0
 8001c30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    // Calculate sum of all values in the buffer
    uint32_t sum = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < ADC_BUFFER_SIZE; i++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	e00f      	b.n	8001c5e <ADC_UpdateMovingAverage+0x56>
    {
      sum += adc_buffers[channel][i];
 8001c3e:	491e      	ldr	r1, [pc, #120]	@ (8001cb8 <ADC_UpdateMovingAverage+0xb0>)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2232      	movs	r2, #50	@ 0x32
 8001c44:	fb03 f202 	mul.w	r2, r3, r2
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c50:	461a      	mov	r2, r3
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	4413      	add	r3, r2
 8001c56:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < ADC_BUFFER_SIZE; i++)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b31      	cmp	r3, #49	@ 0x31
 8001c62:	ddec      	ble.n	8001c3e <ADC_UpdateMovingAverage+0x36>
    }

    // Calculate average and update the filtered value
    adc_filtered[channel] = (uint16_t)(sum / ADC_BUFFER_SIZE);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4a15      	ldr	r2, [pc, #84]	@ (8001cbc <ADC_UpdateMovingAverage+0xb4>)
 8001c68:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	b299      	uxth	r1, r3
 8001c70:	4a13      	ldr	r2, [pc, #76]	@ (8001cc0 <ADC_UpdateMovingAverage+0xb8>)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int channel = 0; channel < 4; channel++)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	ddc7      	ble.n	8001c14 <ADC_UpdateMovingAverage+0xc>
  }

  // Update circular index
  adc_buffer_index = (adc_buffer_index + 1) % ADC_BUFFER_SIZE;
 8001c84:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb0 <ADC_UpdateMovingAverage+0xa8>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001cbc <ADC_UpdateMovingAverage+0xb4>)
 8001c8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c90:	1111      	asrs	r1, r2, #4
 8001c92:	17da      	asrs	r2, r3, #31
 8001c94:	1a8a      	subs	r2, r1, r2
 8001c96:	2132      	movs	r1, #50	@ 0x32
 8001c98:	fb01 f202 	mul.w	r2, r1, r2
 8001c9c:	1a9a      	subs	r2, r3, r2
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	4b03      	ldr	r3, [pc, #12]	@ (8001cb0 <ADC_UpdateMovingAverage+0xa8>)
 8001ca2:	701a      	strb	r2, [r3, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc90      	pop	{r4, r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000584 	.word	0x20000584
 8001cb4:	200003dc 	.word	0x200003dc
 8001cb8:	200003f4 	.word	0x200003f4
 8001cbc:	51eb851f 	.word	0x51eb851f
 8001cc0:	20000588 	.word	0x20000588

08001cc4 <HAL_TIM_IC_CaptureCallback>:
 *         TIM13 - Left wheel speed sensor (Hall sensor or encoder)
 *         TIM14 - Right wheel speed sensor (Hall sensor or encoder)
 * @retval None
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  static uint32_t lastCapture_R = 0;               // Previous capture value for right wheel
  static uint8_t firstCapture_L = 1;               // Flag for first capture on left wheel
  static uint8_t firstCapture_R = 1;               // Flag for first capture on right wheel

  // Left wheel speed sensor processing (TIM13)
  if (htim->Instance == TIM13 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a46      	ldr	r2, [pc, #280]	@ (8001dec <HAL_TIM_IC_CaptureCallback+0x128>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d140      	bne.n	8001d58 <HAL_TIM_IC_CaptureCallback+0x94>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	7f1b      	ldrb	r3, [r3, #28]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d13c      	bne.n	8001d58 <HAL_TIM_IC_CaptureCallback+0x94>
  {
    uint32_t currentCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001cde:	2100      	movs	r1, #0
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f003 fe5d 	bl	80059a0 <HAL_TIM_ReadCapturedValue>
 8001ce6:	60f8      	str	r0, [r7, #12]
    uint32_t calculated_period;
    
    // Update timestamp for timeout detection
    last_capture_time_L = HAL_GetTick();
 8001ce8:	f000 feaa 	bl	8002a40 <HAL_GetTick>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4a40      	ldr	r2, [pc, #256]	@ (8001df0 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001cf0:	6013      	str	r3, [r2, #0]

    // Handle first capture - just store the value for reference
    if (firstCapture_L)
 8001cf2:	4b40      	ldr	r3, [pc, #256]	@ (8001df4 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d009      	beq.n	8001d0e <HAL_TIM_IC_CaptureCallback+0x4a>
    {
      lastCapture_L = currentCapture;
 8001cfa:	4a3f      	ldr	r2, [pc, #252]	@ (8001df8 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6013      	str	r3, [r2, #0]
      firstCapture_L = 0;
 8001d00:	4b3c      	ldr	r3, [pc, #240]	@ (8001df4 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
      time_capture_L = 0;                          // No valid period yet
 8001d06:	4b3d      	ldr	r3, [pc, #244]	@ (8001dfc <HAL_TIM_IC_CaptureCallback+0x138>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
  {
 8001d0c:	e06a      	b.n	8001de4 <HAL_TIM_IC_CaptureCallback+0x120>
    }
    else
    {
      // Calculate period between consecutive pulses
      // Handle timer overflow case (16-bit timer with 65535 max value)
      if (currentCapture >= lastCapture_L)
 8001d0e:	4b3a      	ldr	r3, [pc, #232]	@ (8001df8 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d305      	bcc.n	8001d24 <HAL_TIM_IC_CaptureCallback+0x60>
      {
        calculated_period = currentCapture - lastCapture_L;
 8001d18:	4b37      	ldr	r3, [pc, #220]	@ (8001df8 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	e006      	b.n	8001d32 <HAL_TIM_IC_CaptureCallback+0x6e>
      }
      else
      {
        // Timer overflow occurred
        calculated_period = (65535 - lastCapture_L) + currentCapture + 1;
 8001d24:	4b34      	ldr	r3, [pc, #208]	@ (8001df8 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001d30:	617b      	str	r3, [r7, #20]
      }

      // Validate period is within acceptable range
      if (calculated_period > 0 && calculated_period <= MAX_VALID_PERIOD)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_TIM_IC_CaptureCallback+0x86>
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d803      	bhi.n	8001d4a <HAL_TIM_IC_CaptureCallback+0x86>
      {
        time_capture_L = calculated_period;        // Store valid period
 8001d42:	4a2e      	ldr	r2, [pc, #184]	@ (8001dfc <HAL_TIM_IC_CaptureCallback+0x138>)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	e002      	b.n	8001d50 <HAL_TIM_IC_CaptureCallback+0x8c>
      }
      else
      {
        time_capture_L = 0;                        // Invalid period, likely noise
 8001d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001dfc <HAL_TIM_IC_CaptureCallback+0x138>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
      }

      lastCapture_L = currentCapture;              // Update reference for next capture
 8001d50:	4a29      	ldr	r2, [pc, #164]	@ (8001df8 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6013      	str	r3, [r2, #0]
  {
 8001d56:	e045      	b.n	8001de4 <HAL_TIM_IC_CaptureCallback+0x120>
    }
  }

  // Right wheel speed sensor processing (TIM14)
  else if (htim->Instance == TIM14 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a28      	ldr	r2, [pc, #160]	@ (8001e00 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d140      	bne.n	8001de4 <HAL_TIM_IC_CaptureCallback+0x120>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7f1b      	ldrb	r3, [r3, #28]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d13c      	bne.n	8001de4 <HAL_TIM_IC_CaptureCallback+0x120>
  {
    uint32_t currentCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f003 fe17 	bl	80059a0 <HAL_TIM_ReadCapturedValue>
 8001d72:	60b8      	str	r0, [r7, #8]
    uint32_t calculated_period;
    
    // Update timestamp for timeout detection
    last_capture_time_R = HAL_GetTick();
 8001d74:	f000 fe64 	bl	8002a40 <HAL_GetTick>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4a22      	ldr	r2, [pc, #136]	@ (8001e04 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001d7c:	6013      	str	r3, [r2, #0]

    // Handle first capture - just store the value for reference
    if (firstCapture_R)
 8001d7e:	4b22      	ldr	r3, [pc, #136]	@ (8001e08 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d009      	beq.n	8001d9a <HAL_TIM_IC_CaptureCallback+0xd6>
    {
      lastCapture_R = currentCapture;
 8001d86:	4a21      	ldr	r2, [pc, #132]	@ (8001e0c <HAL_TIM_IC_CaptureCallback+0x148>)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	6013      	str	r3, [r2, #0]
      firstCapture_R = 0;
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e08 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
      time_capture_R = 0;                          // No valid period yet
 8001d92:	4b1f      	ldr	r3, [pc, #124]	@ (8001e10 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
      }
      
      lastCapture_R = currentCapture;              // Update reference for next capture
    }
  }
}
 8001d98:	e024      	b.n	8001de4 <HAL_TIM_IC_CaptureCallback+0x120>
      if (currentCapture >= lastCapture_R)
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e0c <HAL_TIM_IC_CaptureCallback+0x148>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d305      	bcc.n	8001db0 <HAL_TIM_IC_CaptureCallback+0xec>
        calculated_period = currentCapture - lastCapture_R;
 8001da4:	4b19      	ldr	r3, [pc, #100]	@ (8001e0c <HAL_TIM_IC_CaptureCallback+0x148>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	e006      	b.n	8001dbe <HAL_TIM_IC_CaptureCallback+0xfa>
        calculated_period = (65535 - lastCapture_R) + currentCapture + 1;
 8001db0:	4b16      	ldr	r3, [pc, #88]	@ (8001e0c <HAL_TIM_IC_CaptureCallback+0x148>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001dbc:	613b      	str	r3, [r7, #16]
      if (calculated_period > 0 && calculated_period <= MAX_VALID_PERIOD)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_TIM_IC_CaptureCallback+0x112>
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d803      	bhi.n	8001dd6 <HAL_TIM_IC_CaptureCallback+0x112>
        time_capture_R = calculated_period;        // Store valid period
 8001dce:	4a10      	ldr	r2, [pc, #64]	@ (8001e10 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	e002      	b.n	8001ddc <HAL_TIM_IC_CaptureCallback+0x118>
        time_capture_R = 0;                        // Invalid period, likely noise
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
      lastCapture_R = currentCapture;              // Update reference for next capture
 8001ddc:	4a0b      	ldr	r2, [pc, #44]	@ (8001e0c <HAL_TIM_IC_CaptureCallback+0x148>)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	6013      	str	r3, [r2, #0]
}
 8001de2:	e7ff      	b.n	8001de4 <HAL_TIM_IC_CaptureCallback+0x120>
 8001de4:	bf00      	nop
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40001c00 	.word	0x40001c00
 8001df0:	200003ec 	.word	0x200003ec
 8001df4:	20000008 	.word	0x20000008
 8001df8:	20000614 	.word	0x20000614
 8001dfc:	200003e4 	.word	0x200003e4
 8001e00:	40002000 	.word	0x40002000
 8001e04:	200003f0 	.word	0x200003f0
 8001e08:	20000009 	.word	0x20000009
 8001e0c:	20000618 	.word	0x20000618
 8001e10:	200003e8 	.word	0x200003e8

08001e14 <Speed_Measures>:

void Speed_Measures()
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  speed_measures_left[posL] = time_capture_L;
 8001e18:	4b17      	ldr	r3, [pc, #92]	@ (8001e78 <Speed_Measures+0x64>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a17      	ldr	r2, [pc, #92]	@ (8001e7c <Speed_Measures+0x68>)
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	4917      	ldr	r1, [pc, #92]	@ (8001e80 <Speed_Measures+0x6c>)
 8001e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  speed_measures_right[posR] = time_capture_R;
 8001e26:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <Speed_Measures+0x70>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a17      	ldr	r2, [pc, #92]	@ (8001e88 <Speed_Measures+0x74>)
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	4917      	ldr	r1, [pc, #92]	@ (8001e8c <Speed_Measures+0x78>)
 8001e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  posL = (posL + 1) % MAX_Speed_Measures;
 8001e34:	4b10      	ldr	r3, [pc, #64]	@ (8001e78 <Speed_Measures+0x64>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	1c59      	adds	r1, r3, #1
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <Speed_Measures+0x7c>)
 8001e3c:	fba3 2301 	umull	r2, r3, r3, r1
 8001e40:	08da      	lsrs	r2, r3, #3
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	1aca      	subs	r2, r1, r3
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <Speed_Measures+0x64>)
 8001e4e:	601a      	str	r2, [r3, #0]
  posR = (posR + 1) % MAX_Speed_Measures;
 8001e50:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <Speed_Measures+0x70>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	1c59      	adds	r1, r3, #1
 8001e56:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <Speed_Measures+0x7c>)
 8001e58:	fba3 2301 	umull	r2, r3, r3, r1
 8001e5c:	08da      	lsrs	r2, r3, #3
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	1aca      	subs	r2, r1, r3
 8001e68:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <Speed_Measures+0x70>)
 8001e6a:	601a      	str	r2, [r3, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	200005e0 	.word	0x200005e0
 8001e7c:	200003e4 	.word	0x200003e4
 8001e80:	20000590 	.word	0x20000590
 8001e84:	200005e4 	.word	0x200005e4
 8001e88:	200003e8 	.word	0x200003e8
 8001e8c:	200005b8 	.word	0x200005b8
 8001e90:	cccccccd 	.word	0xcccccccd

08001e94 <Moving_Average_Filter_Left>:
float Moving_Average_Filter_Left(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
  uint32_t sum = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
  float filtered_speed_left;
  for (int i = 0; i < MAX_Speed_Measures; i++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	e009      	b.n	8001eb8 <Moving_Average_Filter_Left+0x24>
  {
    sum += speed_measures_left[i];
 8001ea4:	4a10      	ldr	r2, [pc, #64]	@ (8001ee8 <Moving_Average_Filter_Left+0x54>)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4413      	add	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < MAX_Speed_Measures; i++)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b09      	cmp	r3, #9
 8001ebc:	ddf2      	ble.n	8001ea4 <Moving_Average_Filter_Left+0x10>
  }
  filtered_speed_left = sum / MAX_Speed_Measures;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8001eec <Moving_Average_Filter_Left+0x58>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	08db      	lsrs	r3, r3, #3
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ed0:	edc7 7a01 	vstr	s15, [r7, #4]
  return filtered_speed_left;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	ee07 3a90 	vmov	s15, r3
}
 8001eda:	eeb0 0a67 	vmov.f32	s0, s15
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	20000590 	.word	0x20000590
 8001eec:	cccccccd 	.word	0xcccccccd

08001ef0 <Moving_Average_Filter_Right>:
float Moving_Average_Filter_Right(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
  uint32_t sum = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
  float filtered_speed_right;
  for (int i = 0; i < MAX_Speed_Measures; i++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	e009      	b.n	8001f14 <Moving_Average_Filter_Right+0x24>
  {
    sum += speed_measures_right[i];
 8001f00:	4a10      	ldr	r2, [pc, #64]	@ (8001f44 <Moving_Average_Filter_Right+0x54>)
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < MAX_Speed_Measures; i++)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3301      	adds	r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b09      	cmp	r3, #9
 8001f18:	ddf2      	ble.n	8001f00 <Moving_Average_Filter_Right+0x10>
  }
  filtered_speed_right = sum / MAX_Speed_Measures;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f48 <Moving_Average_Filter_Right+0x58>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	08db      	lsrs	r3, r3, #3
 8001f24:	ee07 3a90 	vmov	s15, r3
 8001f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f2c:	edc7 7a01 	vstr	s15, [r7, #4]
  return filtered_speed_right;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	ee07 3a90 	vmov	s15, r3
}
 8001f36:	eeb0 0a67 	vmov.f32	s0, s15
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	200005b8 	.word	0x200005b8
 8001f48:	cccccccd 	.word	0xcccccccd
 8001f4c:	00000000 	.word	0x00000000

08001f50 <Calculate_Speed_in_Wheel>:
float Calculate_Speed_in_Wheel(float time, uint32_t last_capture_time)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08c      	sub	sp, #48	@ 0x30
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f5a:	6038      	str	r0, [r7, #0]
  // Constants and Variables
  const int teeth = 36;                            // Number of teeth in CogWheel
 8001f5c:	2324      	movs	r3, #36	@ 0x24
 8001f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const float inches_diameter = 20.5;              // Diameter of Wheels in inches
 8001f60:	4b41      	ldr	r3, [pc, #260]	@ (8002068 <Calculate_Speed_in_Wheel+0x118>)
 8001f62:	62bb      	str	r3, [r7, #40]	@ 0x28
  const float diameter = 25.4 * inches_diameter;   // Diameter of Wheels in mm
 8001f64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001f66:	f7fe fb0f 	bl	8000588 <__aeabi_f2d>
 8001f6a:	a339      	add	r3, pc, #228	@ (adr r3, 8002050 <Calculate_Speed_in_Wheel+0x100>)
 8001f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f70:	f7fe fb62 	bl	8000638 <__aeabi_dmul>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f7fe fe54 	bl	8000c28 <__aeabi_d2f>
 8001f80:	4603      	mov	r3, r0
 8001f82:	627b      	str	r3, [r7, #36]	@ 0x24
  const float perimeter = diameter * 3.141592;     // Perimeter of wheel in mm
 8001f84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f86:	f7fe faff 	bl	8000588 <__aeabi_f2d>
 8001f8a:	a333      	add	r3, pc, #204	@ (adr r3, 8002058 <Calculate_Speed_in_Wheel+0x108>)
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f7fe fb52 	bl	8000638 <__aeabi_dmul>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f7fe fe44 	bl	8000c28 <__aeabi_d2f>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	623b      	str	r3, [r7, #32]
  const float perimeter_m = perimeter / 1000.0f;   // Perimeter in Meters
 8001fa4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001fa8:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800206c <Calculate_Speed_in_Wheel+0x11c>
 8001fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fb0:	edc7 7a07 	vstr	s15, [r7, #28]
  
  uint32_t current_time = HAL_GetTick();
 8001fb4:	f000 fd44 	bl	8002a40 <HAL_GetTick>
 8001fb8:	61b8      	str	r0, [r7, #24]
  if ((current_time - last_capture_time) > WHEEL_TIMEOUT_MS)
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d902      	bls.n	8001fce <Calculate_Speed_in_Wheel+0x7e>
  {
    return 0.0f;                                   // Wheel stopped by timeout
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	e038      	b.n	8002040 <Calculate_Speed_in_Wheel+0xf0>
  }

   if (time <= 0)
 8001fce:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fda:	d802      	bhi.n	8001fe2 <Calculate_Speed_in_Wheel+0x92>
  {
    return 0.0f;                                   // Stopped Wheel
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	e02e      	b.n	8002040 <Calculate_Speed_in_Wheel+0xf0>
  }
  
  // Calculate Frequency
  float frequency = 1.0f / time;                   // Hz
 8001fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fe6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fee:	edc7 7a05 	vstr	s15, [r7, #20]

  // Calculate Wheel RPM
  float wheel_rpm = (frequency * 60) / teeth;
 8001ff2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ff6:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002070 <Calculate_Speed_in_Wheel+0x120>
 8001ffa:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800200c:	edc7 7a04 	vstr	s15, [r7, #16]

  // Calculate Speed
  float speed_km_per_hour = (perimeter_m * wheel_rpm) * 0.06;
 8002010:	ed97 7a07 	vldr	s14, [r7, #28]
 8002014:	edd7 7a04 	vldr	s15, [r7, #16]
 8002018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201c:	ee17 0a90 	vmov	r0, s15
 8002020:	f7fe fab2 	bl	8000588 <__aeabi_f2d>
 8002024:	a30e      	add	r3, pc, #56	@ (adr r3, 8002060 <Calculate_Speed_in_Wheel+0x110>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f7fe fb05 	bl	8000638 <__aeabi_dmul>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	f7fe fdf7 	bl	8000c28 <__aeabi_d2f>
 800203a:	4603      	mov	r3, r0
 800203c:	60fb      	str	r3, [r7, #12]

  return speed_km_per_hour;                        // Return value of Speed in Km/h
 800203e:	68fb      	ldr	r3, [r7, #12]
}
 8002040:	ee07 3a90 	vmov	s15, r3
 8002044:	eeb0 0a67 	vmov.f32	s0, s15
 8002048:	3730      	adds	r7, #48	@ 0x30
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	66666666 	.word	0x66666666
 8002054:	40396666 	.word	0x40396666
 8002058:	fc8b007a 	.word	0xfc8b007a
 800205c:	400921fa 	.word	0x400921fa
 8002060:	eb851eb8 	.word	0xeb851eb8
 8002064:	3faeb851 	.word	0x3faeb851
 8002068:	41a40000 	.word	0x41a40000
 800206c:	447a0000 	.word	0x447a0000
 8002070:	42700000 	.word	0x42700000

08002074 <CAN_FilterConfig1>:

void CAN_FilterConfig1()
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	@ 0x28
 8002078:	af00      	add	r7, sp, #0
#ifdef DYNAMICS_FRONT
  CAN_FilterTypeDef canfilterconfig;

  // Filter for 0x446
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800207a:	2301      	movs	r3, #1
 800207c:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;                  // which filter bank to use from the assigned ones
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x446 << 5;
 8002086:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 800208a:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x446 << 5;
 8002090:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 8002094:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800209e:	2301      	movs	r3, #1
 80020a0:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 18;       // how many filters to assign to the CAN1 (master can)
 80020a2:	2312      	movs	r3, #18
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80020a6:	463b      	mov	r3, r7
 80020a8:	4619      	mov	r1, r3
 80020aa:	480a      	ldr	r0, [pc, #40]	@ (80020d4 <CAN_FilterConfig1+0x60>)
 80020ac:	f001 f9c6 	bl	800343c <HAL_CAN_ConfigFilter>
  
  // Filter for 0x456
   canfilterconfig.FilterBank = 1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterIdHigh = 0x456 << 5;
 80020b4:	f648 23c0 	movw	r3, #35520	@ 0x8ac0
 80020b8:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterMaskIdHigh = 0x7FF << 5;
 80020ba:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80020be:	60bb      	str	r3, [r7, #8]
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80020c0:	463b      	mov	r3, r7
 80020c2:	4619      	mov	r1, r3
 80020c4:	4803      	ldr	r0, [pc, #12]	@ (80020d4 <CAN_FilterConfig1+0x60>)
 80020c6:	f001 f9b9 	bl	800343c <HAL_CAN_ConfigFilter>
   canfilterconfig.FilterBank = 1;
  canfilterconfig.FilterIdHigh = 0x556 << 5;
  canfilterconfig.FilterMaskIdHigh = 0x7FF << 5;
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
#endif
}
 80020ca:	bf00      	nop
 80020cc:	3728      	adds	r7, #40	@ 0x28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200002a4 	.word	0x200002a4

080020d8 <CAN_FilterConfig2>:
void CAN_FilterConfig2()
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	@ 0x28
 80020dc:	af00      	add	r7, sp, #0
#ifdef DYNAMICS_FRONT
  CAN_FilterTypeDef canfilterconfig;

  // Filter for 0x446
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80020de:	2301      	movs	r3, #1
 80020e0:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;                 // which filter bank to use from the assigned ones
 80020e2:	2312      	movs	r3, #18
 80020e4:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x446 << 5;
 80020ea:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 80020ee:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x446 << 5;
 80020f4:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 80020f8:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002102:	2301      	movs	r3, #1
 8002104:	61fb      	str	r3, [r7, #28]

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8002106:	463b      	mov	r3, r7
 8002108:	4619      	mov	r1, r3
 800210a:	480a      	ldr	r0, [pc, #40]	@ (8002134 <CAN_FilterConfig2+0x5c>)
 800210c:	f001 f996 	bl	800343c <HAL_CAN_ConfigFilter>

  // Filter for 0x456
  canfilterconfig.FilterBank = 19;                 // Different bank for CAN2
 8002110:	2313      	movs	r3, #19
 8002112:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterIdHigh = 0x456 << 5;
 8002114:	f648 23c0 	movw	r3, #35520	@ 0x8ac0
 8002118:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterMaskIdHigh = 0x7FF << 5;
 800211a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800211e:	60bb      	str	r3, [r7, #8]
  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8002120:	463b      	mov	r3, r7
 8002122:	4619      	mov	r1, r3
 8002124:	4803      	ldr	r0, [pc, #12]	@ (8002134 <CAN_FilterConfig2+0x5c>)
 8002126:	f001 f989 	bl	800343c <HAL_CAN_ConfigFilter>
  canfilterconfig.FilterBank = 19;
  canfilterconfig.FilterIdHigh = 0x556 << 5;
  canfilterconfig.FilterMaskIdHigh = 0x7FF << 5;
  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
#endif
}
 800212a:	bf00      	nop
 800212c:	3728      	adds	r7, #40	@ 0x28
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200002cc 	.word	0x200002cc

08002138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800213c:	b672      	cpsid	i
}
 800213e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <Error_Handler+0x8>

08002144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <HAL_MspInit+0x4c>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002152:	4a0f      	ldr	r2, [pc, #60]	@ (8002190 <HAL_MspInit+0x4c>)
 8002154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002158:	6453      	str	r3, [r2, #68]	@ 0x44
 800215a:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <HAL_MspInit+0x4c>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	603b      	str	r3, [r7, #0]
 800216a:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <HAL_MspInit+0x4c>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	4a08      	ldr	r2, [pc, #32]	@ (8002190 <HAL_MspInit+0x4c>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002174:	6413      	str	r3, [r2, #64]	@ 0x40
 8002176:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <HAL_MspInit+0x4c>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800

08002194 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	@ 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a3c      	ldr	r2, [pc, #240]	@ (80022a4 <HAL_ADC_MspInit+0x110>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d171      	bne.n	800229a <HAL_ADC_MspInit+0x106>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	4b3b      	ldr	r3, [pc, #236]	@ (80022a8 <HAL_ADC_MspInit+0x114>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	4a3a      	ldr	r2, [pc, #232]	@ (80022a8 <HAL_ADC_MspInit+0x114>)
 80021c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021c6:	4b38      	ldr	r3, [pc, #224]	@ (80022a8 <HAL_ADC_MspInit+0x114>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b34      	ldr	r3, [pc, #208]	@ (80022a8 <HAL_ADC_MspInit+0x114>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	4a33      	ldr	r2, [pc, #204]	@ (80022a8 <HAL_ADC_MspInit+0x114>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e2:	4b31      	ldr	r3, [pc, #196]	@ (80022a8 <HAL_ADC_MspInit+0x114>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	4b2d      	ldr	r3, [pc, #180]	@ (80022a8 <HAL_ADC_MspInit+0x114>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	4a2c      	ldr	r2, [pc, #176]	@ (80022a8 <HAL_ADC_MspInit+0x114>)
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fe:	4b2a      	ldr	r3, [pc, #168]	@ (80022a8 <HAL_ADC_MspInit+0x114>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ST_ANGLE_Pin|BRK_PRESS_Pin;
 800220a:	2306      	movs	r3, #6
 800220c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800220e:	2303      	movs	r3, #3
 8002210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	4619      	mov	r1, r3
 800221c:	4823      	ldr	r0, [pc, #140]	@ (80022ac <HAL_ADC_MspInit+0x118>)
 800221e:	f002 f9bb 	bl	8004598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSP_R_Pin|SUSP_L_Pin;
 8002222:	2303      	movs	r3, #3
 8002224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002226:	2303      	movs	r3, #3
 8002228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	481e      	ldr	r0, [pc, #120]	@ (80022b0 <HAL_ADC_MspInit+0x11c>)
 8002236:	f002 f9af 	bl	8004598 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800223a:	4b1e      	ldr	r3, [pc, #120]	@ (80022b4 <HAL_ADC_MspInit+0x120>)
 800223c:	4a1e      	ldr	r2, [pc, #120]	@ (80022b8 <HAL_ADC_MspInit+0x124>)
 800223e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002240:	4b1c      	ldr	r3, [pc, #112]	@ (80022b4 <HAL_ADC_MspInit+0x120>)
 8002242:	2200      	movs	r2, #0
 8002244:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002246:	4b1b      	ldr	r3, [pc, #108]	@ (80022b4 <HAL_ADC_MspInit+0x120>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800224c:	4b19      	ldr	r3, [pc, #100]	@ (80022b4 <HAL_ADC_MspInit+0x120>)
 800224e:	2200      	movs	r2, #0
 8002250:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002252:	4b18      	ldr	r3, [pc, #96]	@ (80022b4 <HAL_ADC_MspInit+0x120>)
 8002254:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002258:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800225a:	4b16      	ldr	r3, [pc, #88]	@ (80022b4 <HAL_ADC_MspInit+0x120>)
 800225c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002260:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002262:	4b14      	ldr	r3, [pc, #80]	@ (80022b4 <HAL_ADC_MspInit+0x120>)
 8002264:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002268:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800226a:	4b12      	ldr	r3, [pc, #72]	@ (80022b4 <HAL_ADC_MspInit+0x120>)
 800226c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002270:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002272:	4b10      	ldr	r3, [pc, #64]	@ (80022b4 <HAL_ADC_MspInit+0x120>)
 8002274:	2200      	movs	r2, #0
 8002276:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002278:	4b0e      	ldr	r3, [pc, #56]	@ (80022b4 <HAL_ADC_MspInit+0x120>)
 800227a:	2200      	movs	r2, #0
 800227c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800227e:	480d      	ldr	r0, [pc, #52]	@ (80022b4 <HAL_ADC_MspInit+0x120>)
 8002280:	f001 fe1a 	bl	8003eb8 <HAL_DMA_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800228a:	f7ff ff55 	bl	8002138 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a08      	ldr	r2, [pc, #32]	@ (80022b4 <HAL_ADC_MspInit+0x120>)
 8002292:	639a      	str	r2, [r3, #56]	@ 0x38
 8002294:	4a07      	ldr	r2, [pc, #28]	@ (80022b4 <HAL_ADC_MspInit+0x120>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800229a:	bf00      	nop
 800229c:	3728      	adds	r7, #40	@ 0x28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40012000 	.word	0x40012000
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020000 	.word	0x40020000
 80022b0:	40020400 	.word	0x40020400
 80022b4:	20000244 	.word	0x20000244
 80022b8:	40026410 	.word	0x40026410

080022bc <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08c      	sub	sp, #48	@ 0x30
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 031c 	add.w	r3, r7, #28
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a74      	ldr	r2, [pc, #464]	@ (80024ac <HAL_CAN_MspInit+0x1f0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d167      	bne.n	80023ae <HAL_CAN_MspInit+0xf2>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80022de:	4b74      	ldr	r3, [pc, #464]	@ (80024b0 <HAL_CAN_MspInit+0x1f4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3301      	adds	r3, #1
 80022e4:	4a72      	ldr	r2, [pc, #456]	@ (80024b0 <HAL_CAN_MspInit+0x1f4>)
 80022e6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80022e8:	4b71      	ldr	r3, [pc, #452]	@ (80024b0 <HAL_CAN_MspInit+0x1f4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d10d      	bne.n	800230c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80022f0:	2300      	movs	r3, #0
 80022f2:	61bb      	str	r3, [r7, #24]
 80022f4:	4b6f      	ldr	r3, [pc, #444]	@ (80024b4 <HAL_CAN_MspInit+0x1f8>)
 80022f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f8:	4a6e      	ldr	r2, [pc, #440]	@ (80024b4 <HAL_CAN_MspInit+0x1f8>)
 80022fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002300:	4b6c      	ldr	r3, [pc, #432]	@ (80024b4 <HAL_CAN_MspInit+0x1f8>)
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	4b68      	ldr	r3, [pc, #416]	@ (80024b4 <HAL_CAN_MspInit+0x1f8>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002314:	4a67      	ldr	r2, [pc, #412]	@ (80024b4 <HAL_CAN_MspInit+0x1f8>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6313      	str	r3, [r2, #48]	@ 0x30
 800231c:	4b65      	ldr	r3, [pc, #404]	@ (80024b4 <HAL_CAN_MspInit+0x1f8>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002328:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800232c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002332:	2301      	movs	r3, #1
 8002334:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002336:	2303      	movs	r3, #3
 8002338:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800233a:	2309      	movs	r3, #9
 800233c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233e:	f107 031c 	add.w	r3, r7, #28
 8002342:	4619      	mov	r1, r3
 8002344:	485c      	ldr	r0, [pc, #368]	@ (80024b8 <HAL_CAN_MspInit+0x1fc>)
 8002346:	f002 f927 	bl	8004598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CH1_TX_Pin;
 800234a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800234e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002358:	2303      	movs	r3, #3
 800235a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800235c:	2309      	movs	r3, #9
 800235e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(CH1_TX_GPIO_Port, &GPIO_InitStruct);
 8002360:	f107 031c 	add.w	r3, r7, #28
 8002364:	4619      	mov	r1, r3
 8002366:	4854      	ldr	r0, [pc, #336]	@ (80024b8 <HAL_CAN_MspInit+0x1fc>)
 8002368:	f002 f916 	bl	8004598 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	2100      	movs	r1, #0
 8002370:	2013      	movs	r0, #19
 8002372:	f001 fd6a 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002376:	2013      	movs	r0, #19
 8002378:	f001 fd83 	bl	8003e82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800237c:	2200      	movs	r2, #0
 800237e:	2100      	movs	r1, #0
 8002380:	2014      	movs	r0, #20
 8002382:	f001 fd62 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002386:	2014      	movs	r0, #20
 8002388:	f001 fd7b 	bl	8003e82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800238c:	2200      	movs	r2, #0
 800238e:	2100      	movs	r1, #0
 8002390:	2015      	movs	r0, #21
 8002392:	f001 fd5a 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002396:	2015      	movs	r0, #21
 8002398:	f001 fd73 	bl	8003e82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 800239c:	2200      	movs	r2, #0
 800239e:	2100      	movs	r1, #0
 80023a0:	2016      	movs	r0, #22
 80023a2:	f001 fd52 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80023a6:	2016      	movs	r0, #22
 80023a8:	f001 fd6b 	bl	8003e82 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 80023ac:	e079      	b.n	80024a2 <HAL_CAN_MspInit+0x1e6>
  else if(hcan->Instance==CAN2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a42      	ldr	r2, [pc, #264]	@ (80024bc <HAL_CAN_MspInit+0x200>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d174      	bne.n	80024a2 <HAL_CAN_MspInit+0x1e6>
    HAL_RCC_CAN1_CLK_ENABLED++;
 80023b8:	4b3d      	ldr	r3, [pc, #244]	@ (80024b0 <HAL_CAN_MspInit+0x1f4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3301      	adds	r3, #1
 80023be:	4a3c      	ldr	r2, [pc, #240]	@ (80024b0 <HAL_CAN_MspInit+0x1f4>)
 80023c0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80023c2:	4b3b      	ldr	r3, [pc, #236]	@ (80024b0 <HAL_CAN_MspInit+0x1f4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d10d      	bne.n	80023e6 <HAL_CAN_MspInit+0x12a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	4b39      	ldr	r3, [pc, #228]	@ (80024b4 <HAL_CAN_MspInit+0x1f8>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	4a38      	ldr	r2, [pc, #224]	@ (80024b4 <HAL_CAN_MspInit+0x1f8>)
 80023d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023da:	4b36      	ldr	r3, [pc, #216]	@ (80024b4 <HAL_CAN_MspInit+0x1f8>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN2_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b32      	ldr	r3, [pc, #200]	@ (80024b4 <HAL_CAN_MspInit+0x1f8>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	4a31      	ldr	r2, [pc, #196]	@ (80024b4 <HAL_CAN_MspInit+0x1f8>)
 80023f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023f6:	4b2f      	ldr	r3, [pc, #188]	@ (80024b4 <HAL_CAN_MspInit+0x1f8>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	4b2b      	ldr	r3, [pc, #172]	@ (80024b4 <HAL_CAN_MspInit+0x1f8>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	4a2a      	ldr	r2, [pc, #168]	@ (80024b4 <HAL_CAN_MspInit+0x1f8>)
 800240c:	f043 0302 	orr.w	r3, r3, #2
 8002410:	6313      	str	r3, [r2, #48]	@ 0x30
 8002412:	4b28      	ldr	r3, [pc, #160]	@ (80024b4 <HAL_CAN_MspInit+0x1f8>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CH2_RX_Pin;
 800241e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002428:	2301      	movs	r3, #1
 800242a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242c:	2303      	movs	r3, #3
 800242e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002430:	2309      	movs	r3, #9
 8002432:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(CH2_RX_GPIO_Port, &GPIO_InitStruct);
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	4619      	mov	r1, r3
 800243a:	4821      	ldr	r0, [pc, #132]	@ (80024c0 <HAL_CAN_MspInit+0x204>)
 800243c:	f002 f8ac 	bl	8004598 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CH2_TX_Pin;
 8002440:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244e:	2303      	movs	r3, #3
 8002450:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002452:	2309      	movs	r3, #9
 8002454:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(CH2_TX_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 031c 	add.w	r3, r7, #28
 800245a:	4619      	mov	r1, r3
 800245c:	4818      	ldr	r0, [pc, #96]	@ (80024c0 <HAL_CAN_MspInit+0x204>)
 800245e:	f002 f89b 	bl	8004598 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	203f      	movs	r0, #63	@ 0x3f
 8002468:	f001 fcef 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800246c:	203f      	movs	r0, #63	@ 0x3f
 800246e:	f001 fd08 	bl	8003e82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2100      	movs	r1, #0
 8002476:	2040      	movs	r0, #64	@ 0x40
 8002478:	f001 fce7 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800247c:	2040      	movs	r0, #64	@ 0x40
 800247e:	f001 fd00 	bl	8003e82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8002482:	2200      	movs	r2, #0
 8002484:	2100      	movs	r1, #0
 8002486:	2041      	movs	r0, #65	@ 0x41
 8002488:	f001 fcdf 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800248c:	2041      	movs	r0, #65	@ 0x41
 800248e:	f001 fcf8 	bl	8003e82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	2042      	movs	r0, #66	@ 0x42
 8002498:	f001 fcd7 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 800249c:	2042      	movs	r0, #66	@ 0x42
 800249e:	f001 fcf0 	bl	8003e82 <HAL_NVIC_EnableIRQ>
}
 80024a2:	bf00      	nop
 80024a4:	3730      	adds	r7, #48	@ 0x30
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40006400 	.word	0x40006400
 80024b0:	2000061c 	.word	0x2000061c
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40020000 	.word	0x40020000
 80024bc:	40006800 	.word	0x40006800
 80024c0:	40020400 	.word	0x40020400

080024c4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08c      	sub	sp, #48	@ 0x30
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 031c 	add.w	r3, r7, #28
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM13)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a3a      	ldr	r2, [pc, #232]	@ (80025cc <HAL_TIM_Base_MspInit+0x108>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d134      	bne.n	8002550 <HAL_TIM_Base_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	4b39      	ldr	r3, [pc, #228]	@ (80025d0 <HAL_TIM_Base_MspInit+0x10c>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	4a38      	ldr	r2, [pc, #224]	@ (80025d0 <HAL_TIM_Base_MspInit+0x10c>)
 80024f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024f6:	4b36      	ldr	r3, [pc, #216]	@ (80025d0 <HAL_TIM_Base_MspInit+0x10c>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024fe:	61bb      	str	r3, [r7, #24]
 8002500:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	4b32      	ldr	r3, [pc, #200]	@ (80025d0 <HAL_TIM_Base_MspInit+0x10c>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	4a31      	ldr	r2, [pc, #196]	@ (80025d0 <HAL_TIM_Base_MspInit+0x10c>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6313      	str	r3, [r2, #48]	@ 0x30
 8002512:	4b2f      	ldr	r3, [pc, #188]	@ (80025d0 <HAL_TIM_Base_MspInit+0x10c>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	697b      	ldr	r3, [r7, #20]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = SPEED_L_Pin;
 800251e:	2340      	movs	r3, #64	@ 0x40
 8002520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	2300      	movs	r3, #0
 800252c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800252e:	2309      	movs	r3, #9
 8002530:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SPEED_L_GPIO_Port, &GPIO_InitStruct);
 8002532:	f107 031c 	add.w	r3, r7, #28
 8002536:	4619      	mov	r1, r3
 8002538:	4826      	ldr	r0, [pc, #152]	@ (80025d4 <HAL_TIM_Base_MspInit+0x110>)
 800253a:	f002 f82d 	bl	8004598 <HAL_GPIO_Init>

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800253e:	2200      	movs	r2, #0
 8002540:	2100      	movs	r1, #0
 8002542:	202c      	movs	r0, #44	@ 0x2c
 8002544:	f001 fc81 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002548:	202c      	movs	r0, #44	@ 0x2c
 800254a:	f001 fc9a 	bl	8003e82 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 800254e:	e038      	b.n	80025c2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM14)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a20      	ldr	r2, [pc, #128]	@ (80025d8 <HAL_TIM_Base_MspInit+0x114>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d133      	bne.n	80025c2 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	4b1c      	ldr	r3, [pc, #112]	@ (80025d0 <HAL_TIM_Base_MspInit+0x10c>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	4a1b      	ldr	r2, [pc, #108]	@ (80025d0 <HAL_TIM_Base_MspInit+0x10c>)
 8002564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002568:	6413      	str	r3, [r2, #64]	@ 0x40
 800256a:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <HAL_TIM_Base_MspInit+0x10c>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	4b15      	ldr	r3, [pc, #84]	@ (80025d0 <HAL_TIM_Base_MspInit+0x10c>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	4a14      	ldr	r2, [pc, #80]	@ (80025d0 <HAL_TIM_Base_MspInit+0x10c>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6313      	str	r3, [r2, #48]	@ 0x30
 8002586:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <HAL_TIM_Base_MspInit+0x10c>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPEED_R_Pin;
 8002592:	2380      	movs	r3, #128	@ 0x80
 8002594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	2300      	movs	r3, #0
 80025a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80025a2:	2309      	movs	r3, #9
 80025a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SPEED_R_GPIO_Port, &GPIO_InitStruct);
 80025a6:	f107 031c 	add.w	r3, r7, #28
 80025aa:	4619      	mov	r1, r3
 80025ac:	4809      	ldr	r0, [pc, #36]	@ (80025d4 <HAL_TIM_Base_MspInit+0x110>)
 80025ae:	f001 fff3 	bl	8004598 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	202d      	movs	r0, #45	@ 0x2d
 80025b8:	f001 fc47 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80025bc:	202d      	movs	r0, #45	@ 0x2d
 80025be:	f001 fc60 	bl	8003e82 <HAL_NVIC_EnableIRQ>
}
 80025c2:	bf00      	nop
 80025c4:	3730      	adds	r7, #48	@ 0x30
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40001c00 	.word	0x40001c00
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40020000 	.word	0x40020000
 80025d8:	40002000 	.word	0x40002000

080025dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08a      	sub	sp, #40	@ 0x28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 0314 	add.w	r3, r7, #20
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a19      	ldr	r2, [pc, #100]	@ (8002660 <HAL_UART_MspInit+0x84>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d12c      	bne.n	8002658 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	4b18      	ldr	r3, [pc, #96]	@ (8002664 <HAL_UART_MspInit+0x88>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	4a17      	ldr	r2, [pc, #92]	@ (8002664 <HAL_UART_MspInit+0x88>)
 8002608:	f043 0310 	orr.w	r3, r3, #16
 800260c:	6453      	str	r3, [r2, #68]	@ 0x44
 800260e:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <HAL_UART_MspInit+0x88>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <HAL_UART_MspInit+0x88>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	4a10      	ldr	r2, [pc, #64]	@ (8002664 <HAL_UART_MspInit+0x88>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6313      	str	r3, [r2, #48]	@ 0x30
 800262a:	4b0e      	ldr	r3, [pc, #56]	@ (8002664 <HAL_UART_MspInit+0x88>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BL_TX_Pin|BL_RX_Pin;
 8002636:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800263a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002644:	2303      	movs	r3, #3
 8002646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002648:	2307      	movs	r3, #7
 800264a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	4619      	mov	r1, r3
 8002652:	4805      	ldr	r0, [pc, #20]	@ (8002668 <HAL_UART_MspInit+0x8c>)
 8002654:	f001 ffa0 	bl	8004598 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002658:	bf00      	nop
 800265a:	3728      	adds	r7, #40	@ 0x28
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40011000 	.word	0x40011000
 8002664:	40023800 	.word	0x40023800
 8002668:	40020000 	.word	0x40020000

0800266c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002670:	bf00      	nop
 8002672:	e7fd      	b.n	8002670 <NMI_Handler+0x4>

08002674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002678:	bf00      	nop
 800267a:	e7fd      	b.n	8002678 <HardFault_Handler+0x4>

0800267c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002680:	bf00      	nop
 8002682:	e7fd      	b.n	8002680 <MemManage_Handler+0x4>

08002684 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <BusFault_Handler+0x4>

0800268c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <UsageFault_Handler+0x4>

08002694 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026c2:	f000 f9a9 	bl	8002a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80026d0:	4802      	ldr	r0, [pc, #8]	@ (80026dc <CAN1_TX_IRQHandler+0x10>)
 80026d2:	f001 f8a5 	bl	8003820 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	200002a4 	.word	0x200002a4

080026e0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80026e4:	4802      	ldr	r0, [pc, #8]	@ (80026f0 <CAN1_RX0_IRQHandler+0x10>)
 80026e6:	f001 f89b 	bl	8003820 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200002a4 	.word	0x200002a4

080026f4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80026f8:	4802      	ldr	r0, [pc, #8]	@ (8002704 <CAN1_RX1_IRQHandler+0x10>)
 80026fa:	f001 f891 	bl	8003820 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	200002a4 	.word	0x200002a4

08002708 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800270c:	4802      	ldr	r0, [pc, #8]	@ (8002718 <CAN1_SCE_IRQHandler+0x10>)
 800270e:	f001 f887 	bl	8003820 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200002a4 	.word	0x200002a4

0800271c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002720:	4802      	ldr	r0, [pc, #8]	@ (800272c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002722:	f002 ffb1 	bl	8005688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000300 	.word	0x20000300

08002730 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002734:	4802      	ldr	r0, [pc, #8]	@ (8002740 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002736:	f002 ffa7 	bl	8005688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000348 	.word	0x20000348

08002744 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002748:	4802      	ldr	r0, [pc, #8]	@ (8002754 <DMA2_Stream0_IRQHandler+0x10>)
 800274a:	f001 fcbb 	bl	80040c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000244 	.word	0x20000244

08002758 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800275c:	4802      	ldr	r0, [pc, #8]	@ (8002768 <CAN2_TX_IRQHandler+0x10>)
 800275e:	f001 f85f 	bl	8003820 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	200002cc 	.word	0x200002cc

0800276c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002770:	4802      	ldr	r0, [pc, #8]	@ (800277c <CAN2_RX0_IRQHandler+0x10>)
 8002772:	f001 f855 	bl	8003820 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200002cc 	.word	0x200002cc

08002780 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002784:	4802      	ldr	r0, [pc, #8]	@ (8002790 <CAN2_RX1_IRQHandler+0x10>)
 8002786:	f001 f84b 	bl	8003820 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	200002cc 	.word	0x200002cc

08002794 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002798:	4802      	ldr	r0, [pc, #8]	@ (80027a4 <CAN2_SCE_IRQHandler+0x10>)
 800279a:	f001 f841 	bl	8003820 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	200002cc 	.word	0x200002cc

080027a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return 1;
 80027ac:	2301      	movs	r3, #1
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <_kill>:

int _kill(int pid, int sig)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027c2:	f004 ff5d 	bl	8007680 <__errno>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2216      	movs	r2, #22
 80027ca:	601a      	str	r2, [r3, #0]
  return -1;
 80027cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <_exit>:

void _exit (int status)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027e0:	f04f 31ff 	mov.w	r1, #4294967295
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ffe7 	bl	80027b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027ea:	bf00      	nop
 80027ec:	e7fd      	b.n	80027ea <_exit+0x12>

080027ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	e00a      	b.n	8002816 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002800:	f3af 8000 	nop.w
 8002804:	4601      	mov	r1, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	60ba      	str	r2, [r7, #8]
 800280c:	b2ca      	uxtb	r2, r1
 800280e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	3301      	adds	r3, #1
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	429a      	cmp	r2, r3
 800281c:	dbf0      	blt.n	8002800 <_read+0x12>
  }

  return len;
 800281e:	687b      	ldr	r3, [r7, #4]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002830:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002850:	605a      	str	r2, [r3, #4]
  return 0;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <_isatty>:

int _isatty(int file)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002868:	2301      	movs	r3, #1
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002876:	b480      	push	{r7}
 8002878:	b085      	sub	sp, #20
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002898:	4a14      	ldr	r2, [pc, #80]	@ (80028ec <_sbrk+0x5c>)
 800289a:	4b15      	ldr	r3, [pc, #84]	@ (80028f0 <_sbrk+0x60>)
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a4:	4b13      	ldr	r3, [pc, #76]	@ (80028f4 <_sbrk+0x64>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028ac:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <_sbrk+0x64>)
 80028ae:	4a12      	ldr	r2, [pc, #72]	@ (80028f8 <_sbrk+0x68>)
 80028b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028b2:	4b10      	ldr	r3, [pc, #64]	@ (80028f4 <_sbrk+0x64>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d207      	bcs.n	80028d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c0:	f004 fede 	bl	8007680 <__errno>
 80028c4:	4603      	mov	r3, r0
 80028c6:	220c      	movs	r2, #12
 80028c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
 80028ce:	e009      	b.n	80028e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d0:	4b08      	ldr	r3, [pc, #32]	@ (80028f4 <_sbrk+0x64>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028d6:	4b07      	ldr	r3, [pc, #28]	@ (80028f4 <_sbrk+0x64>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4413      	add	r3, r2
 80028de:	4a05      	ldr	r2, [pc, #20]	@ (80028f4 <_sbrk+0x64>)
 80028e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028e2:	68fb      	ldr	r3, [r7, #12]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20040000 	.word	0x20040000
 80028f0:	00000400 	.word	0x00000400
 80028f4:	20000620 	.word	0x20000620
 80028f8:	20000778 	.word	0x20000778

080028fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002900:	4b06      	ldr	r3, [pc, #24]	@ (800291c <SystemInit+0x20>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002906:	4a05      	ldr	r2, [pc, #20]	@ (800291c <SystemInit+0x20>)
 8002908:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800290c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002920:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002958 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002924:	f7ff ffea 	bl	80028fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002928:	480c      	ldr	r0, [pc, #48]	@ (800295c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800292a:	490d      	ldr	r1, [pc, #52]	@ (8002960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800292c:	4a0d      	ldr	r2, [pc, #52]	@ (8002964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800292e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002930:	e002      	b.n	8002938 <LoopCopyDataInit>

08002932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002936:	3304      	adds	r3, #4

08002938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800293c:	d3f9      	bcc.n	8002932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293e:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002940:	4c0a      	ldr	r4, [pc, #40]	@ (800296c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002944:	e001      	b.n	800294a <LoopFillZerobss>

08002946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002948:	3204      	adds	r2, #4

0800294a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800294c:	d3fb      	bcc.n	8002946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800294e:	f004 fe9d 	bl	800768c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002952:	f7fe fb9b 	bl	800108c <main>
  bx  lr    
 8002956:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002958:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800295c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002960:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002964:	0800b26c 	.word	0x0800b26c
  ldr r2, =_sbss
 8002968:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800296c:	20000774 	.word	0x20000774

08002970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002970:	e7fe      	b.n	8002970 <ADC_IRQHandler>
	...

08002974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002978:	4b0e      	ldr	r3, [pc, #56]	@ (80029b4 <HAL_Init+0x40>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0d      	ldr	r2, [pc, #52]	@ (80029b4 <HAL_Init+0x40>)
 800297e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002984:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <HAL_Init+0x40>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0a      	ldr	r2, [pc, #40]	@ (80029b4 <HAL_Init+0x40>)
 800298a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800298e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002990:	4b08      	ldr	r3, [pc, #32]	@ (80029b4 <HAL_Init+0x40>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a07      	ldr	r2, [pc, #28]	@ (80029b4 <HAL_Init+0x40>)
 8002996:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800299a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299c:	2003      	movs	r0, #3
 800299e:	f001 fa49 	bl	8003e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029a2:	200f      	movs	r0, #15
 80029a4:	f000 f808 	bl	80029b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a8:	f7ff fbcc 	bl	8002144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023c00 	.word	0x40023c00

080029b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029c0:	4b12      	ldr	r3, [pc, #72]	@ (8002a0c <HAL_InitTick+0x54>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b12      	ldr	r3, [pc, #72]	@ (8002a10 <HAL_InitTick+0x58>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	4619      	mov	r1, r3
 80029ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80029d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d6:	4618      	mov	r0, r3
 80029d8:	f001 fa61 	bl	8003e9e <HAL_SYSTICK_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e00e      	b.n	8002a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b0f      	cmp	r3, #15
 80029ea:	d80a      	bhi.n	8002a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ec:	2200      	movs	r2, #0
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	f001 fa29 	bl	8003e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f8:	4a06      	ldr	r2, [pc, #24]	@ (8002a14 <HAL_InitTick+0x5c>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e000      	b.n	8002a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	2000000c 	.word	0x2000000c
 8002a10:	20000014 	.word	0x20000014
 8002a14:	20000010 	.word	0x20000010

08002a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <HAL_IncTick+0x20>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <HAL_IncTick+0x24>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	4a04      	ldr	r2, [pc, #16]	@ (8002a3c <HAL_IncTick+0x24>)
 8002a2a:	6013      	str	r3, [r2, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	20000014 	.word	0x20000014
 8002a3c:	20000624 	.word	0x20000624

08002a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return uwTick;
 8002a44:	4b03      	ldr	r3, [pc, #12]	@ (8002a54 <HAL_GetTick+0x14>)
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	20000624 	.word	0x20000624

08002a58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e033      	b.n	8002ad6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff fb8c 	bl	8002194 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	f003 0310 	and.w	r3, r3, #16
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d118      	bne.n	8002ac8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a9e:	f023 0302 	bic.w	r3, r3, #2
 8002aa2:	f043 0202 	orr.w	r2, r3, #2
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fa4c 	bl	8002f48 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	f023 0303 	bic.w	r3, r3, #3
 8002abe:	f043 0201 	orr.w	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ac6:	e001      	b.n	8002acc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_ADC_Start_DMA+0x22>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e0d0      	b.n	8002ca4 <HAL_ADC_Start_DMA+0x1c4>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d018      	beq.n	8002b4a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b28:	4b60      	ldr	r3, [pc, #384]	@ (8002cac <HAL_ADC_Start_DMA+0x1cc>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a60      	ldr	r2, [pc, #384]	@ (8002cb0 <HAL_ADC_Start_DMA+0x1d0>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	0c9a      	lsrs	r2, r3, #18
 8002b34:	4613      	mov	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4413      	add	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002b3c:	e002      	b.n	8002b44 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f9      	bne.n	8002b3e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b58:	d107      	bne.n	8002b6a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b68:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	f040 8088 	bne.w	8002c8a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d007      	beq.n	8002bac <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ba4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bb8:	d106      	bne.n	8002bc8 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bbe:	f023 0206 	bic.w	r2, r3, #6
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	645a      	str	r2, [r3, #68]	@ 0x44
 8002bc6:	e002      	b.n	8002bce <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bd6:	4b37      	ldr	r3, [pc, #220]	@ (8002cb4 <HAL_ADC_Start_DMA+0x1d4>)
 8002bd8:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bde:	4a36      	ldr	r2, [pc, #216]	@ (8002cb8 <HAL_ADC_Start_DMA+0x1d8>)
 8002be0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be6:	4a35      	ldr	r2, [pc, #212]	@ (8002cbc <HAL_ADC_Start_DMA+0x1dc>)
 8002be8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bee:	4a34      	ldr	r2, [pc, #208]	@ (8002cc0 <HAL_ADC_Start_DMA+0x1e0>)
 8002bf0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002bfa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002c0a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c1a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	334c      	adds	r3, #76	@ 0x4c
 8002c26:	4619      	mov	r1, r3
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f001 f9f2 	bl	8004014 <HAL_DMA_Start_IT>
 8002c30:	4603      	mov	r3, r0
 8002c32:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10f      	bne.n	8002c60 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d129      	bne.n	8002ca2 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c5c:	609a      	str	r2, [r3, #8]
 8002c5e:	e020      	b.n	8002ca2 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a17      	ldr	r2, [pc, #92]	@ (8002cc4 <HAL_ADC_Start_DMA+0x1e4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d11b      	bne.n	8002ca2 <HAL_ADC_Start_DMA+0x1c2>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d114      	bne.n	8002ca2 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	e00b      	b.n	8002ca2 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	f043 0210 	orr.w	r2, r3, #16
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	f043 0201 	orr.w	r2, r3, #1
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002ca2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3720      	adds	r7, #32
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	2000000c 	.word	0x2000000c
 8002cb0:	431bde83 	.word	0x431bde83
 8002cb4:	40012300 	.word	0x40012300
 8002cb8:	08003141 	.word	0x08003141
 8002cbc:	080031fb 	.word	0x080031fb
 8002cc0:	08003217 	.word	0x08003217
 8002cc4:	40012000 	.word	0x40012000

08002cc8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x1c>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e105      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x228>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b09      	cmp	r3, #9
 8002d2e:	d925      	bls.n	8002d7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68d9      	ldr	r1, [r3, #12]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	3b1e      	subs	r3, #30
 8002d46:	2207      	movs	r2, #7
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43da      	mvns	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	400a      	ands	r2, r1
 8002d54:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68d9      	ldr	r1, [r3, #12]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	4618      	mov	r0, r3
 8002d68:	4603      	mov	r3, r0
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4403      	add	r3, r0
 8002d6e:	3b1e      	subs	r3, #30
 8002d70:	409a      	lsls	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	e022      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6919      	ldr	r1, [r3, #16]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4413      	add	r3, r2
 8002d90:	2207      	movs	r2, #7
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43da      	mvns	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6919      	ldr	r1, [r3, #16]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	4618      	mov	r0, r3
 8002db2:	4603      	mov	r3, r0
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4403      	add	r3, r0
 8002db8:	409a      	lsls	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b06      	cmp	r3, #6
 8002dc8:	d824      	bhi.n	8002e14 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	3b05      	subs	r3, #5
 8002ddc:	221f      	movs	r2, #31
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43da      	mvns	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	400a      	ands	r2, r1
 8002dea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	4618      	mov	r0, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	3b05      	subs	r3, #5
 8002e06:	fa00 f203 	lsl.w	r2, r0, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e12:	e04c      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b0c      	cmp	r3, #12
 8002e1a:	d824      	bhi.n	8002e66 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3b23      	subs	r3, #35	@ 0x23
 8002e2e:	221f      	movs	r2, #31
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43da      	mvns	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	400a      	ands	r2, r1
 8002e3c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	3b23      	subs	r3, #35	@ 0x23
 8002e58:	fa00 f203 	lsl.w	r2, r0, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e64:	e023      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	3b41      	subs	r3, #65	@ 0x41
 8002e78:	221f      	movs	r2, #31
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	400a      	ands	r2, r1
 8002e86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	4618      	mov	r0, r3
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3b41      	subs	r3, #65	@ 0x41
 8002ea2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eae:	4b22      	ldr	r3, [pc, #136]	@ (8002f38 <HAL_ADC_ConfigChannel+0x234>)
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a21      	ldr	r2, [pc, #132]	@ (8002f3c <HAL_ADC_ConfigChannel+0x238>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d109      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x1cc>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b12      	cmp	r3, #18
 8002ec2:	d105      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a19      	ldr	r2, [pc, #100]	@ (8002f3c <HAL_ADC_ConfigChannel+0x238>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d123      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x21e>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b10      	cmp	r3, #16
 8002ee0:	d003      	beq.n	8002eea <HAL_ADC_ConfigChannel+0x1e6>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b11      	cmp	r3, #17
 8002ee8:	d11b      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b10      	cmp	r3, #16
 8002efc:	d111      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002efe:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <HAL_ADC_ConfigChannel+0x23c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a10      	ldr	r2, [pc, #64]	@ (8002f44 <HAL_ADC_ConfigChannel+0x240>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	0c9a      	lsrs	r2, r3, #18
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f14:	e002      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f9      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	40012300 	.word	0x40012300
 8002f3c:	40012000 	.word	0x40012000
 8002f40:	2000000c 	.word	0x2000000c
 8002f44:	431bde83 	.word	0x431bde83

08002f48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f50:	4b79      	ldr	r3, [pc, #484]	@ (8003138 <ADC_Init+0x1f0>)
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6859      	ldr	r1, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	021a      	lsls	r2, r3, #8
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002fa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6859      	ldr	r1, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6899      	ldr	r1, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fda:	4a58      	ldr	r2, [pc, #352]	@ (800313c <ADC_Init+0x1f4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d022      	beq.n	8003026 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6899      	ldr	r1, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003010:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6899      	ldr	r1, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	e00f      	b.n	8003046 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003034:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003044:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0202 	bic.w	r2, r2, #2
 8003054:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6899      	ldr	r1, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	7e1b      	ldrb	r3, [r3, #24]
 8003060:	005a      	lsls	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d01b      	beq.n	80030ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003082:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003092:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6859      	ldr	r1, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	3b01      	subs	r3, #1
 80030a0:	035a      	lsls	r2, r3, #13
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	e007      	b.n	80030bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80030ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	051a      	lsls	r2, r3, #20
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80030f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6899      	ldr	r1, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030fe:	025a      	lsls	r2, r3, #9
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003116:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6899      	ldr	r1, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	029a      	lsls	r2, r3, #10
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	609a      	str	r2, [r3, #8]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40012300 	.word	0x40012300
 800313c:	0f000001 	.word	0x0f000001

08003140 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003156:	2b00      	cmp	r3, #0
 8003158:	d13c      	bne.n	80031d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d12b      	bne.n	80031cc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003178:	2b00      	cmp	r3, #0
 800317a:	d127      	bne.n	80031cc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003182:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003186:	2b00      	cmp	r3, #0
 8003188:	d006      	beq.n	8003198 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003194:	2b00      	cmp	r3, #0
 8003196:	d119      	bne.n	80031cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0220 	bic.w	r2, r2, #32
 80031a6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	f043 0201 	orr.w	r2, r3, #1
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f7ff fd7b 	bl	8002cc8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031d2:	e00e      	b.n	80031f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f7ff fd85 	bl	8002cf0 <HAL_ADC_ErrorCallback>
}
 80031e6:	e004      	b.n	80031f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	4798      	blx	r3
}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003206:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f7ff fd67 	bl	8002cdc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b084      	sub	sp, #16
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003222:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2240      	movs	r2, #64	@ 0x40
 8003228:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322e:	f043 0204 	orr.w	r2, r3, #4
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f7ff fd5a 	bl	8002cf0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800323c:	bf00      	nop
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0ed      	b.n	8003432 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3020 	ldrb.w	r3, [r3, #32]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff f82a 	bl	80022bc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003278:	f7ff fbe2 	bl	8002a40 <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800327e:	e012      	b.n	80032a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003280:	f7ff fbde 	bl	8002a40 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b0a      	cmp	r3, #10
 800328c:	d90b      	bls.n	80032a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003292:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2205      	movs	r2, #5
 800329e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e0c5      	b.n	8003432 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0e5      	beq.n	8003280 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0202 	bic.w	r2, r2, #2
 80032c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032c4:	f7ff fbbc 	bl	8002a40 <HAL_GetTick>
 80032c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032ca:	e012      	b.n	80032f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032cc:	f7ff fbb8 	bl	8002a40 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b0a      	cmp	r3, #10
 80032d8:	d90b      	bls.n	80032f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2205      	movs	r2, #5
 80032ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e09f      	b.n	8003432 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e5      	bne.n	80032cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	7e1b      	ldrb	r3, [r3, #24]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d108      	bne.n	800331a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	e007      	b.n	800332a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003328:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	7e5b      	ldrb	r3, [r3, #25]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d108      	bne.n	8003344 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	e007      	b.n	8003354 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003352:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	7e9b      	ldrb	r3, [r3, #26]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d108      	bne.n	800336e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0220 	orr.w	r2, r2, #32
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	e007      	b.n	800337e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0220 	bic.w	r2, r2, #32
 800337c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	7edb      	ldrb	r3, [r3, #27]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d108      	bne.n	8003398 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0210 	bic.w	r2, r2, #16
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e007      	b.n	80033a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0210 	orr.w	r2, r2, #16
 80033a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	7f1b      	ldrb	r3, [r3, #28]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d108      	bne.n	80033c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0208 	orr.w	r2, r2, #8
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	e007      	b.n	80033d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0208 	bic.w	r2, r2, #8
 80033d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	7f5b      	ldrb	r3, [r3, #29]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d108      	bne.n	80033ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0204 	orr.w	r2, r2, #4
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	e007      	b.n	80033fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0204 	bic.w	r2, r2, #4
 80033fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	ea42 0103 	orr.w	r1, r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	1e5a      	subs	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3020 	ldrb.w	r3, [r3, #32]
 800344c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 800344e:	7dfb      	ldrb	r3, [r7, #23]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d003      	beq.n	800345c <HAL_CAN_ConfigFilter+0x20>
 8003454:	7dfb      	ldrb	r3, [r7, #23]
 8003456:	2b02      	cmp	r3, #2
 8003458:	f040 80be 	bne.w	80035d8 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800345c:	4b65      	ldr	r3, [pc, #404]	@ (80035f4 <HAL_CAN_ConfigFilter+0x1b8>)
 800345e:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003466:	f043 0201 	orr.w	r2, r3, #1
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003476:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	431a      	orrs	r2, r3
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	2201      	movs	r2, #1
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	43db      	mvns	r3, r3
 80034ae:	401a      	ands	r2, r3
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d123      	bne.n	8003506 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	401a      	ands	r2, r3
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80034e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	3248      	adds	r2, #72	@ 0x48
 80034e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034fc:	6939      	ldr	r1, [r7, #16]
 80034fe:	3348      	adds	r3, #72	@ 0x48
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	440b      	add	r3, r1
 8003504:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d122      	bne.n	8003554 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	431a      	orrs	r2, r3
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800352e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	3248      	adds	r2, #72	@ 0x48
 8003534:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003548:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800354a:	6939      	ldr	r1, [r7, #16]
 800354c:	3348      	adds	r3, #72	@ 0x48
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	440b      	add	r3, r1
 8003552:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	43db      	mvns	r3, r3
 8003566:	401a      	ands	r2, r3
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800356e:	e007      	b.n	8003580 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	431a      	orrs	r2, r3
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d109      	bne.n	800359c <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	43db      	mvns	r3, r3
 8003592:	401a      	ands	r2, r3
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800359a:	e007      	b.n	80035ac <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	431a      	orrs	r2, r3
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d107      	bne.n	80035c4 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	431a      	orrs	r2, r3
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80035ca:	f023 0201 	bic.w	r2, r3, #1
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	e006      	b.n	80035e6 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035dc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
  }
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40006400 	.word	0x40006400

080035f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d12e      	bne.n	800366a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003624:	f7ff fa0c 	bl	8002a40 <HAL_GetTick>
 8003628:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800362a:	e012      	b.n	8003652 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800362c:	f7ff fa08 	bl	8002a40 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b0a      	cmp	r3, #10
 8003638:	d90b      	bls.n	8003652 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2205      	movs	r2, #5
 800364a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e012      	b.n	8003678 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e5      	bne.n	800362c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	e006      	b.n	8003678 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
  }
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003680:	b480      	push	{r7}
 8003682:	b089      	sub	sp, #36	@ 0x24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003694:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800369e:	7ffb      	ldrb	r3, [r7, #31]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d003      	beq.n	80036ac <HAL_CAN_AddTxMessage+0x2c>
 80036a4:	7ffb      	ldrb	r3, [r7, #31]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	f040 80ad 	bne.w	8003806 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10a      	bne.n	80036cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8095 	beq.w	80037f6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	0e1b      	lsrs	r3, r3, #24
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80036d6:	2201      	movs	r2, #1
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	409a      	lsls	r2, r3
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10d      	bne.n	8003704 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80036f2:	68f9      	ldr	r1, [r7, #12]
 80036f4:	6809      	ldr	r1, [r1, #0]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	3318      	adds	r3, #24
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	440b      	add	r3, r1
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e00f      	b.n	8003724 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800370e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003714:	68f9      	ldr	r1, [r7, #12]
 8003716:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003718:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	3318      	adds	r3, #24
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	440b      	add	r3, r1
 8003722:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6819      	ldr	r1, [r3, #0]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	3318      	adds	r3, #24
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	440b      	add	r3, r1
 8003734:	3304      	adds	r3, #4
 8003736:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	7d1b      	ldrb	r3, [r3, #20]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d111      	bne.n	8003764 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	3318      	adds	r3, #24
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	4413      	add	r3, r2
 800374c:	3304      	adds	r3, #4
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	6811      	ldr	r1, [r2, #0]
 8003754:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	3318      	adds	r3, #24
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	440b      	add	r3, r1
 8003760:	3304      	adds	r3, #4
 8003762:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3307      	adds	r3, #7
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	061a      	lsls	r2, r3, #24
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3306      	adds	r3, #6
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3305      	adds	r3, #5
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	021b      	lsls	r3, r3, #8
 800377e:	4313      	orrs	r3, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	3204      	adds	r2, #4
 8003784:	7812      	ldrb	r2, [r2, #0]
 8003786:	4610      	mov	r0, r2
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	6811      	ldr	r1, [r2, #0]
 800378c:	ea43 0200 	orr.w	r2, r3, r0
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	440b      	add	r3, r1
 8003796:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800379a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3303      	adds	r3, #3
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	061a      	lsls	r2, r3, #24
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3302      	adds	r3, #2
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	041b      	lsls	r3, r3, #16
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3301      	adds	r3, #1
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	4313      	orrs	r3, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	7812      	ldrb	r2, [r2, #0]
 80037bc:	4610      	mov	r0, r2
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	6811      	ldr	r1, [r2, #0]
 80037c2:	ea43 0200 	orr.w	r2, r3, r0
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	440b      	add	r3, r1
 80037cc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80037d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	3318      	adds	r3, #24
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	4413      	add	r3, r2
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	6811      	ldr	r1, [r2, #0]
 80037e4:	f043 0201 	orr.w	r2, r3, #1
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	3318      	adds	r3, #24
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	440b      	add	r3, r1
 80037f0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	e00e      	b.n	8003814 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e006      	b.n	8003814 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
  }
}
 8003814:	4618      	mov	r0, r3
 8003816:	3724      	adds	r7, #36	@ 0x24
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08a      	sub	sp, #40	@ 0x28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003828:	2300      	movs	r3, #0
 800382a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d07c      	beq.n	8003960 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d023      	beq.n	80038b8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2201      	movs	r2, #1
 8003876:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f983 	bl	8003b8e <HAL_CAN_TxMailbox0CompleteCallback>
 8003888:	e016      	b.n	80038b8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
 800389c:	e00c      	b.n	80038b8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d004      	beq.n	80038b2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80038a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80038ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b0:	e002      	b.n	80038b8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f989 	bl	8003bca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d024      	beq.n	800390c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f963 	bl	8003ba2 <HAL_CAN_TxMailbox1CompleteCallback>
 80038dc:	e016      	b.n	800390c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d004      	beq.n	80038f2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80038e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f0:	e00c      	b.n	800390c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003902:	627b      	str	r3, [r7, #36]	@ 0x24
 8003904:	e002      	b.n	800390c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f969 	bl	8003bde <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d024      	beq.n	8003960 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800391e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f943 	bl	8003bb6 <HAL_CAN_TxMailbox2CompleteCallback>
 8003930:	e016      	b.n	8003960 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d004      	beq.n	8003946 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
 8003944:	e00c      	b.n	8003960 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d004      	beq.n	800395a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
 8003958:	e002      	b.n	8003960 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f949 	bl	8003bf2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00c      	beq.n	8003984 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b00      	cmp	r3, #0
 8003972:	d007      	beq.n	8003984 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2210      	movs	r2, #16
 8003982:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d006      	beq.n	80039a6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2208      	movs	r2, #8
 800399e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f93a 	bl	8003c1a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d009      	beq.n	80039c4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f921 	bl	8003c06 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00c      	beq.n	80039e8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d007      	beq.n	80039e8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039de:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2210      	movs	r2, #16
 80039e6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00b      	beq.n	8003a0a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d006      	beq.n	8003a0a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2208      	movs	r2, #8
 8003a02:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f91c 	bl	8003c42 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d009      	beq.n	8003a28 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f903 	bl	8003c2e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d006      	beq.n	8003a4a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2210      	movs	r2, #16
 8003a42:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f906 	bl	8003c56 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00b      	beq.n	8003a6c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d006      	beq.n	8003a6c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2208      	movs	r2, #8
 8003a64:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f8ff 	bl	8003c6a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d07b      	beq.n	8003b6e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d072      	beq.n	8003b66 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	f043 0302 	orr.w	r3, r3, #2
 8003ab6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d008      	beq.n	8003ad4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	f043 0304 	orr.w	r3, r3, #4
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d043      	beq.n	8003b66 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d03e      	beq.n	8003b66 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003aee:	2b60      	cmp	r3, #96	@ 0x60
 8003af0:	d02b      	beq.n	8003b4a <HAL_CAN_IRQHandler+0x32a>
 8003af2:	2b60      	cmp	r3, #96	@ 0x60
 8003af4:	d82e      	bhi.n	8003b54 <HAL_CAN_IRQHandler+0x334>
 8003af6:	2b50      	cmp	r3, #80	@ 0x50
 8003af8:	d022      	beq.n	8003b40 <HAL_CAN_IRQHandler+0x320>
 8003afa:	2b50      	cmp	r3, #80	@ 0x50
 8003afc:	d82a      	bhi.n	8003b54 <HAL_CAN_IRQHandler+0x334>
 8003afe:	2b40      	cmp	r3, #64	@ 0x40
 8003b00:	d019      	beq.n	8003b36 <HAL_CAN_IRQHandler+0x316>
 8003b02:	2b40      	cmp	r3, #64	@ 0x40
 8003b04:	d826      	bhi.n	8003b54 <HAL_CAN_IRQHandler+0x334>
 8003b06:	2b30      	cmp	r3, #48	@ 0x30
 8003b08:	d010      	beq.n	8003b2c <HAL_CAN_IRQHandler+0x30c>
 8003b0a:	2b30      	cmp	r3, #48	@ 0x30
 8003b0c:	d822      	bhi.n	8003b54 <HAL_CAN_IRQHandler+0x334>
 8003b0e:	2b10      	cmp	r3, #16
 8003b10:	d002      	beq.n	8003b18 <HAL_CAN_IRQHandler+0x2f8>
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	d005      	beq.n	8003b22 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003b16:	e01d      	b.n	8003b54 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1a:	f043 0308 	orr.w	r3, r3, #8
 8003b1e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b20:	e019      	b.n	8003b56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	f043 0310 	orr.w	r3, r3, #16
 8003b28:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b2a:	e014      	b.n	8003b56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	f043 0320 	orr.w	r3, r3, #32
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b34:	e00f      	b.n	8003b56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b3e:	e00a      	b.n	8003b56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b46:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b48:	e005      	b.n	8003b56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b50:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b52:	e000      	b.n	8003b56 <HAL_CAN_IRQHandler+0x336>
            break;
 8003b54:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699a      	ldr	r2, [r3, #24]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003b64:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f87c 	bl	8003c7e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003b86:	bf00      	nop
 8003b88:	3728      	adds	r7, #40	@ 0x28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
	...

08003c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cc6:	4a04      	ldr	r2, [pc, #16]	@ (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	60d3      	str	r3, [r2, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce0:	4b04      	ldr	r3, [pc, #16]	@ (8003cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	f003 0307 	and.w	r3, r3, #7
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	db0b      	blt.n	8003d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	f003 021f 	and.w	r2, r3, #31
 8003d10:	4907      	ldr	r1, [pc, #28]	@ (8003d30 <__NVIC_EnableIRQ+0x38>)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	2001      	movs	r0, #1
 8003d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	e000e100 	.word	0xe000e100

08003d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	6039      	str	r1, [r7, #0]
 8003d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	db0a      	blt.n	8003d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	490c      	ldr	r1, [pc, #48]	@ (8003d80 <__NVIC_SetPriority+0x4c>)
 8003d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d52:	0112      	lsls	r2, r2, #4
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	440b      	add	r3, r1
 8003d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d5c:	e00a      	b.n	8003d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	4908      	ldr	r1, [pc, #32]	@ (8003d84 <__NVIC_SetPriority+0x50>)
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	3b04      	subs	r3, #4
 8003d6c:	0112      	lsls	r2, r2, #4
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	440b      	add	r3, r1
 8003d72:	761a      	strb	r2, [r3, #24]
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	e000e100 	.word	0xe000e100
 8003d84:	e000ed00 	.word	0xe000ed00

08003d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b089      	sub	sp, #36	@ 0x24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f1c3 0307 	rsb	r3, r3, #7
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	bf28      	it	cs
 8003da6:	2304      	movcs	r3, #4
 8003da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	3304      	adds	r3, #4
 8003dae:	2b06      	cmp	r3, #6
 8003db0:	d902      	bls.n	8003db8 <NVIC_EncodePriority+0x30>
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	3b03      	subs	r3, #3
 8003db6:	e000      	b.n	8003dba <NVIC_EncodePriority+0x32>
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	401a      	ands	r2, r3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dda:	43d9      	mvns	r1, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de0:	4313      	orrs	r3, r2
         );
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3724      	adds	r7, #36	@ 0x24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e00:	d301      	bcc.n	8003e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e02:	2301      	movs	r3, #1
 8003e04:	e00f      	b.n	8003e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e06:	4a0a      	ldr	r2, [pc, #40]	@ (8003e30 <SysTick_Config+0x40>)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e0e:	210f      	movs	r1, #15
 8003e10:	f04f 30ff 	mov.w	r0, #4294967295
 8003e14:	f7ff ff8e 	bl	8003d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e18:	4b05      	ldr	r3, [pc, #20]	@ (8003e30 <SysTick_Config+0x40>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e1e:	4b04      	ldr	r3, [pc, #16]	@ (8003e30 <SysTick_Config+0x40>)
 8003e20:	2207      	movs	r2, #7
 8003e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	e000e010 	.word	0xe000e010

08003e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ff29 	bl	8003c94 <__NVIC_SetPriorityGrouping>
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b086      	sub	sp, #24
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	4603      	mov	r3, r0
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
 8003e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e5c:	f7ff ff3e 	bl	8003cdc <__NVIC_GetPriorityGrouping>
 8003e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	6978      	ldr	r0, [r7, #20]
 8003e68:	f7ff ff8e 	bl	8003d88 <NVIC_EncodePriority>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff ff5d 	bl	8003d34 <__NVIC_SetPriority>
}
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	4603      	mov	r3, r0
 8003e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff ff31 	bl	8003cf8 <__NVIC_EnableIRQ>
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff ffa2 	bl	8003df0 <SysTick_Config>
 8003eac:	4603      	mov	r3, r0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ec4:	f7fe fdbc 	bl	8002a40 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e099      	b.n	8004008 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ef4:	e00f      	b.n	8003f16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ef6:	f7fe fda3 	bl	8002a40 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b05      	cmp	r3, #5
 8003f02:	d908      	bls.n	8003f16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2220      	movs	r2, #32
 8003f08:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e078      	b.n	8004008 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e8      	bne.n	8003ef6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	4b38      	ldr	r3, [pc, #224]	@ (8004010 <HAL_DMA_Init+0x158>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d107      	bne.n	8003f80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f023 0307 	bic.w	r3, r3, #7
 8003f96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d117      	bne.n	8003fda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00e      	beq.n	8003fda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fa6f 	bl	80044a0 <DMA_CheckFifoParam>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2240      	movs	r2, #64	@ 0x40
 8003fcc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e016      	b.n	8004008 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fa26 	bl	8004434 <DMA_CalcBaseAndBitshift>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff0:	223f      	movs	r2, #63	@ 0x3f
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	f010803f 	.word	0xf010803f

08004014 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_DMA_Start_IT+0x26>
 8004036:	2302      	movs	r3, #2
 8004038:	e040      	b.n	80040bc <HAL_DMA_Start_IT+0xa8>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	d12f      	bne.n	80040ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2202      	movs	r2, #2
 8004052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f9b8 	bl	80043d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406c:	223f      	movs	r2, #63	@ 0x3f
 800406e:	409a      	lsls	r2, r3
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0216 	orr.w	r2, r2, #22
 8004082:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0208 	orr.w	r2, r2, #8
 800409a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	e005      	b.n	80040ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040b6:	2302      	movs	r3, #2
 80040b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040d0:	4b8e      	ldr	r3, [pc, #568]	@ (800430c <HAL_DMA_IRQHandler+0x248>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a8e      	ldr	r2, [pc, #568]	@ (8004310 <HAL_DMA_IRQHandler+0x24c>)
 80040d6:	fba2 2303 	umull	r2, r3, r2, r3
 80040da:	0a9b      	lsrs	r3, r3, #10
 80040dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ee:	2208      	movs	r2, #8
 80040f0:	409a      	lsls	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d01a      	beq.n	8004130 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d013      	beq.n	8004130 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0204 	bic.w	r2, r2, #4
 8004116:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411c:	2208      	movs	r2, #8
 800411e:	409a      	lsls	r2, r3
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004128:	f043 0201 	orr.w	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004134:	2201      	movs	r2, #1
 8004136:	409a      	lsls	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d012      	beq.n	8004166 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004152:	2201      	movs	r2, #1
 8004154:	409a      	lsls	r2, r3
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415e:	f043 0202 	orr.w	r2, r3, #2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416a:	2204      	movs	r2, #4
 800416c:	409a      	lsls	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4013      	ands	r3, r2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d012      	beq.n	800419c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00b      	beq.n	800419c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004188:	2204      	movs	r2, #4
 800418a:	409a      	lsls	r2, r3
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004194:	f043 0204 	orr.w	r2, r3, #4
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a0:	2210      	movs	r2, #16
 80041a2:	409a      	lsls	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d043      	beq.n	8004234 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d03c      	beq.n	8004234 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041be:	2210      	movs	r2, #16
 80041c0:	409a      	lsls	r2, r3
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d018      	beq.n	8004206 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d108      	bne.n	80041f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d024      	beq.n	8004234 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	4798      	blx	r3
 80041f2:	e01f      	b.n	8004234 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01b      	beq.n	8004234 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	4798      	blx	r3
 8004204:	e016      	b.n	8004234 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004210:	2b00      	cmp	r3, #0
 8004212:	d107      	bne.n	8004224 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0208 	bic.w	r2, r2, #8
 8004222:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004238:	2220      	movs	r2, #32
 800423a:	409a      	lsls	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4013      	ands	r3, r2
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 808f 	beq.w	8004364 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0310 	and.w	r3, r3, #16
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 8087 	beq.w	8004364 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425a:	2220      	movs	r2, #32
 800425c:	409a      	lsls	r2, r3
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b05      	cmp	r3, #5
 800426c:	d136      	bne.n	80042dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0216 	bic.w	r2, r2, #22
 800427c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695a      	ldr	r2, [r3, #20]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800428c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d103      	bne.n	800429e <HAL_DMA_IRQHandler+0x1da>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800429a:	2b00      	cmp	r3, #0
 800429c:	d007      	beq.n	80042ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0208 	bic.w	r2, r2, #8
 80042ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b2:	223f      	movs	r2, #63	@ 0x3f
 80042b4:	409a      	lsls	r2, r3
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d07e      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	4798      	blx	r3
        }
        return;
 80042da:	e079      	b.n	80043d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d01d      	beq.n	8004326 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10d      	bne.n	8004314 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d031      	beq.n	8004364 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	4798      	blx	r3
 8004308:	e02c      	b.n	8004364 <HAL_DMA_IRQHandler+0x2a0>
 800430a:	bf00      	nop
 800430c:	2000000c 	.word	0x2000000c
 8004310:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004318:	2b00      	cmp	r3, #0
 800431a:	d023      	beq.n	8004364 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	4798      	blx	r3
 8004324:	e01e      	b.n	8004364 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10f      	bne.n	8004354 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0210 	bic.w	r2, r2, #16
 8004342:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004368:	2b00      	cmp	r3, #0
 800436a:	d032      	beq.n	80043d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d022      	beq.n	80043be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2205      	movs	r2, #5
 800437c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	3301      	adds	r3, #1
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	429a      	cmp	r2, r3
 800439a:	d307      	bcc.n	80043ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f2      	bne.n	8004390 <HAL_DMA_IRQHandler+0x2cc>
 80043aa:	e000      	b.n	80043ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80043ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d005      	beq.n	80043d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	4798      	blx	r3
 80043ce:	e000      	b.n	80043d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80043d0:	bf00      	nop
    }
  }
}
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80043f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b40      	cmp	r3, #64	@ 0x40
 8004404:	d108      	bne.n	8004418 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004416:	e007      	b.n	8004428 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	60da      	str	r2, [r3, #12]
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	3b10      	subs	r3, #16
 8004444:	4a14      	ldr	r2, [pc, #80]	@ (8004498 <DMA_CalcBaseAndBitshift+0x64>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	091b      	lsrs	r3, r3, #4
 800444c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800444e:	4a13      	ldr	r2, [pc, #76]	@ (800449c <DMA_CalcBaseAndBitshift+0x68>)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4413      	add	r3, r2
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b03      	cmp	r3, #3
 8004460:	d909      	bls.n	8004476 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800446a:	f023 0303 	bic.w	r3, r3, #3
 800446e:	1d1a      	adds	r2, r3, #4
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	659a      	str	r2, [r3, #88]	@ 0x58
 8004474:	e007      	b.n	8004486 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800447e:	f023 0303 	bic.w	r3, r3, #3
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	aaaaaaab 	.word	0xaaaaaaab
 800449c:	0800ae2c 	.word	0x0800ae2c

080044a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d11f      	bne.n	80044fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d856      	bhi.n	800456e <DMA_CheckFifoParam+0xce>
 80044c0:	a201      	add	r2, pc, #4	@ (adr r2, 80044c8 <DMA_CheckFifoParam+0x28>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	080044d9 	.word	0x080044d9
 80044cc:	080044eb 	.word	0x080044eb
 80044d0:	080044d9 	.word	0x080044d9
 80044d4:	0800456f 	.word	0x0800456f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d046      	beq.n	8004572 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044e8:	e043      	b.n	8004572 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80044f2:	d140      	bne.n	8004576 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044f8:	e03d      	b.n	8004576 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004502:	d121      	bne.n	8004548 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b03      	cmp	r3, #3
 8004508:	d837      	bhi.n	800457a <DMA_CheckFifoParam+0xda>
 800450a:	a201      	add	r2, pc, #4	@ (adr r2, 8004510 <DMA_CheckFifoParam+0x70>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	08004521 	.word	0x08004521
 8004514:	08004527 	.word	0x08004527
 8004518:	08004521 	.word	0x08004521
 800451c:	08004539 	.word	0x08004539
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	73fb      	strb	r3, [r7, #15]
      break;
 8004524:	e030      	b.n	8004588 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d025      	beq.n	800457e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004536:	e022      	b.n	800457e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004540:	d11f      	bne.n	8004582 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004546:	e01c      	b.n	8004582 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d903      	bls.n	8004556 <DMA_CheckFifoParam+0xb6>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b03      	cmp	r3, #3
 8004552:	d003      	beq.n	800455c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004554:	e018      	b.n	8004588 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	73fb      	strb	r3, [r7, #15]
      break;
 800455a:	e015      	b.n	8004588 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004560:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00e      	beq.n	8004586 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	73fb      	strb	r3, [r7, #15]
      break;
 800456c:	e00b      	b.n	8004586 <DMA_CheckFifoParam+0xe6>
      break;
 800456e:	bf00      	nop
 8004570:	e00a      	b.n	8004588 <DMA_CheckFifoParam+0xe8>
      break;
 8004572:	bf00      	nop
 8004574:	e008      	b.n	8004588 <DMA_CheckFifoParam+0xe8>
      break;
 8004576:	bf00      	nop
 8004578:	e006      	b.n	8004588 <DMA_CheckFifoParam+0xe8>
      break;
 800457a:	bf00      	nop
 800457c:	e004      	b.n	8004588 <DMA_CheckFifoParam+0xe8>
      break;
 800457e:	bf00      	nop
 8004580:	e002      	b.n	8004588 <DMA_CheckFifoParam+0xe8>
      break;   
 8004582:	bf00      	nop
 8004584:	e000      	b.n	8004588 <DMA_CheckFifoParam+0xe8>
      break;
 8004586:	bf00      	nop
    }
  } 
  
  return status; 
 8004588:	7bfb      	ldrb	r3, [r7, #15]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop

08004598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004598:	b480      	push	{r7}
 800459a:	b089      	sub	sp, #36	@ 0x24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ae:	2300      	movs	r3, #0
 80045b0:	61fb      	str	r3, [r7, #28]
 80045b2:	e153      	b.n	800485c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045b4:	2201      	movs	r2, #1
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4013      	ands	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	f040 8142 	bne.w	8004856 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d005      	beq.n	80045ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d130      	bne.n	800464c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	2203      	movs	r2, #3
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	43db      	mvns	r3, r3
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	4013      	ands	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4313      	orrs	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004620:	2201      	movs	r2, #1
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4013      	ands	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	091b      	lsrs	r3, r3, #4
 8004636:	f003 0201 	and.w	r2, r3, #1
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4313      	orrs	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	2b03      	cmp	r3, #3
 8004656:	d017      	beq.n	8004688 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	2203      	movs	r2, #3
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	43db      	mvns	r3, r3
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4013      	ands	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d123      	bne.n	80046dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	08da      	lsrs	r2, r3, #3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3208      	adds	r2, #8
 800469c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	220f      	movs	r2, #15
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	08da      	lsrs	r2, r3, #3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3208      	adds	r2, #8
 80046d6:	69b9      	ldr	r1, [r7, #24]
 80046d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	2203      	movs	r2, #3
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 0203 	and.w	r2, r3, #3
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4313      	orrs	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 809c 	beq.w	8004856 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	4b54      	ldr	r3, [pc, #336]	@ (8004874 <HAL_GPIO_Init+0x2dc>)
 8004724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004726:	4a53      	ldr	r2, [pc, #332]	@ (8004874 <HAL_GPIO_Init+0x2dc>)
 8004728:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800472c:	6453      	str	r3, [r2, #68]	@ 0x44
 800472e:	4b51      	ldr	r3, [pc, #324]	@ (8004874 <HAL_GPIO_Init+0x2dc>)
 8004730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800473a:	4a4f      	ldr	r2, [pc, #316]	@ (8004878 <HAL_GPIO_Init+0x2e0>)
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	089b      	lsrs	r3, r3, #2
 8004740:	3302      	adds	r3, #2
 8004742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	220f      	movs	r2, #15
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	43db      	mvns	r3, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4013      	ands	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a46      	ldr	r2, [pc, #280]	@ (800487c <HAL_GPIO_Init+0x2e4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <HAL_GPIO_Init+0x1f6>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a45      	ldr	r2, [pc, #276]	@ (8004880 <HAL_GPIO_Init+0x2e8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00d      	beq.n	800478a <HAL_GPIO_Init+0x1f2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a44      	ldr	r2, [pc, #272]	@ (8004884 <HAL_GPIO_Init+0x2ec>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d007      	beq.n	8004786 <HAL_GPIO_Init+0x1ee>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a43      	ldr	r2, [pc, #268]	@ (8004888 <HAL_GPIO_Init+0x2f0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d101      	bne.n	8004782 <HAL_GPIO_Init+0x1ea>
 800477e:	2303      	movs	r3, #3
 8004780:	e006      	b.n	8004790 <HAL_GPIO_Init+0x1f8>
 8004782:	2307      	movs	r3, #7
 8004784:	e004      	b.n	8004790 <HAL_GPIO_Init+0x1f8>
 8004786:	2302      	movs	r3, #2
 8004788:	e002      	b.n	8004790 <HAL_GPIO_Init+0x1f8>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <HAL_GPIO_Init+0x1f8>
 800478e:	2300      	movs	r3, #0
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	f002 0203 	and.w	r2, r2, #3
 8004796:	0092      	lsls	r2, r2, #2
 8004798:	4093      	lsls	r3, r2
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4313      	orrs	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047a0:	4935      	ldr	r1, [pc, #212]	@ (8004878 <HAL_GPIO_Init+0x2e0>)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	089b      	lsrs	r3, r3, #2
 80047a6:	3302      	adds	r3, #2
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047ae:	4b37      	ldr	r3, [pc, #220]	@ (800488c <HAL_GPIO_Init+0x2f4>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	43db      	mvns	r3, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4013      	ands	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047d2:	4a2e      	ldr	r2, [pc, #184]	@ (800488c <HAL_GPIO_Init+0x2f4>)
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047d8:	4b2c      	ldr	r3, [pc, #176]	@ (800488c <HAL_GPIO_Init+0x2f4>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	43db      	mvns	r3, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4013      	ands	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047fc:	4a23      	ldr	r2, [pc, #140]	@ (800488c <HAL_GPIO_Init+0x2f4>)
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004802:	4b22      	ldr	r3, [pc, #136]	@ (800488c <HAL_GPIO_Init+0x2f4>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	43db      	mvns	r3, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4013      	ands	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004826:	4a19      	ldr	r2, [pc, #100]	@ (800488c <HAL_GPIO_Init+0x2f4>)
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800482c:	4b17      	ldr	r3, [pc, #92]	@ (800488c <HAL_GPIO_Init+0x2f4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	43db      	mvns	r3, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4013      	ands	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004850:	4a0e      	ldr	r2, [pc, #56]	@ (800488c <HAL_GPIO_Init+0x2f4>)
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	3301      	adds	r3, #1
 800485a:	61fb      	str	r3, [r7, #28]
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	2b0f      	cmp	r3, #15
 8004860:	f67f aea8 	bls.w	80045b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	3724      	adds	r7, #36	@ 0x24
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
 8004878:	40013800 	.word	0x40013800
 800487c:	40020000 	.word	0x40020000
 8004880:	40020400 	.word	0x40020400
 8004884:	40020800 	.word	0x40020800
 8004888:	40020c00 	.word	0x40020c00
 800488c:	40013c00 	.word	0x40013c00

08004890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	807b      	strh	r3, [r7, #2]
 800489c:	4613      	mov	r3, r2
 800489e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048a0:	787b      	ldrb	r3, [r7, #1]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048a6:	887a      	ldrh	r2, [r7, #2]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048ac:	e003      	b.n	80048b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048ae:	887b      	ldrh	r3, [r7, #2]
 80048b0:	041a      	lsls	r2, r3, #16
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	619a      	str	r2, [r3, #24]
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	460b      	mov	r3, r1
 80048cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048d4:	887a      	ldrh	r2, [r7, #2]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4013      	ands	r3, r2
 80048da:	041a      	lsls	r2, r3, #16
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	43d9      	mvns	r1, r3
 80048e0:	887b      	ldrh	r3, [r7, #2]
 80048e2:	400b      	ands	r3, r1
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	619a      	str	r2, [r3, #24]
}
 80048ea:	bf00      	nop
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b084      	sub	sp, #16
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e036      	b.n	8004976 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8004910:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f245 5255 	movw	r2, #21845	@ 0x5555
 800491a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6852      	ldr	r2, [r2, #4]
 8004924:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6892      	ldr	r2, [r2, #8]
 800492e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004930:	f7fe f886 	bl	8002a40 <HAL_GetTick>
 8004934:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004936:	e011      	b.n	800495c <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004938:	f7fe f882 	bl	8002a40 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	f641 0201 	movw	r2, #6145	@ 0x1801
 8004946:	4293      	cmp	r3, r2
 8004948:	d908      	bls.n	800495c <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0303 	and.w	r3, r3, #3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e00c      	b.n	8004976 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e6      	bne.n	8004938 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004972:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800498e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0cc      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049b4:	4b68      	ldr	r3, [pc, #416]	@ (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d90c      	bls.n	80049dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c2:	4b65      	ldr	r3, [pc, #404]	@ (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ca:	4b63      	ldr	r3, [pc, #396]	@ (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0b8      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d020      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049f4:	4b59      	ldr	r3, [pc, #356]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4a58      	ldr	r2, [pc, #352]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a0c:	4b53      	ldr	r3, [pc, #332]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	4a52      	ldr	r2, [pc, #328]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a18:	4b50      	ldr	r3, [pc, #320]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	494d      	ldr	r1, [pc, #308]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d044      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d107      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a3e:	4b47      	ldr	r3, [pc, #284]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d119      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e07f      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d003      	beq.n	8004a5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d107      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e06f      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e067      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a7e:	4b37      	ldr	r3, [pc, #220]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f023 0203 	bic.w	r2, r3, #3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	4934      	ldr	r1, [pc, #208]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a90:	f7fd ffd6 	bl	8002a40 <HAL_GetTick>
 8004a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a96:	e00a      	b.n	8004aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a98:	f7fd ffd2 	bl	8002a40 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e04f      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aae:	4b2b      	ldr	r3, [pc, #172]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 020c 	and.w	r2, r3, #12
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d1eb      	bne.n	8004a98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac0:	4b25      	ldr	r3, [pc, #148]	@ (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d20c      	bcs.n	8004ae8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ace:	4b22      	ldr	r3, [pc, #136]	@ (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad6:	4b20      	ldr	r3, [pc, #128]	@ (8004b58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d001      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e032      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004af4:	4b19      	ldr	r3, [pc, #100]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	4916      	ldr	r1, [pc, #88]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d009      	beq.n	8004b26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b12:	4b12      	ldr	r3, [pc, #72]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	490e      	ldr	r1, [pc, #56]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b26:	f000 f821 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	091b      	lsrs	r3, r3, #4
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	490a      	ldr	r1, [pc, #40]	@ (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 8004b38:	5ccb      	ldrb	r3, [r1, r3]
 8004b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3e:	4a09      	ldr	r2, [pc, #36]	@ (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b42:	4b09      	ldr	r3, [pc, #36]	@ (8004b68 <HAL_RCC_ClockConfig+0x1c8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fd ff36 	bl	80029b8 <HAL_InitTick>

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40023c00 	.word	0x40023c00
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	0800ae14 	.word	0x0800ae14
 8004b64:	2000000c 	.word	0x2000000c
 8004b68:	20000010 	.word	0x20000010

08004b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b70:	b094      	sub	sp, #80	@ 0x50
 8004b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b84:	4b79      	ldr	r3, [pc, #484]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 030c 	and.w	r3, r3, #12
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d00d      	beq.n	8004bac <HAL_RCC_GetSysClockFreq+0x40>
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	f200 80e1 	bhi.w	8004d58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d003      	beq.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b9e:	e0db      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ba0:	4b73      	ldr	r3, [pc, #460]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ba4:	e0db      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ba6:	4b73      	ldr	r3, [pc, #460]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004baa:	e0d8      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bac:	4b6f      	ldr	r3, [pc, #444]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d063      	beq.n	8004c8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	099b      	lsrs	r3, r3, #6
 8004bc8:	2200      	movs	r2, #0
 8004bca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bde:	4622      	mov	r2, r4
 8004be0:	462b      	mov	r3, r5
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f04f 0100 	mov.w	r1, #0
 8004bea:	0159      	lsls	r1, r3, #5
 8004bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bf0:	0150      	lsls	r0, r2, #5
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	1a51      	subs	r1, r2, r1
 8004bfa:	6139      	str	r1, [r7, #16]
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c10:	4659      	mov	r1, fp
 8004c12:	018b      	lsls	r3, r1, #6
 8004c14:	4651      	mov	r1, sl
 8004c16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c1a:	4651      	mov	r1, sl
 8004c1c:	018a      	lsls	r2, r1, #6
 8004c1e:	4651      	mov	r1, sl
 8004c20:	ebb2 0801 	subs.w	r8, r2, r1
 8004c24:	4659      	mov	r1, fp
 8004c26:	eb63 0901 	sbc.w	r9, r3, r1
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c3e:	4690      	mov	r8, r2
 8004c40:	4699      	mov	r9, r3
 8004c42:	4623      	mov	r3, r4
 8004c44:	eb18 0303 	adds.w	r3, r8, r3
 8004c48:	60bb      	str	r3, [r7, #8]
 8004c4a:	462b      	mov	r3, r5
 8004c4c:	eb49 0303 	adc.w	r3, r9, r3
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c5e:	4629      	mov	r1, r5
 8004c60:	024b      	lsls	r3, r1, #9
 8004c62:	4621      	mov	r1, r4
 8004c64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c68:	4621      	mov	r1, r4
 8004c6a:	024a      	lsls	r2, r1, #9
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	4619      	mov	r1, r3
 8004c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c72:	2200      	movs	r2, #0
 8004c74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c7c:	f7fc f824 	bl	8000cc8 <__aeabi_uldivmod>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4613      	mov	r3, r2
 8004c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c88:	e058      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c8a:	4b38      	ldr	r3, [pc, #224]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	099b      	lsrs	r3, r3, #6
 8004c90:	2200      	movs	r2, #0
 8004c92:	4618      	mov	r0, r3
 8004c94:	4611      	mov	r1, r2
 8004c96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c9a:	623b      	str	r3, [r7, #32]
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ca0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	464b      	mov	r3, r9
 8004ca8:	f04f 0000 	mov.w	r0, #0
 8004cac:	f04f 0100 	mov.w	r1, #0
 8004cb0:	0159      	lsls	r1, r3, #5
 8004cb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cb6:	0150      	lsls	r0, r2, #5
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4641      	mov	r1, r8
 8004cbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cdc:	ebb2 040a 	subs.w	r4, r2, sl
 8004ce0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	00eb      	lsls	r3, r5, #3
 8004cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cf2:	00e2      	lsls	r2, r4, #3
 8004cf4:	4614      	mov	r4, r2
 8004cf6:	461d      	mov	r5, r3
 8004cf8:	4643      	mov	r3, r8
 8004cfa:	18e3      	adds	r3, r4, r3
 8004cfc:	603b      	str	r3, [r7, #0]
 8004cfe:	464b      	mov	r3, r9
 8004d00:	eb45 0303 	adc.w	r3, r5, r3
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d12:	4629      	mov	r1, r5
 8004d14:	028b      	lsls	r3, r1, #10
 8004d16:	4621      	mov	r1, r4
 8004d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	028a      	lsls	r2, r1, #10
 8004d20:	4610      	mov	r0, r2
 8004d22:	4619      	mov	r1, r3
 8004d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d26:	2200      	movs	r2, #0
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	61fa      	str	r2, [r7, #28]
 8004d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d30:	f7fb ffca 	bl	8000cc8 <__aeabi_uldivmod>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4613      	mov	r3, r2
 8004d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	0c1b      	lsrs	r3, r3, #16
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	3301      	adds	r3, #1
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d56:	e002      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d58:	4b05      	ldr	r3, [pc, #20]	@ (8004d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3750      	adds	r7, #80	@ 0x50
 8004d64:	46bd      	mov	sp, r7
 8004d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	00f42400 	.word	0x00f42400
 8004d74:	007a1200 	.word	0x007a1200

08004d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d7c:	4b03      	ldr	r3, [pc, #12]	@ (8004d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	2000000c 	.word	0x2000000c

08004d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d94:	f7ff fff0 	bl	8004d78 <HAL_RCC_GetHCLKFreq>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	4b05      	ldr	r3, [pc, #20]	@ (8004db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	0a9b      	lsrs	r3, r3, #10
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	4903      	ldr	r1, [pc, #12]	@ (8004db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004da6:	5ccb      	ldrb	r3, [r1, r3]
 8004da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40023800 	.word	0x40023800
 8004db4:	0800ae24 	.word	0x0800ae24

08004db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dbc:	f7ff ffdc 	bl	8004d78 <HAL_RCC_GetHCLKFreq>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	0b5b      	lsrs	r3, r3, #13
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	4903      	ldr	r1, [pc, #12]	@ (8004ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dce:	5ccb      	ldrb	r3, [r1, r3]
 8004dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	0800ae24 	.word	0x0800ae24

08004de0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e273      	b.n	80052da <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d075      	beq.n	8004eea <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004dfe:	4b88      	ldr	r3, [pc, #544]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 030c 	and.w	r3, r3, #12
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d00c      	beq.n	8004e24 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e0a:	4b85      	ldr	r3, [pc, #532]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d112      	bne.n	8004e3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e16:	4b82      	ldr	r3, [pc, #520]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e22:	d10b      	bne.n	8004e3c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e24:	4b7e      	ldr	r3, [pc, #504]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d05b      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x108>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d157      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e24e      	b.n	80052da <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e44:	d106      	bne.n	8004e54 <HAL_RCC_OscConfig+0x74>
 8004e46:	4b76      	ldr	r3, [pc, #472]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a75      	ldr	r2, [pc, #468]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	e01d      	b.n	8004e90 <HAL_RCC_OscConfig+0xb0>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x98>
 8004e5e:	4b70      	ldr	r3, [pc, #448]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a6f      	ldr	r2, [pc, #444]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	4b6d      	ldr	r3, [pc, #436]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a6c      	ldr	r2, [pc, #432]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e00b      	b.n	8004e90 <HAL_RCC_OscConfig+0xb0>
 8004e78:	4b69      	ldr	r3, [pc, #420]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a68      	ldr	r2, [pc, #416]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	4b66      	ldr	r3, [pc, #408]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a65      	ldr	r2, [pc, #404]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d013      	beq.n	8004ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fd fdd2 	bl	8002a40 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ea0:	f7fd fdce 	bl	8002a40 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b64      	cmp	r3, #100	@ 0x64
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e213      	b.n	80052da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb2:	4b5b      	ldr	r3, [pc, #364]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0xc0>
 8004ebe:	e014      	b.n	8004eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fd fdbe 	bl	8002a40 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ec8:	f7fd fdba 	bl	8002a40 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	@ 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e1ff      	b.n	80052da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eda:	4b51      	ldr	r3, [pc, #324]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCC_OscConfig+0xe8>
 8004ee6:	e000      	b.n	8004eea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d063      	beq.n	8004fbe <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 030c 	and.w	r3, r3, #12
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00b      	beq.n	8004f1a <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f02:	4b47      	ldr	r3, [pc, #284]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 030c 	and.w	r3, r3, #12
        || \
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d11c      	bne.n	8004f48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f0e:	4b44      	ldr	r3, [pc, #272]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d116      	bne.n	8004f48 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f1a:	4b41      	ldr	r3, [pc, #260]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <HAL_RCC_OscConfig+0x152>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d001      	beq.n	8004f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e1d3      	b.n	80052da <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f32:	4b3b      	ldr	r3, [pc, #236]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	4937      	ldr	r1, [pc, #220]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f46:	e03a      	b.n	8004fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d020      	beq.n	8004f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f50:	4b34      	ldr	r3, [pc, #208]	@ (8005024 <HAL_RCC_OscConfig+0x244>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f56:	f7fd fd73 	bl	8002a40 <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f5e:	f7fd fd6f 	bl	8002a40 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e1b4      	b.n	80052da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f70:	4b2b      	ldr	r3, [pc, #172]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0f0      	beq.n	8004f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7c:	4b28      	ldr	r3, [pc, #160]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4925      	ldr	r1, [pc, #148]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	600b      	str	r3, [r1, #0]
 8004f90:	e015      	b.n	8004fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f92:	4b24      	ldr	r3, [pc, #144]	@ (8005024 <HAL_RCC_OscConfig+0x244>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f98:	f7fd fd52 	bl	8002a40 <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fa0:	f7fd fd4e 	bl	8002a40 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e193      	b.n	80052da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f0      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0308 	and.w	r3, r3, #8
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d036      	beq.n	8005038 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d016      	beq.n	8005000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fd2:	4b15      	ldr	r3, [pc, #84]	@ (8005028 <HAL_RCC_OscConfig+0x248>)
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd8:	f7fd fd32 	bl	8002a40 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fe0:	f7fd fd2e 	bl	8002a40 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e173      	b.n	80052da <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8005020 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f0      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x200>
 8004ffe:	e01b      	b.n	8005038 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005000:	4b09      	ldr	r3, [pc, #36]	@ (8005028 <HAL_RCC_OscConfig+0x248>)
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005006:	f7fd fd1b 	bl	8002a40 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800500c:	e00e      	b.n	800502c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800500e:	f7fd fd17 	bl	8002a40 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d907      	bls.n	800502c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e15c      	b.n	80052da <HAL_RCC_OscConfig+0x4fa>
 8005020:	40023800 	.word	0x40023800
 8005024:	42470000 	.word	0x42470000
 8005028:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800502c:	4b8a      	ldr	r3, [pc, #552]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 800502e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1ea      	bne.n	800500e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 8097 	beq.w	8005174 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005046:	2300      	movs	r3, #0
 8005048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800504a:	4b83      	ldr	r3, [pc, #524]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 800504c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10f      	bne.n	8005076 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005056:	2300      	movs	r3, #0
 8005058:	60bb      	str	r3, [r7, #8]
 800505a:	4b7f      	ldr	r3, [pc, #508]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505e:	4a7e      	ldr	r2, [pc, #504]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 8005060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005064:	6413      	str	r3, [r2, #64]	@ 0x40
 8005066:	4b7c      	ldr	r3, [pc, #496]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 8005068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800506e:	60bb      	str	r3, [r7, #8]
 8005070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005072:	2301      	movs	r3, #1
 8005074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005076:	4b79      	ldr	r3, [pc, #484]	@ (800525c <HAL_RCC_OscConfig+0x47c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800507e:	2b00      	cmp	r3, #0
 8005080:	d118      	bne.n	80050b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005082:	4b76      	ldr	r3, [pc, #472]	@ (800525c <HAL_RCC_OscConfig+0x47c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a75      	ldr	r2, [pc, #468]	@ (800525c <HAL_RCC_OscConfig+0x47c>)
 8005088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800508c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800508e:	f7fd fcd7 	bl	8002a40 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005096:	f7fd fcd3 	bl	8002a40 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e118      	b.n	80052da <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a8:	4b6c      	ldr	r3, [pc, #432]	@ (800525c <HAL_RCC_OscConfig+0x47c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f0      	beq.n	8005096 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d106      	bne.n	80050ca <HAL_RCC_OscConfig+0x2ea>
 80050bc:	4b66      	ldr	r3, [pc, #408]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 80050be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c0:	4a65      	ldr	r2, [pc, #404]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 80050c2:	f043 0301 	orr.w	r3, r3, #1
 80050c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80050c8:	e01c      	b.n	8005104 <HAL_RCC_OscConfig+0x324>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2b05      	cmp	r3, #5
 80050d0:	d10c      	bne.n	80050ec <HAL_RCC_OscConfig+0x30c>
 80050d2:	4b61      	ldr	r3, [pc, #388]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d6:	4a60      	ldr	r2, [pc, #384]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 80050d8:	f043 0304 	orr.w	r3, r3, #4
 80050dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80050de:	4b5e      	ldr	r3, [pc, #376]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 80050e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e2:	4a5d      	ldr	r2, [pc, #372]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 80050e4:	f043 0301 	orr.w	r3, r3, #1
 80050e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80050ea:	e00b      	b.n	8005104 <HAL_RCC_OscConfig+0x324>
 80050ec:	4b5a      	ldr	r3, [pc, #360]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 80050ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f0:	4a59      	ldr	r2, [pc, #356]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 80050f2:	f023 0301 	bic.w	r3, r3, #1
 80050f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80050f8:	4b57      	ldr	r3, [pc, #348]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 80050fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050fc:	4a56      	ldr	r2, [pc, #344]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 80050fe:	f023 0304 	bic.w	r3, r3, #4
 8005102:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d015      	beq.n	8005138 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800510c:	f7fd fc98 	bl	8002a40 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005112:	e00a      	b.n	800512a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005114:	f7fd fc94 	bl	8002a40 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005122:	4293      	cmp	r3, r2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e0d7      	b.n	80052da <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800512a:	4b4b      	ldr	r3, [pc, #300]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 800512c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0ee      	beq.n	8005114 <HAL_RCC_OscConfig+0x334>
 8005136:	e014      	b.n	8005162 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005138:	f7fd fc82 	bl	8002a40 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800513e:	e00a      	b.n	8005156 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005140:	f7fd fc7e 	bl	8002a40 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800514e:	4293      	cmp	r3, r2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e0c1      	b.n	80052da <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005156:	4b40      	ldr	r3, [pc, #256]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 8005158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1ee      	bne.n	8005140 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005162:	7dfb      	ldrb	r3, [r7, #23]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d105      	bne.n	8005174 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005168:	4b3b      	ldr	r3, [pc, #236]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 800516a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516c:	4a3a      	ldr	r2, [pc, #232]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 800516e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005172:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 80ad 	beq.w	80052d8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800517e:	4b36      	ldr	r3, [pc, #216]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 030c 	and.w	r3, r3, #12
 8005186:	2b08      	cmp	r3, #8
 8005188:	d060      	beq.n	800524c <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	2b02      	cmp	r3, #2
 8005190:	d145      	bne.n	800521e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005192:	4b33      	ldr	r3, [pc, #204]	@ (8005260 <HAL_RCC_OscConfig+0x480>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fd fc52 	bl	8002a40 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a0:	f7fd fc4e 	bl	8002a40 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e093      	b.n	80052da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b2:	4b29      	ldr	r3, [pc, #164]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	69da      	ldr	r2, [r3, #28]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051cc:	019b      	lsls	r3, r3, #6
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d4:	085b      	lsrs	r3, r3, #1
 80051d6:	3b01      	subs	r3, #1
 80051d8:	041b      	lsls	r3, r3, #16
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e0:	061b      	lsls	r3, r3, #24
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e8:	071b      	lsls	r3, r3, #28
 80051ea:	491b      	ldr	r1, [pc, #108]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005260 <HAL_RCC_OscConfig+0x480>)
 80051f2:	2201      	movs	r2, #1
 80051f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f6:	f7fd fc23 	bl	8002a40 <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051fe:	f7fd fc1f 	bl	8002a40 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e064      	b.n	80052da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005210:	4b11      	ldr	r3, [pc, #68]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0f0      	beq.n	80051fe <HAL_RCC_OscConfig+0x41e>
 800521c:	e05c      	b.n	80052d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521e:	4b10      	ldr	r3, [pc, #64]	@ (8005260 <HAL_RCC_OscConfig+0x480>)
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005224:	f7fd fc0c 	bl	8002a40 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800522c:	f7fd fc08 	bl	8002a40 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e04d      	b.n	80052da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523e:	4b06      	ldr	r3, [pc, #24]	@ (8005258 <HAL_RCC_OscConfig+0x478>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1f0      	bne.n	800522c <HAL_RCC_OscConfig+0x44c>
 800524a:	e045      	b.n	80052d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d107      	bne.n	8005264 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e040      	b.n	80052da <HAL_RCC_OscConfig+0x4fa>
 8005258:	40023800 	.word	0x40023800
 800525c:	40007000 	.word	0x40007000
 8005260:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005264:	4b1f      	ldr	r3, [pc, #124]	@ (80052e4 <HAL_RCC_OscConfig+0x504>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d030      	beq.n	80052d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800527c:	429a      	cmp	r2, r3
 800527e:	d129      	bne.n	80052d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528a:	429a      	cmp	r2, r3
 800528c:	d122      	bne.n	80052d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005294:	4013      	ands	r3, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800529a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800529c:	4293      	cmp	r3, r2
 800529e:	d119      	bne.n	80052d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052aa:	085b      	lsrs	r3, r3, #1
 80052ac:	3b01      	subs	r3, #1
 80052ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d10f      	bne.n	80052d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d107      	bne.n	80052d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d001      	beq.n	80052d8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40023800 	.word	0x40023800

080052e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e041      	b.n	800537e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fd f8d8 	bl	80024c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3304      	adds	r3, #4
 8005324:	4619      	mov	r1, r3
 8005326:	4610      	mov	r0, r2
 8005328:	f000 fba6 	bl	8005a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e041      	b.n	800541c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f839 	bl	8005424 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2202      	movs	r2, #2
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3304      	adds	r3, #4
 80053c2:	4619      	mov	r1, r3
 80053c4:	4610      	mov	r0, r2
 80053c6:	f000 fb57 	bl	8005a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d104      	bne.n	8005456 <HAL_TIM_IC_Start_IT+0x1e>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005452:	b2db      	uxtb	r3, r3
 8005454:	e013      	b.n	800547e <HAL_TIM_IC_Start_IT+0x46>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b04      	cmp	r3, #4
 800545a:	d104      	bne.n	8005466 <HAL_TIM_IC_Start_IT+0x2e>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005462:	b2db      	uxtb	r3, r3
 8005464:	e00b      	b.n	800547e <HAL_TIM_IC_Start_IT+0x46>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b08      	cmp	r3, #8
 800546a:	d104      	bne.n	8005476 <HAL_TIM_IC_Start_IT+0x3e>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005472:	b2db      	uxtb	r3, r3
 8005474:	e003      	b.n	800547e <HAL_TIM_IC_Start_IT+0x46>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800547c:	b2db      	uxtb	r3, r3
 800547e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d104      	bne.n	8005490 <HAL_TIM_IC_Start_IT+0x58>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800548c:	b2db      	uxtb	r3, r3
 800548e:	e013      	b.n	80054b8 <HAL_TIM_IC_Start_IT+0x80>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b04      	cmp	r3, #4
 8005494:	d104      	bne.n	80054a0 <HAL_TIM_IC_Start_IT+0x68>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800549c:	b2db      	uxtb	r3, r3
 800549e:	e00b      	b.n	80054b8 <HAL_TIM_IC_Start_IT+0x80>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d104      	bne.n	80054b0 <HAL_TIM_IC_Start_IT+0x78>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	e003      	b.n	80054b8 <HAL_TIM_IC_Start_IT+0x80>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80054ba:	7bbb      	ldrb	r3, [r7, #14]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d102      	bne.n	80054c6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80054c0:	7b7b      	ldrb	r3, [r7, #13]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d001      	beq.n	80054ca <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e0cc      	b.n	8005664 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d104      	bne.n	80054da <HAL_TIM_IC_Start_IT+0xa2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054d8:	e013      	b.n	8005502 <HAL_TIM_IC_Start_IT+0xca>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d104      	bne.n	80054ea <HAL_TIM_IC_Start_IT+0xb2>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054e8:	e00b      	b.n	8005502 <HAL_TIM_IC_Start_IT+0xca>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d104      	bne.n	80054fa <HAL_TIM_IC_Start_IT+0xc2>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054f8:	e003      	b.n	8005502 <HAL_TIM_IC_Start_IT+0xca>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2202      	movs	r2, #2
 80054fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d104      	bne.n	8005512 <HAL_TIM_IC_Start_IT+0xda>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005510:	e013      	b.n	800553a <HAL_TIM_IC_Start_IT+0x102>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b04      	cmp	r3, #4
 8005516:	d104      	bne.n	8005522 <HAL_TIM_IC_Start_IT+0xea>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005520:	e00b      	b.n	800553a <HAL_TIM_IC_Start_IT+0x102>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b08      	cmp	r3, #8
 8005526:	d104      	bne.n	8005532 <HAL_TIM_IC_Start_IT+0xfa>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005530:	e003      	b.n	800553a <HAL_TIM_IC_Start_IT+0x102>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2202      	movs	r2, #2
 8005536:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b0c      	cmp	r3, #12
 800553e:	d841      	bhi.n	80055c4 <HAL_TIM_IC_Start_IT+0x18c>
 8005540:	a201      	add	r2, pc, #4	@ (adr r2, 8005548 <HAL_TIM_IC_Start_IT+0x110>)
 8005542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005546:	bf00      	nop
 8005548:	0800557d 	.word	0x0800557d
 800554c:	080055c5 	.word	0x080055c5
 8005550:	080055c5 	.word	0x080055c5
 8005554:	080055c5 	.word	0x080055c5
 8005558:	0800558f 	.word	0x0800558f
 800555c:	080055c5 	.word	0x080055c5
 8005560:	080055c5 	.word	0x080055c5
 8005564:	080055c5 	.word	0x080055c5
 8005568:	080055a1 	.word	0x080055a1
 800556c:	080055c5 	.word	0x080055c5
 8005570:	080055c5 	.word	0x080055c5
 8005574:	080055c5 	.word	0x080055c5
 8005578:	080055b3 	.word	0x080055b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0202 	orr.w	r2, r2, #2
 800558a:	60da      	str	r2, [r3, #12]
      break;
 800558c:	e01d      	b.n	80055ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f042 0204 	orr.w	r2, r2, #4
 800559c:	60da      	str	r2, [r3, #12]
      break;
 800559e:	e014      	b.n	80055ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0208 	orr.w	r2, r2, #8
 80055ae:	60da      	str	r2, [r3, #12]
      break;
 80055b0:	e00b      	b.n	80055ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0210 	orr.w	r2, r2, #16
 80055c0:	60da      	str	r2, [r3, #12]
      break;
 80055c2:	e002      	b.n	80055ca <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	73fb      	strb	r3, [r7, #15]
      break;
 80055c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d148      	bne.n	8005662 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2201      	movs	r2, #1
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 fc1d 	bl	8005e18 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a22      	ldr	r2, [pc, #136]	@ (800566c <HAL_TIM_IC_Start_IT+0x234>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d022      	beq.n	800562e <HAL_TIM_IC_Start_IT+0x1f6>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f0:	d01d      	beq.n	800562e <HAL_TIM_IC_Start_IT+0x1f6>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005670 <HAL_TIM_IC_Start_IT+0x238>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d018      	beq.n	800562e <HAL_TIM_IC_Start_IT+0x1f6>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a1c      	ldr	r2, [pc, #112]	@ (8005674 <HAL_TIM_IC_Start_IT+0x23c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d013      	beq.n	800562e <HAL_TIM_IC_Start_IT+0x1f6>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a1b      	ldr	r2, [pc, #108]	@ (8005678 <HAL_TIM_IC_Start_IT+0x240>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00e      	beq.n	800562e <HAL_TIM_IC_Start_IT+0x1f6>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a19      	ldr	r2, [pc, #100]	@ (800567c <HAL_TIM_IC_Start_IT+0x244>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d009      	beq.n	800562e <HAL_TIM_IC_Start_IT+0x1f6>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a18      	ldr	r2, [pc, #96]	@ (8005680 <HAL_TIM_IC_Start_IT+0x248>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d004      	beq.n	800562e <HAL_TIM_IC_Start_IT+0x1f6>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a16      	ldr	r2, [pc, #88]	@ (8005684 <HAL_TIM_IC_Start_IT+0x24c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d111      	bne.n	8005652 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b06      	cmp	r3, #6
 800563e:	d010      	beq.n	8005662 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005650:	e007      	b.n	8005662 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f042 0201 	orr.w	r2, r2, #1
 8005660:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005662:	7bfb      	ldrb	r3, [r7, #15]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40010000 	.word	0x40010000
 8005670:	40000400 	.word	0x40000400
 8005674:	40000800 	.word	0x40000800
 8005678:	40000c00 	.word	0x40000c00
 800567c:	40010400 	.word	0x40010400
 8005680:	40014000 	.word	0x40014000
 8005684:	40001800 	.word	0x40001800

08005688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d020      	beq.n	80056ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01b      	beq.n	80056ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f06f 0202 	mvn.w	r2, #2
 80056bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fc faf6 	bl	8001cc4 <HAL_TIM_IC_CaptureCallback>
 80056d8:	e005      	b.n	80056e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f9ae 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f9b5 	bl	8005a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f003 0304 	and.w	r3, r3, #4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d020      	beq.n	8005738 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01b      	beq.n	8005738 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0204 	mvn.w	r2, #4
 8005708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2202      	movs	r2, #2
 800570e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fc fad0 	bl	8001cc4 <HAL_TIM_IC_CaptureCallback>
 8005724:	e005      	b.n	8005732 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f988 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f98f 	bl	8005a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d020      	beq.n	8005784 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d01b      	beq.n	8005784 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0208 	mvn.w	r2, #8
 8005754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2204      	movs	r2, #4
 800575a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fc faaa 	bl	8001cc4 <HAL_TIM_IC_CaptureCallback>
 8005770:	e005      	b.n	800577e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f962 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f969 	bl	8005a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f003 0310 	and.w	r3, r3, #16
 800578a:	2b00      	cmp	r3, #0
 800578c:	d020      	beq.n	80057d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01b      	beq.n	80057d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0210 	mvn.w	r2, #16
 80057a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2208      	movs	r2, #8
 80057a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fc fa84 	bl	8001cc4 <HAL_TIM_IC_CaptureCallback>
 80057bc:	e005      	b.n	80057ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f93c 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f943 	bl	8005a50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00c      	beq.n	80057f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d007      	beq.n	80057f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f06f 0201 	mvn.w	r2, #1
 80057ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f91a 	bl	8005a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00c      	beq.n	8005818 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005804:	2b00      	cmp	r3, #0
 8005806:	d007      	beq.n	8005818 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fb2f 	bl	8005e76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00c      	beq.n	800583c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	d007      	beq.n	800583c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f914 	bl	8005a64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00c      	beq.n	8005860 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f003 0320 	and.w	r3, r3, #32
 800584c:	2b00      	cmp	r3, #0
 800584e:	d007      	beq.n	8005860 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0220 	mvn.w	r2, #32
 8005858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fb01 	bl	8005e62 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005860:	bf00      	nop
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800587e:	2b01      	cmp	r3, #1
 8005880:	d101      	bne.n	8005886 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005882:	2302      	movs	r3, #2
 8005884:	e088      	b.n	8005998 <HAL_TIM_IC_ConfigChannel+0x130>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d11b      	bne.n	80058cc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80058a4:	f000 f98e 	bl	8005bc4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 020c 	bic.w	r2, r2, #12
 80058b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6999      	ldr	r1, [r3, #24]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	619a      	str	r2, [r3, #24]
 80058ca:	e060      	b.n	800598e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d11c      	bne.n	800590c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80058e2:	f000 f9e3 	bl	8005cac <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699a      	ldr	r2, [r3, #24]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80058f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6999      	ldr	r1, [r3, #24]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	021a      	lsls	r2, r3, #8
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	619a      	str	r2, [r3, #24]
 800590a:	e040      	b.n	800598e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b08      	cmp	r3, #8
 8005910:	d11b      	bne.n	800594a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005922:	f000 fa00 	bl	8005d26 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69da      	ldr	r2, [r3, #28]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 020c 	bic.w	r2, r2, #12
 8005934:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	69d9      	ldr	r1, [r3, #28]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	61da      	str	r2, [r3, #28]
 8005948:	e021      	b.n	800598e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b0c      	cmp	r3, #12
 800594e:	d11c      	bne.n	800598a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005960:	f000 fa1d 	bl	8005d9e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	69da      	ldr	r2, [r3, #28]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005972:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	69d9      	ldr	r1, [r3, #28]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	021a      	lsls	r2, r3, #8
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	430a      	orrs	r2, r1
 8005986:	61da      	str	r2, [r3, #28]
 8005988:	e001      	b.n	800598e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005996:	7dfb      	ldrb	r3, [r7, #23]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b0c      	cmp	r3, #12
 80059b2:	d831      	bhi.n	8005a18 <HAL_TIM_ReadCapturedValue+0x78>
 80059b4:	a201      	add	r2, pc, #4	@ (adr r2, 80059bc <HAL_TIM_ReadCapturedValue+0x1c>)
 80059b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ba:	bf00      	nop
 80059bc:	080059f1 	.word	0x080059f1
 80059c0:	08005a19 	.word	0x08005a19
 80059c4:	08005a19 	.word	0x08005a19
 80059c8:	08005a19 	.word	0x08005a19
 80059cc:	080059fb 	.word	0x080059fb
 80059d0:	08005a19 	.word	0x08005a19
 80059d4:	08005a19 	.word	0x08005a19
 80059d8:	08005a19 	.word	0x08005a19
 80059dc:	08005a05 	.word	0x08005a05
 80059e0:	08005a19 	.word	0x08005a19
 80059e4:	08005a19 	.word	0x08005a19
 80059e8:	08005a19 	.word	0x08005a19
 80059ec:	08005a0f 	.word	0x08005a0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059f6:	60fb      	str	r3, [r7, #12]

      break;
 80059f8:	e00f      	b.n	8005a1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a00:	60fb      	str	r3, [r7, #12]

      break;
 8005a02:	e00a      	b.n	8005a1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a0a:	60fb      	str	r3, [r7, #12]

      break;
 8005a0c:	e005      	b.n	8005a1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a14:	60fb      	str	r3, [r7, #12]

      break;
 8005a16:	e000      	b.n	8005a1a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005a18:	bf00      	nop
  }

  return tmpreg;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a43      	ldr	r2, [pc, #268]	@ (8005b98 <TIM_Base_SetConfig+0x120>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d013      	beq.n	8005ab8 <TIM_Base_SetConfig+0x40>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a96:	d00f      	beq.n	8005ab8 <TIM_Base_SetConfig+0x40>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a40      	ldr	r2, [pc, #256]	@ (8005b9c <TIM_Base_SetConfig+0x124>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d00b      	beq.n	8005ab8 <TIM_Base_SetConfig+0x40>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a3f      	ldr	r2, [pc, #252]	@ (8005ba0 <TIM_Base_SetConfig+0x128>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d007      	beq.n	8005ab8 <TIM_Base_SetConfig+0x40>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a3e      	ldr	r2, [pc, #248]	@ (8005ba4 <TIM_Base_SetConfig+0x12c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d003      	beq.n	8005ab8 <TIM_Base_SetConfig+0x40>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a3d      	ldr	r2, [pc, #244]	@ (8005ba8 <TIM_Base_SetConfig+0x130>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d108      	bne.n	8005aca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a32      	ldr	r2, [pc, #200]	@ (8005b98 <TIM_Base_SetConfig+0x120>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d02b      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ad8:	d027      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a2f      	ldr	r2, [pc, #188]	@ (8005b9c <TIM_Base_SetConfig+0x124>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d023      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a2e      	ldr	r2, [pc, #184]	@ (8005ba0 <TIM_Base_SetConfig+0x128>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d01f      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a2d      	ldr	r2, [pc, #180]	@ (8005ba4 <TIM_Base_SetConfig+0x12c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d01b      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a2c      	ldr	r2, [pc, #176]	@ (8005ba8 <TIM_Base_SetConfig+0x130>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d017      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a2b      	ldr	r2, [pc, #172]	@ (8005bac <TIM_Base_SetConfig+0x134>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d013      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a2a      	ldr	r2, [pc, #168]	@ (8005bb0 <TIM_Base_SetConfig+0x138>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00f      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a29      	ldr	r2, [pc, #164]	@ (8005bb4 <TIM_Base_SetConfig+0x13c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00b      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a28      	ldr	r2, [pc, #160]	@ (8005bb8 <TIM_Base_SetConfig+0x140>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d007      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a27      	ldr	r2, [pc, #156]	@ (8005bbc <TIM_Base_SetConfig+0x144>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d003      	beq.n	8005b2a <TIM_Base_SetConfig+0xb2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a26      	ldr	r2, [pc, #152]	@ (8005bc0 <TIM_Base_SetConfig+0x148>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d108      	bne.n	8005b3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a0e      	ldr	r2, [pc, #56]	@ (8005b98 <TIM_Base_SetConfig+0x120>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d003      	beq.n	8005b6a <TIM_Base_SetConfig+0xf2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a10      	ldr	r2, [pc, #64]	@ (8005ba8 <TIM_Base_SetConfig+0x130>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d103      	bne.n	8005b72 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	691a      	ldr	r2, [r3, #16]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f043 0204 	orr.w	r2, r3, #4
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	601a      	str	r2, [r3, #0]
}
 8005b8a:	bf00      	nop
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40010000 	.word	0x40010000
 8005b9c:	40000400 	.word	0x40000400
 8005ba0:	40000800 	.word	0x40000800
 8005ba4:	40000c00 	.word	0x40000c00
 8005ba8:	40010400 	.word	0x40010400
 8005bac:	40014000 	.word	0x40014000
 8005bb0:	40014400 	.word	0x40014400
 8005bb4:	40014800 	.word	0x40014800
 8005bb8:	40001800 	.word	0x40001800
 8005bbc:	40001c00 	.word	0x40001c00
 8005bc0:	40002000 	.word	0x40002000

08005bc4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
 8005bd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	f023 0201 	bic.w	r2, r3, #1
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4a28      	ldr	r2, [pc, #160]	@ (8005c90 <TIM_TI1_SetConfig+0xcc>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d01b      	beq.n	8005c2a <TIM_TI1_SetConfig+0x66>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bf8:	d017      	beq.n	8005c2a <TIM_TI1_SetConfig+0x66>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4a25      	ldr	r2, [pc, #148]	@ (8005c94 <TIM_TI1_SetConfig+0xd0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d013      	beq.n	8005c2a <TIM_TI1_SetConfig+0x66>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4a24      	ldr	r2, [pc, #144]	@ (8005c98 <TIM_TI1_SetConfig+0xd4>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d00f      	beq.n	8005c2a <TIM_TI1_SetConfig+0x66>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4a23      	ldr	r2, [pc, #140]	@ (8005c9c <TIM_TI1_SetConfig+0xd8>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00b      	beq.n	8005c2a <TIM_TI1_SetConfig+0x66>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4a22      	ldr	r2, [pc, #136]	@ (8005ca0 <TIM_TI1_SetConfig+0xdc>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d007      	beq.n	8005c2a <TIM_TI1_SetConfig+0x66>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4a21      	ldr	r2, [pc, #132]	@ (8005ca4 <TIM_TI1_SetConfig+0xe0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d003      	beq.n	8005c2a <TIM_TI1_SetConfig+0x66>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4a20      	ldr	r2, [pc, #128]	@ (8005ca8 <TIM_TI1_SetConfig+0xe4>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d101      	bne.n	8005c2e <TIM_TI1_SetConfig+0x6a>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e000      	b.n	8005c30 <TIM_TI1_SetConfig+0x6c>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d008      	beq.n	8005c46 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f023 0303 	bic.w	r3, r3, #3
 8005c3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	e003      	b.n	8005c4e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f043 0301 	orr.w	r3, r3, #1
 8005c4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f023 030a 	bic.w	r3, r3, #10
 8005c68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f003 030a 	and.w	r3, r3, #10
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	621a      	str	r2, [r3, #32]
}
 8005c82:	bf00      	nop
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	40010000 	.word	0x40010000
 8005c94:	40000400 	.word	0x40000400
 8005c98:	40000800 	.word	0x40000800
 8005c9c:	40000c00 	.word	0x40000c00
 8005ca0:	40010400 	.word	0x40010400
 8005ca4:	40014000 	.word	0x40014000
 8005ca8:	40001800 	.word	0x40001800

08005cac <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	f023 0210 	bic.w	r2, r3, #16
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	021b      	lsls	r3, r3, #8
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	031b      	lsls	r3, r3, #12
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cfe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	621a      	str	r2, [r3, #32]
}
 8005d1a:	bf00      	nop
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b087      	sub	sp, #28
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	60f8      	str	r0, [r7, #12]
 8005d2e:	60b9      	str	r1, [r7, #8]
 8005d30:	607a      	str	r2, [r7, #4]
 8005d32:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f023 0303 	bic.w	r3, r3, #3
 8005d52:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d62:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005d76:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	021b      	lsls	r3, r3, #8
 8005d7c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	621a      	str	r2, [r3, #32]
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b087      	sub	sp, #28
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	607a      	str	r2, [r7, #4]
 8005daa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	021b      	lsls	r3, r3, #8
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ddc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	031b      	lsls	r3, r3, #12
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005df0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	031b      	lsls	r3, r3, #12
 8005df6:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	621a      	str	r2, [r3, #32]
}
 8005e0c:	bf00      	nop
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f003 031f 	and.w	r3, r3, #31
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a1a      	ldr	r2, [r3, #32]
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	401a      	ands	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a1a      	ldr	r2, [r3, #32]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f003 031f 	and.w	r3, r3, #31
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e50:	431a      	orrs	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	621a      	str	r2, [r3, #32]
}
 8005e56:	bf00      	nop
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e6a:	bf00      	nop
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b083      	sub	sp, #12
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e7e:	bf00      	nop
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e042      	b.n	8005f22 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7fc fb93 	bl	80025dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2224      	movs	r2, #36	@ 0x24
 8005eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ecc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f972 	bl	80061b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691a      	ldr	r2, [r3, #16]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ee2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	695a      	ldr	r2, [r3, #20]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ef2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f02:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2220      	movs	r2, #32
 8005f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b08a      	sub	sp, #40	@ 0x28
 8005f2e:	af02      	add	r7, sp, #8
 8005f30:	60f8      	str	r0, [r7, #12]
 8005f32:	60b9      	str	r1, [r7, #8]
 8005f34:	603b      	str	r3, [r7, #0]
 8005f36:	4613      	mov	r3, r2
 8005f38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b20      	cmp	r3, #32
 8005f48:	d175      	bne.n	8006036 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <HAL_UART_Transmit+0x2c>
 8005f50:	88fb      	ldrh	r3, [r7, #6]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e06e      	b.n	8006038 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2221      	movs	r2, #33	@ 0x21
 8005f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f68:	f7fc fd6a 	bl	8002a40 <HAL_GetTick>
 8005f6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	88fa      	ldrh	r2, [r7, #6]
 8005f72:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	88fa      	ldrh	r2, [r7, #6]
 8005f78:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f82:	d108      	bne.n	8005f96 <HAL_UART_Transmit+0x6c>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d104      	bne.n	8005f96 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	61bb      	str	r3, [r7, #24]
 8005f94:	e003      	b.n	8005f9e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f9e:	e02e      	b.n	8005ffe <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	2180      	movs	r1, #128	@ 0x80
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 f848 	bl	8006040 <UART_WaitOnFlagUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e03a      	b.n	8006038 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10b      	bne.n	8005fe0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fd6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	3302      	adds	r3, #2
 8005fdc:	61bb      	str	r3, [r7, #24]
 8005fde:	e007      	b.n	8005ff0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	781a      	ldrb	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	3301      	adds	r3, #1
 8005fee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006002:	b29b      	uxth	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1cb      	bne.n	8005fa0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	2200      	movs	r2, #0
 8006010:	2140      	movs	r1, #64	@ 0x40
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 f814 	bl	8006040 <UART_WaitOnFlagUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d005      	beq.n	800602a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2220      	movs	r2, #32
 8006022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e006      	b.n	8006038 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2220      	movs	r2, #32
 800602e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	e000      	b.n	8006038 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006036:	2302      	movs	r3, #2
  }
}
 8006038:	4618      	mov	r0, r3
 800603a:	3720      	adds	r7, #32
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	4613      	mov	r3, r2
 800604e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006050:	e03b      	b.n	80060ca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006058:	d037      	beq.n	80060ca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800605a:	f7fc fcf1 	bl	8002a40 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	6a3a      	ldr	r2, [r7, #32]
 8006066:	429a      	cmp	r2, r3
 8006068:	d302      	bcc.n	8006070 <UART_WaitOnFlagUntilTimeout+0x30>
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e03a      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	2b00      	cmp	r3, #0
 8006080:	d023      	beq.n	80060ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2b80      	cmp	r3, #128	@ 0x80
 8006086:	d020      	beq.n	80060ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2b40      	cmp	r3, #64	@ 0x40
 800608c:	d01d      	beq.n	80060ca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b08      	cmp	r3, #8
 800609a:	d116      	bne.n	80060ca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800609c:	2300      	movs	r3, #0
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 f81d 	bl	80060f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2208      	movs	r2, #8
 80060bc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e00f      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4013      	ands	r3, r2
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	bf0c      	ite	eq
 80060da:	2301      	moveq	r3, #1
 80060dc:	2300      	movne	r3, #0
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d0b4      	beq.n	8006052 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b095      	sub	sp, #84	@ 0x54
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	330c      	adds	r3, #12
 8006100:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006104:	e853 3f00 	ldrex	r3, [r3]
 8006108:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800610a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006110:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	330c      	adds	r3, #12
 8006118:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800611a:	643a      	str	r2, [r7, #64]	@ 0x40
 800611c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006120:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006122:	e841 2300 	strex	r3, r2, [r1]
 8006126:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1e5      	bne.n	80060fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3314      	adds	r3, #20
 8006134:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	e853 3f00 	ldrex	r3, [r3]
 800613c:	61fb      	str	r3, [r7, #28]
   return(result);
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	f023 0301 	bic.w	r3, r3, #1
 8006144:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3314      	adds	r3, #20
 800614c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800614e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006150:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006154:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800615c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e5      	bne.n	800612e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006166:	2b01      	cmp	r3, #1
 8006168:	d119      	bne.n	800619e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	330c      	adds	r3, #12
 8006170:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	e853 3f00 	ldrex	r3, [r3]
 8006178:	60bb      	str	r3, [r7, #8]
   return(result);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f023 0310 	bic.w	r3, r3, #16
 8006180:	647b      	str	r3, [r7, #68]	@ 0x44
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	330c      	adds	r3, #12
 8006188:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800618a:	61ba      	str	r2, [r7, #24]
 800618c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	6979      	ldr	r1, [r7, #20]
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	613b      	str	r3, [r7, #16]
   return(result);
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1e5      	bne.n	800616a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80061ac:	bf00      	nop
 80061ae:	3754      	adds	r7, #84	@ 0x54
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061bc:	b0c0      	sub	sp, #256	@ 0x100
 80061be:	af00      	add	r7, sp, #0
 80061c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80061d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d4:	68d9      	ldr	r1, [r3, #12]
 80061d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	ea40 0301 	orr.w	r3, r0, r1
 80061e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	431a      	orrs	r2, r3
 80061f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	431a      	orrs	r2, r3
 80061f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	4313      	orrs	r3, r2
 8006200:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006210:	f021 010c 	bic.w	r1, r1, #12
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800621e:	430b      	orrs	r3, r1
 8006220:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800622e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006232:	6999      	ldr	r1, [r3, #24]
 8006234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	ea40 0301 	orr.w	r3, r0, r1
 800623e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	4b8f      	ldr	r3, [pc, #572]	@ (8006484 <UART_SetConfig+0x2cc>)
 8006248:	429a      	cmp	r2, r3
 800624a:	d005      	beq.n	8006258 <UART_SetConfig+0xa0>
 800624c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	4b8d      	ldr	r3, [pc, #564]	@ (8006488 <UART_SetConfig+0x2d0>)
 8006254:	429a      	cmp	r2, r3
 8006256:	d104      	bne.n	8006262 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006258:	f7fe fdae 	bl	8004db8 <HAL_RCC_GetPCLK2Freq>
 800625c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006260:	e003      	b.n	800626a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006262:	f7fe fd95 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 8006266:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800626a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006274:	f040 810c 	bne.w	8006490 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800627c:	2200      	movs	r2, #0
 800627e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006282:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006286:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800628a:	4622      	mov	r2, r4
 800628c:	462b      	mov	r3, r5
 800628e:	1891      	adds	r1, r2, r2
 8006290:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006292:	415b      	adcs	r3, r3
 8006294:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006296:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800629a:	4621      	mov	r1, r4
 800629c:	eb12 0801 	adds.w	r8, r2, r1
 80062a0:	4629      	mov	r1, r5
 80062a2:	eb43 0901 	adc.w	r9, r3, r1
 80062a6:	f04f 0200 	mov.w	r2, #0
 80062aa:	f04f 0300 	mov.w	r3, #0
 80062ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062ba:	4690      	mov	r8, r2
 80062bc:	4699      	mov	r9, r3
 80062be:	4623      	mov	r3, r4
 80062c0:	eb18 0303 	adds.w	r3, r8, r3
 80062c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062c8:	462b      	mov	r3, r5
 80062ca:	eb49 0303 	adc.w	r3, r9, r3
 80062ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80062de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80062e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80062e6:	460b      	mov	r3, r1
 80062e8:	18db      	adds	r3, r3, r3
 80062ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80062ec:	4613      	mov	r3, r2
 80062ee:	eb42 0303 	adc.w	r3, r2, r3
 80062f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80062f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80062f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80062fc:	f7fa fce4 	bl	8000cc8 <__aeabi_uldivmod>
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	4b61      	ldr	r3, [pc, #388]	@ (800648c <UART_SetConfig+0x2d4>)
 8006306:	fba3 2302 	umull	r2, r3, r3, r2
 800630a:	095b      	lsrs	r3, r3, #5
 800630c:	011c      	lsls	r4, r3, #4
 800630e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006312:	2200      	movs	r2, #0
 8006314:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006318:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800631c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006320:	4642      	mov	r2, r8
 8006322:	464b      	mov	r3, r9
 8006324:	1891      	adds	r1, r2, r2
 8006326:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006328:	415b      	adcs	r3, r3
 800632a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800632c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006330:	4641      	mov	r1, r8
 8006332:	eb12 0a01 	adds.w	sl, r2, r1
 8006336:	4649      	mov	r1, r9
 8006338:	eb43 0b01 	adc.w	fp, r3, r1
 800633c:	f04f 0200 	mov.w	r2, #0
 8006340:	f04f 0300 	mov.w	r3, #0
 8006344:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006348:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800634c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006350:	4692      	mov	sl, r2
 8006352:	469b      	mov	fp, r3
 8006354:	4643      	mov	r3, r8
 8006356:	eb1a 0303 	adds.w	r3, sl, r3
 800635a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800635e:	464b      	mov	r3, r9
 8006360:	eb4b 0303 	adc.w	r3, fp, r3
 8006364:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006374:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006378:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800637c:	460b      	mov	r3, r1
 800637e:	18db      	adds	r3, r3, r3
 8006380:	643b      	str	r3, [r7, #64]	@ 0x40
 8006382:	4613      	mov	r3, r2
 8006384:	eb42 0303 	adc.w	r3, r2, r3
 8006388:	647b      	str	r3, [r7, #68]	@ 0x44
 800638a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800638e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006392:	f7fa fc99 	bl	8000cc8 <__aeabi_uldivmod>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	4611      	mov	r1, r2
 800639c:	4b3b      	ldr	r3, [pc, #236]	@ (800648c <UART_SetConfig+0x2d4>)
 800639e:	fba3 2301 	umull	r2, r3, r3, r1
 80063a2:	095b      	lsrs	r3, r3, #5
 80063a4:	2264      	movs	r2, #100	@ 0x64
 80063a6:	fb02 f303 	mul.w	r3, r2, r3
 80063aa:	1acb      	subs	r3, r1, r3
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80063b2:	4b36      	ldr	r3, [pc, #216]	@ (800648c <UART_SetConfig+0x2d4>)
 80063b4:	fba3 2302 	umull	r2, r3, r3, r2
 80063b8:	095b      	lsrs	r3, r3, #5
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80063c0:	441c      	add	r4, r3
 80063c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80063d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80063d4:	4642      	mov	r2, r8
 80063d6:	464b      	mov	r3, r9
 80063d8:	1891      	adds	r1, r2, r2
 80063da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80063dc:	415b      	adcs	r3, r3
 80063de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80063e4:	4641      	mov	r1, r8
 80063e6:	1851      	adds	r1, r2, r1
 80063e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80063ea:	4649      	mov	r1, r9
 80063ec:	414b      	adcs	r3, r1
 80063ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80063f0:	f04f 0200 	mov.w	r2, #0
 80063f4:	f04f 0300 	mov.w	r3, #0
 80063f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80063fc:	4659      	mov	r1, fp
 80063fe:	00cb      	lsls	r3, r1, #3
 8006400:	4651      	mov	r1, sl
 8006402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006406:	4651      	mov	r1, sl
 8006408:	00ca      	lsls	r2, r1, #3
 800640a:	4610      	mov	r0, r2
 800640c:	4619      	mov	r1, r3
 800640e:	4603      	mov	r3, r0
 8006410:	4642      	mov	r2, r8
 8006412:	189b      	adds	r3, r3, r2
 8006414:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006418:	464b      	mov	r3, r9
 800641a:	460a      	mov	r2, r1
 800641c:	eb42 0303 	adc.w	r3, r2, r3
 8006420:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006430:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006434:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006438:	460b      	mov	r3, r1
 800643a:	18db      	adds	r3, r3, r3
 800643c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800643e:	4613      	mov	r3, r2
 8006440:	eb42 0303 	adc.w	r3, r2, r3
 8006444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006446:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800644a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800644e:	f7fa fc3b 	bl	8000cc8 <__aeabi_uldivmod>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	4b0d      	ldr	r3, [pc, #52]	@ (800648c <UART_SetConfig+0x2d4>)
 8006458:	fba3 1302 	umull	r1, r3, r3, r2
 800645c:	095b      	lsrs	r3, r3, #5
 800645e:	2164      	movs	r1, #100	@ 0x64
 8006460:	fb01 f303 	mul.w	r3, r1, r3
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	00db      	lsls	r3, r3, #3
 8006468:	3332      	adds	r3, #50	@ 0x32
 800646a:	4a08      	ldr	r2, [pc, #32]	@ (800648c <UART_SetConfig+0x2d4>)
 800646c:	fba2 2303 	umull	r2, r3, r2, r3
 8006470:	095b      	lsrs	r3, r3, #5
 8006472:	f003 0207 	and.w	r2, r3, #7
 8006476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4422      	add	r2, r4
 800647e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006480:	e106      	b.n	8006690 <UART_SetConfig+0x4d8>
 8006482:	bf00      	nop
 8006484:	40011000 	.word	0x40011000
 8006488:	40011400 	.word	0x40011400
 800648c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006490:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006494:	2200      	movs	r2, #0
 8006496:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800649a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800649e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80064a2:	4642      	mov	r2, r8
 80064a4:	464b      	mov	r3, r9
 80064a6:	1891      	adds	r1, r2, r2
 80064a8:	6239      	str	r1, [r7, #32]
 80064aa:	415b      	adcs	r3, r3
 80064ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80064ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064b2:	4641      	mov	r1, r8
 80064b4:	1854      	adds	r4, r2, r1
 80064b6:	4649      	mov	r1, r9
 80064b8:	eb43 0501 	adc.w	r5, r3, r1
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	f04f 0300 	mov.w	r3, #0
 80064c4:	00eb      	lsls	r3, r5, #3
 80064c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064ca:	00e2      	lsls	r2, r4, #3
 80064cc:	4614      	mov	r4, r2
 80064ce:	461d      	mov	r5, r3
 80064d0:	4643      	mov	r3, r8
 80064d2:	18e3      	adds	r3, r4, r3
 80064d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80064d8:	464b      	mov	r3, r9
 80064da:	eb45 0303 	adc.w	r3, r5, r3
 80064de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80064e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064f2:	f04f 0200 	mov.w	r2, #0
 80064f6:	f04f 0300 	mov.w	r3, #0
 80064fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80064fe:	4629      	mov	r1, r5
 8006500:	008b      	lsls	r3, r1, #2
 8006502:	4621      	mov	r1, r4
 8006504:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006508:	4621      	mov	r1, r4
 800650a:	008a      	lsls	r2, r1, #2
 800650c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006510:	f7fa fbda 	bl	8000cc8 <__aeabi_uldivmod>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4b60      	ldr	r3, [pc, #384]	@ (800669c <UART_SetConfig+0x4e4>)
 800651a:	fba3 2302 	umull	r2, r3, r3, r2
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	011c      	lsls	r4, r3, #4
 8006522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006526:	2200      	movs	r2, #0
 8006528:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800652c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006530:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006534:	4642      	mov	r2, r8
 8006536:	464b      	mov	r3, r9
 8006538:	1891      	adds	r1, r2, r2
 800653a:	61b9      	str	r1, [r7, #24]
 800653c:	415b      	adcs	r3, r3
 800653e:	61fb      	str	r3, [r7, #28]
 8006540:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006544:	4641      	mov	r1, r8
 8006546:	1851      	adds	r1, r2, r1
 8006548:	6139      	str	r1, [r7, #16]
 800654a:	4649      	mov	r1, r9
 800654c:	414b      	adcs	r3, r1
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800655c:	4659      	mov	r1, fp
 800655e:	00cb      	lsls	r3, r1, #3
 8006560:	4651      	mov	r1, sl
 8006562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006566:	4651      	mov	r1, sl
 8006568:	00ca      	lsls	r2, r1, #3
 800656a:	4610      	mov	r0, r2
 800656c:	4619      	mov	r1, r3
 800656e:	4603      	mov	r3, r0
 8006570:	4642      	mov	r2, r8
 8006572:	189b      	adds	r3, r3, r2
 8006574:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006578:	464b      	mov	r3, r9
 800657a:	460a      	mov	r2, r1
 800657c:	eb42 0303 	adc.w	r3, r2, r3
 8006580:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800658e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006590:	f04f 0200 	mov.w	r2, #0
 8006594:	f04f 0300 	mov.w	r3, #0
 8006598:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800659c:	4649      	mov	r1, r9
 800659e:	008b      	lsls	r3, r1, #2
 80065a0:	4641      	mov	r1, r8
 80065a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065a6:	4641      	mov	r1, r8
 80065a8:	008a      	lsls	r2, r1, #2
 80065aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80065ae:	f7fa fb8b 	bl	8000cc8 <__aeabi_uldivmod>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4611      	mov	r1, r2
 80065b8:	4b38      	ldr	r3, [pc, #224]	@ (800669c <UART_SetConfig+0x4e4>)
 80065ba:	fba3 2301 	umull	r2, r3, r3, r1
 80065be:	095b      	lsrs	r3, r3, #5
 80065c0:	2264      	movs	r2, #100	@ 0x64
 80065c2:	fb02 f303 	mul.w	r3, r2, r3
 80065c6:	1acb      	subs	r3, r1, r3
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	3332      	adds	r3, #50	@ 0x32
 80065cc:	4a33      	ldr	r2, [pc, #204]	@ (800669c <UART_SetConfig+0x4e4>)
 80065ce:	fba2 2303 	umull	r2, r3, r2, r3
 80065d2:	095b      	lsrs	r3, r3, #5
 80065d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065d8:	441c      	add	r4, r3
 80065da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065de:	2200      	movs	r2, #0
 80065e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80065e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80065e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80065e8:	4642      	mov	r2, r8
 80065ea:	464b      	mov	r3, r9
 80065ec:	1891      	adds	r1, r2, r2
 80065ee:	60b9      	str	r1, [r7, #8]
 80065f0:	415b      	adcs	r3, r3
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065f8:	4641      	mov	r1, r8
 80065fa:	1851      	adds	r1, r2, r1
 80065fc:	6039      	str	r1, [r7, #0]
 80065fe:	4649      	mov	r1, r9
 8006600:	414b      	adcs	r3, r1
 8006602:	607b      	str	r3, [r7, #4]
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006610:	4659      	mov	r1, fp
 8006612:	00cb      	lsls	r3, r1, #3
 8006614:	4651      	mov	r1, sl
 8006616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800661a:	4651      	mov	r1, sl
 800661c:	00ca      	lsls	r2, r1, #3
 800661e:	4610      	mov	r0, r2
 8006620:	4619      	mov	r1, r3
 8006622:	4603      	mov	r3, r0
 8006624:	4642      	mov	r2, r8
 8006626:	189b      	adds	r3, r3, r2
 8006628:	66bb      	str	r3, [r7, #104]	@ 0x68
 800662a:	464b      	mov	r3, r9
 800662c:	460a      	mov	r2, r1
 800662e:	eb42 0303 	adc.w	r3, r2, r3
 8006632:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	663b      	str	r3, [r7, #96]	@ 0x60
 800663e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006640:	f04f 0200 	mov.w	r2, #0
 8006644:	f04f 0300 	mov.w	r3, #0
 8006648:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800664c:	4649      	mov	r1, r9
 800664e:	008b      	lsls	r3, r1, #2
 8006650:	4641      	mov	r1, r8
 8006652:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006656:	4641      	mov	r1, r8
 8006658:	008a      	lsls	r2, r1, #2
 800665a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800665e:	f7fa fb33 	bl	8000cc8 <__aeabi_uldivmod>
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	4b0d      	ldr	r3, [pc, #52]	@ (800669c <UART_SetConfig+0x4e4>)
 8006668:	fba3 1302 	umull	r1, r3, r3, r2
 800666c:	095b      	lsrs	r3, r3, #5
 800666e:	2164      	movs	r1, #100	@ 0x64
 8006670:	fb01 f303 	mul.w	r3, r1, r3
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	011b      	lsls	r3, r3, #4
 8006678:	3332      	adds	r3, #50	@ 0x32
 800667a:	4a08      	ldr	r2, [pc, #32]	@ (800669c <UART_SetConfig+0x4e4>)
 800667c:	fba2 2303 	umull	r2, r3, r2, r3
 8006680:	095b      	lsrs	r3, r3, #5
 8006682:	f003 020f 	and.w	r2, r3, #15
 8006686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4422      	add	r2, r4
 800668e:	609a      	str	r2, [r3, #8]
}
 8006690:	bf00      	nop
 8006692:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006696:	46bd      	mov	sp, r7
 8006698:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800669c:	51eb851f 	.word	0x51eb851f

080066a0 <__cvt>:
 80066a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066a4:	ec57 6b10 	vmov	r6, r7, d0
 80066a8:	2f00      	cmp	r7, #0
 80066aa:	460c      	mov	r4, r1
 80066ac:	4619      	mov	r1, r3
 80066ae:	463b      	mov	r3, r7
 80066b0:	bfbb      	ittet	lt
 80066b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80066b6:	461f      	movlt	r7, r3
 80066b8:	2300      	movge	r3, #0
 80066ba:	232d      	movlt	r3, #45	@ 0x2d
 80066bc:	700b      	strb	r3, [r1, #0]
 80066be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80066c4:	4691      	mov	r9, r2
 80066c6:	f023 0820 	bic.w	r8, r3, #32
 80066ca:	bfbc      	itt	lt
 80066cc:	4632      	movlt	r2, r6
 80066ce:	4616      	movlt	r6, r2
 80066d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066d4:	d005      	beq.n	80066e2 <__cvt+0x42>
 80066d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80066da:	d100      	bne.n	80066de <__cvt+0x3e>
 80066dc:	3401      	adds	r4, #1
 80066de:	2102      	movs	r1, #2
 80066e0:	e000      	b.n	80066e4 <__cvt+0x44>
 80066e2:	2103      	movs	r1, #3
 80066e4:	ab03      	add	r3, sp, #12
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	ab02      	add	r3, sp, #8
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	ec47 6b10 	vmov	d0, r6, r7
 80066f0:	4653      	mov	r3, sl
 80066f2:	4622      	mov	r2, r4
 80066f4:	f001 f880 	bl	80077f8 <_dtoa_r>
 80066f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80066fc:	4605      	mov	r5, r0
 80066fe:	d119      	bne.n	8006734 <__cvt+0x94>
 8006700:	f019 0f01 	tst.w	r9, #1
 8006704:	d00e      	beq.n	8006724 <__cvt+0x84>
 8006706:	eb00 0904 	add.w	r9, r0, r4
 800670a:	2200      	movs	r2, #0
 800670c:	2300      	movs	r3, #0
 800670e:	4630      	mov	r0, r6
 8006710:	4639      	mov	r1, r7
 8006712:	f7fa f9f9 	bl	8000b08 <__aeabi_dcmpeq>
 8006716:	b108      	cbz	r0, 800671c <__cvt+0x7c>
 8006718:	f8cd 900c 	str.w	r9, [sp, #12]
 800671c:	2230      	movs	r2, #48	@ 0x30
 800671e:	9b03      	ldr	r3, [sp, #12]
 8006720:	454b      	cmp	r3, r9
 8006722:	d31e      	bcc.n	8006762 <__cvt+0xc2>
 8006724:	9b03      	ldr	r3, [sp, #12]
 8006726:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006728:	1b5b      	subs	r3, r3, r5
 800672a:	4628      	mov	r0, r5
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	b004      	add	sp, #16
 8006730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006734:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006738:	eb00 0904 	add.w	r9, r0, r4
 800673c:	d1e5      	bne.n	800670a <__cvt+0x6a>
 800673e:	7803      	ldrb	r3, [r0, #0]
 8006740:	2b30      	cmp	r3, #48	@ 0x30
 8006742:	d10a      	bne.n	800675a <__cvt+0xba>
 8006744:	2200      	movs	r2, #0
 8006746:	2300      	movs	r3, #0
 8006748:	4630      	mov	r0, r6
 800674a:	4639      	mov	r1, r7
 800674c:	f7fa f9dc 	bl	8000b08 <__aeabi_dcmpeq>
 8006750:	b918      	cbnz	r0, 800675a <__cvt+0xba>
 8006752:	f1c4 0401 	rsb	r4, r4, #1
 8006756:	f8ca 4000 	str.w	r4, [sl]
 800675a:	f8da 3000 	ldr.w	r3, [sl]
 800675e:	4499      	add	r9, r3
 8006760:	e7d3      	b.n	800670a <__cvt+0x6a>
 8006762:	1c59      	adds	r1, r3, #1
 8006764:	9103      	str	r1, [sp, #12]
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	e7d9      	b.n	800671e <__cvt+0x7e>

0800676a <__exponent>:
 800676a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800676c:	2900      	cmp	r1, #0
 800676e:	bfba      	itte	lt
 8006770:	4249      	neglt	r1, r1
 8006772:	232d      	movlt	r3, #45	@ 0x2d
 8006774:	232b      	movge	r3, #43	@ 0x2b
 8006776:	2909      	cmp	r1, #9
 8006778:	7002      	strb	r2, [r0, #0]
 800677a:	7043      	strb	r3, [r0, #1]
 800677c:	dd29      	ble.n	80067d2 <__exponent+0x68>
 800677e:	f10d 0307 	add.w	r3, sp, #7
 8006782:	461d      	mov	r5, r3
 8006784:	270a      	movs	r7, #10
 8006786:	461a      	mov	r2, r3
 8006788:	fbb1 f6f7 	udiv	r6, r1, r7
 800678c:	fb07 1416 	mls	r4, r7, r6, r1
 8006790:	3430      	adds	r4, #48	@ 0x30
 8006792:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006796:	460c      	mov	r4, r1
 8006798:	2c63      	cmp	r4, #99	@ 0x63
 800679a:	f103 33ff 	add.w	r3, r3, #4294967295
 800679e:	4631      	mov	r1, r6
 80067a0:	dcf1      	bgt.n	8006786 <__exponent+0x1c>
 80067a2:	3130      	adds	r1, #48	@ 0x30
 80067a4:	1e94      	subs	r4, r2, #2
 80067a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80067aa:	1c41      	adds	r1, r0, #1
 80067ac:	4623      	mov	r3, r4
 80067ae:	42ab      	cmp	r3, r5
 80067b0:	d30a      	bcc.n	80067c8 <__exponent+0x5e>
 80067b2:	f10d 0309 	add.w	r3, sp, #9
 80067b6:	1a9b      	subs	r3, r3, r2
 80067b8:	42ac      	cmp	r4, r5
 80067ba:	bf88      	it	hi
 80067bc:	2300      	movhi	r3, #0
 80067be:	3302      	adds	r3, #2
 80067c0:	4403      	add	r3, r0
 80067c2:	1a18      	subs	r0, r3, r0
 80067c4:	b003      	add	sp, #12
 80067c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80067cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80067d0:	e7ed      	b.n	80067ae <__exponent+0x44>
 80067d2:	2330      	movs	r3, #48	@ 0x30
 80067d4:	3130      	adds	r1, #48	@ 0x30
 80067d6:	7083      	strb	r3, [r0, #2]
 80067d8:	70c1      	strb	r1, [r0, #3]
 80067da:	1d03      	adds	r3, r0, #4
 80067dc:	e7f1      	b.n	80067c2 <__exponent+0x58>
	...

080067e0 <_printf_float>:
 80067e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e4:	b08d      	sub	sp, #52	@ 0x34
 80067e6:	460c      	mov	r4, r1
 80067e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80067ec:	4616      	mov	r6, r2
 80067ee:	461f      	mov	r7, r3
 80067f0:	4605      	mov	r5, r0
 80067f2:	f000 fefb 	bl	80075ec <_localeconv_r>
 80067f6:	6803      	ldr	r3, [r0, #0]
 80067f8:	9304      	str	r3, [sp, #16]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7f9 fd58 	bl	80002b0 <strlen>
 8006800:	2300      	movs	r3, #0
 8006802:	930a      	str	r3, [sp, #40]	@ 0x28
 8006804:	f8d8 3000 	ldr.w	r3, [r8]
 8006808:	9005      	str	r0, [sp, #20]
 800680a:	3307      	adds	r3, #7
 800680c:	f023 0307 	bic.w	r3, r3, #7
 8006810:	f103 0208 	add.w	r2, r3, #8
 8006814:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006818:	f8d4 b000 	ldr.w	fp, [r4]
 800681c:	f8c8 2000 	str.w	r2, [r8]
 8006820:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006824:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006828:	9307      	str	r3, [sp, #28]
 800682a:	f8cd 8018 	str.w	r8, [sp, #24]
 800682e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006832:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006836:	4b9c      	ldr	r3, [pc, #624]	@ (8006aa8 <_printf_float+0x2c8>)
 8006838:	f04f 32ff 	mov.w	r2, #4294967295
 800683c:	f7fa f996 	bl	8000b6c <__aeabi_dcmpun>
 8006840:	bb70      	cbnz	r0, 80068a0 <_printf_float+0xc0>
 8006842:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006846:	4b98      	ldr	r3, [pc, #608]	@ (8006aa8 <_printf_float+0x2c8>)
 8006848:	f04f 32ff 	mov.w	r2, #4294967295
 800684c:	f7fa f970 	bl	8000b30 <__aeabi_dcmple>
 8006850:	bb30      	cbnz	r0, 80068a0 <_printf_float+0xc0>
 8006852:	2200      	movs	r2, #0
 8006854:	2300      	movs	r3, #0
 8006856:	4640      	mov	r0, r8
 8006858:	4649      	mov	r1, r9
 800685a:	f7fa f95f 	bl	8000b1c <__aeabi_dcmplt>
 800685e:	b110      	cbz	r0, 8006866 <_printf_float+0x86>
 8006860:	232d      	movs	r3, #45	@ 0x2d
 8006862:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006866:	4a91      	ldr	r2, [pc, #580]	@ (8006aac <_printf_float+0x2cc>)
 8006868:	4b91      	ldr	r3, [pc, #580]	@ (8006ab0 <_printf_float+0x2d0>)
 800686a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800686e:	bf8c      	ite	hi
 8006870:	4690      	movhi	r8, r2
 8006872:	4698      	movls	r8, r3
 8006874:	2303      	movs	r3, #3
 8006876:	6123      	str	r3, [r4, #16]
 8006878:	f02b 0304 	bic.w	r3, fp, #4
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	f04f 0900 	mov.w	r9, #0
 8006882:	9700      	str	r7, [sp, #0]
 8006884:	4633      	mov	r3, r6
 8006886:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006888:	4621      	mov	r1, r4
 800688a:	4628      	mov	r0, r5
 800688c:	f000 f9d2 	bl	8006c34 <_printf_common>
 8006890:	3001      	adds	r0, #1
 8006892:	f040 808d 	bne.w	80069b0 <_printf_float+0x1d0>
 8006896:	f04f 30ff 	mov.w	r0, #4294967295
 800689a:	b00d      	add	sp, #52	@ 0x34
 800689c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a0:	4642      	mov	r2, r8
 80068a2:	464b      	mov	r3, r9
 80068a4:	4640      	mov	r0, r8
 80068a6:	4649      	mov	r1, r9
 80068a8:	f7fa f960 	bl	8000b6c <__aeabi_dcmpun>
 80068ac:	b140      	cbz	r0, 80068c0 <_printf_float+0xe0>
 80068ae:	464b      	mov	r3, r9
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	bfbc      	itt	lt
 80068b4:	232d      	movlt	r3, #45	@ 0x2d
 80068b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80068ba:	4a7e      	ldr	r2, [pc, #504]	@ (8006ab4 <_printf_float+0x2d4>)
 80068bc:	4b7e      	ldr	r3, [pc, #504]	@ (8006ab8 <_printf_float+0x2d8>)
 80068be:	e7d4      	b.n	800686a <_printf_float+0x8a>
 80068c0:	6863      	ldr	r3, [r4, #4]
 80068c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80068c6:	9206      	str	r2, [sp, #24]
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	d13b      	bne.n	8006944 <_printf_float+0x164>
 80068cc:	2306      	movs	r3, #6
 80068ce:	6063      	str	r3, [r4, #4]
 80068d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80068d4:	2300      	movs	r3, #0
 80068d6:	6022      	str	r2, [r4, #0]
 80068d8:	9303      	str	r3, [sp, #12]
 80068da:	ab0a      	add	r3, sp, #40	@ 0x28
 80068dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80068e0:	ab09      	add	r3, sp, #36	@ 0x24
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	6861      	ldr	r1, [r4, #4]
 80068e6:	ec49 8b10 	vmov	d0, r8, r9
 80068ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80068ee:	4628      	mov	r0, r5
 80068f0:	f7ff fed6 	bl	80066a0 <__cvt>
 80068f4:	9b06      	ldr	r3, [sp, #24]
 80068f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80068f8:	2b47      	cmp	r3, #71	@ 0x47
 80068fa:	4680      	mov	r8, r0
 80068fc:	d129      	bne.n	8006952 <_printf_float+0x172>
 80068fe:	1cc8      	adds	r0, r1, #3
 8006900:	db02      	blt.n	8006908 <_printf_float+0x128>
 8006902:	6863      	ldr	r3, [r4, #4]
 8006904:	4299      	cmp	r1, r3
 8006906:	dd41      	ble.n	800698c <_printf_float+0x1ac>
 8006908:	f1aa 0a02 	sub.w	sl, sl, #2
 800690c:	fa5f fa8a 	uxtb.w	sl, sl
 8006910:	3901      	subs	r1, #1
 8006912:	4652      	mov	r2, sl
 8006914:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006918:	9109      	str	r1, [sp, #36]	@ 0x24
 800691a:	f7ff ff26 	bl	800676a <__exponent>
 800691e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006920:	1813      	adds	r3, r2, r0
 8006922:	2a01      	cmp	r2, #1
 8006924:	4681      	mov	r9, r0
 8006926:	6123      	str	r3, [r4, #16]
 8006928:	dc02      	bgt.n	8006930 <_printf_float+0x150>
 800692a:	6822      	ldr	r2, [r4, #0]
 800692c:	07d2      	lsls	r2, r2, #31
 800692e:	d501      	bpl.n	8006934 <_printf_float+0x154>
 8006930:	3301      	adds	r3, #1
 8006932:	6123      	str	r3, [r4, #16]
 8006934:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0a2      	beq.n	8006882 <_printf_float+0xa2>
 800693c:	232d      	movs	r3, #45	@ 0x2d
 800693e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006942:	e79e      	b.n	8006882 <_printf_float+0xa2>
 8006944:	9a06      	ldr	r2, [sp, #24]
 8006946:	2a47      	cmp	r2, #71	@ 0x47
 8006948:	d1c2      	bne.n	80068d0 <_printf_float+0xf0>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1c0      	bne.n	80068d0 <_printf_float+0xf0>
 800694e:	2301      	movs	r3, #1
 8006950:	e7bd      	b.n	80068ce <_printf_float+0xee>
 8006952:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006956:	d9db      	bls.n	8006910 <_printf_float+0x130>
 8006958:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800695c:	d118      	bne.n	8006990 <_printf_float+0x1b0>
 800695e:	2900      	cmp	r1, #0
 8006960:	6863      	ldr	r3, [r4, #4]
 8006962:	dd0b      	ble.n	800697c <_printf_float+0x19c>
 8006964:	6121      	str	r1, [r4, #16]
 8006966:	b913      	cbnz	r3, 800696e <_printf_float+0x18e>
 8006968:	6822      	ldr	r2, [r4, #0]
 800696a:	07d0      	lsls	r0, r2, #31
 800696c:	d502      	bpl.n	8006974 <_printf_float+0x194>
 800696e:	3301      	adds	r3, #1
 8006970:	440b      	add	r3, r1
 8006972:	6123      	str	r3, [r4, #16]
 8006974:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006976:	f04f 0900 	mov.w	r9, #0
 800697a:	e7db      	b.n	8006934 <_printf_float+0x154>
 800697c:	b913      	cbnz	r3, 8006984 <_printf_float+0x1a4>
 800697e:	6822      	ldr	r2, [r4, #0]
 8006980:	07d2      	lsls	r2, r2, #31
 8006982:	d501      	bpl.n	8006988 <_printf_float+0x1a8>
 8006984:	3302      	adds	r3, #2
 8006986:	e7f4      	b.n	8006972 <_printf_float+0x192>
 8006988:	2301      	movs	r3, #1
 800698a:	e7f2      	b.n	8006972 <_printf_float+0x192>
 800698c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006992:	4299      	cmp	r1, r3
 8006994:	db05      	blt.n	80069a2 <_printf_float+0x1c2>
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	6121      	str	r1, [r4, #16]
 800699a:	07d8      	lsls	r0, r3, #31
 800699c:	d5ea      	bpl.n	8006974 <_printf_float+0x194>
 800699e:	1c4b      	adds	r3, r1, #1
 80069a0:	e7e7      	b.n	8006972 <_printf_float+0x192>
 80069a2:	2900      	cmp	r1, #0
 80069a4:	bfd4      	ite	le
 80069a6:	f1c1 0202 	rsble	r2, r1, #2
 80069aa:	2201      	movgt	r2, #1
 80069ac:	4413      	add	r3, r2
 80069ae:	e7e0      	b.n	8006972 <_printf_float+0x192>
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	055a      	lsls	r2, r3, #21
 80069b4:	d407      	bmi.n	80069c6 <_printf_float+0x1e6>
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	4642      	mov	r2, r8
 80069ba:	4631      	mov	r1, r6
 80069bc:	4628      	mov	r0, r5
 80069be:	47b8      	blx	r7
 80069c0:	3001      	adds	r0, #1
 80069c2:	d12b      	bne.n	8006a1c <_printf_float+0x23c>
 80069c4:	e767      	b.n	8006896 <_printf_float+0xb6>
 80069c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069ca:	f240 80dd 	bls.w	8006b88 <_printf_float+0x3a8>
 80069ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069d2:	2200      	movs	r2, #0
 80069d4:	2300      	movs	r3, #0
 80069d6:	f7fa f897 	bl	8000b08 <__aeabi_dcmpeq>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d033      	beq.n	8006a46 <_printf_float+0x266>
 80069de:	4a37      	ldr	r2, [pc, #220]	@ (8006abc <_printf_float+0x2dc>)
 80069e0:	2301      	movs	r3, #1
 80069e2:	4631      	mov	r1, r6
 80069e4:	4628      	mov	r0, r5
 80069e6:	47b8      	blx	r7
 80069e8:	3001      	adds	r0, #1
 80069ea:	f43f af54 	beq.w	8006896 <_printf_float+0xb6>
 80069ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80069f2:	4543      	cmp	r3, r8
 80069f4:	db02      	blt.n	80069fc <_printf_float+0x21c>
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	07d8      	lsls	r0, r3, #31
 80069fa:	d50f      	bpl.n	8006a1c <_printf_float+0x23c>
 80069fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a00:	4631      	mov	r1, r6
 8006a02:	4628      	mov	r0, r5
 8006a04:	47b8      	blx	r7
 8006a06:	3001      	adds	r0, #1
 8006a08:	f43f af45 	beq.w	8006896 <_printf_float+0xb6>
 8006a0c:	f04f 0900 	mov.w	r9, #0
 8006a10:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a14:	f104 0a1a 	add.w	sl, r4, #26
 8006a18:	45c8      	cmp	r8, r9
 8006a1a:	dc09      	bgt.n	8006a30 <_printf_float+0x250>
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	079b      	lsls	r3, r3, #30
 8006a20:	f100 8103 	bmi.w	8006c2a <_printf_float+0x44a>
 8006a24:	68e0      	ldr	r0, [r4, #12]
 8006a26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a28:	4298      	cmp	r0, r3
 8006a2a:	bfb8      	it	lt
 8006a2c:	4618      	movlt	r0, r3
 8006a2e:	e734      	b.n	800689a <_printf_float+0xba>
 8006a30:	2301      	movs	r3, #1
 8006a32:	4652      	mov	r2, sl
 8006a34:	4631      	mov	r1, r6
 8006a36:	4628      	mov	r0, r5
 8006a38:	47b8      	blx	r7
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	f43f af2b 	beq.w	8006896 <_printf_float+0xb6>
 8006a40:	f109 0901 	add.w	r9, r9, #1
 8006a44:	e7e8      	b.n	8006a18 <_printf_float+0x238>
 8006a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	dc39      	bgt.n	8006ac0 <_printf_float+0x2e0>
 8006a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8006abc <_printf_float+0x2dc>)
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4631      	mov	r1, r6
 8006a52:	4628      	mov	r0, r5
 8006a54:	47b8      	blx	r7
 8006a56:	3001      	adds	r0, #1
 8006a58:	f43f af1d 	beq.w	8006896 <_printf_float+0xb6>
 8006a5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006a60:	ea59 0303 	orrs.w	r3, r9, r3
 8006a64:	d102      	bne.n	8006a6c <_printf_float+0x28c>
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	07d9      	lsls	r1, r3, #31
 8006a6a:	d5d7      	bpl.n	8006a1c <_printf_float+0x23c>
 8006a6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a70:	4631      	mov	r1, r6
 8006a72:	4628      	mov	r0, r5
 8006a74:	47b8      	blx	r7
 8006a76:	3001      	adds	r0, #1
 8006a78:	f43f af0d 	beq.w	8006896 <_printf_float+0xb6>
 8006a7c:	f04f 0a00 	mov.w	sl, #0
 8006a80:	f104 0b1a 	add.w	fp, r4, #26
 8006a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a86:	425b      	negs	r3, r3
 8006a88:	4553      	cmp	r3, sl
 8006a8a:	dc01      	bgt.n	8006a90 <_printf_float+0x2b0>
 8006a8c:	464b      	mov	r3, r9
 8006a8e:	e793      	b.n	80069b8 <_printf_float+0x1d8>
 8006a90:	2301      	movs	r3, #1
 8006a92:	465a      	mov	r2, fp
 8006a94:	4631      	mov	r1, r6
 8006a96:	4628      	mov	r0, r5
 8006a98:	47b8      	blx	r7
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	f43f aefb 	beq.w	8006896 <_printf_float+0xb6>
 8006aa0:	f10a 0a01 	add.w	sl, sl, #1
 8006aa4:	e7ee      	b.n	8006a84 <_printf_float+0x2a4>
 8006aa6:	bf00      	nop
 8006aa8:	7fefffff 	.word	0x7fefffff
 8006aac:	0800ae38 	.word	0x0800ae38
 8006ab0:	0800ae34 	.word	0x0800ae34
 8006ab4:	0800ae40 	.word	0x0800ae40
 8006ab8:	0800ae3c 	.word	0x0800ae3c
 8006abc:	0800ae44 	.word	0x0800ae44
 8006ac0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ac2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ac6:	4553      	cmp	r3, sl
 8006ac8:	bfa8      	it	ge
 8006aca:	4653      	movge	r3, sl
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	4699      	mov	r9, r3
 8006ad0:	dc36      	bgt.n	8006b40 <_printf_float+0x360>
 8006ad2:	f04f 0b00 	mov.w	fp, #0
 8006ad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ada:	f104 021a 	add.w	r2, r4, #26
 8006ade:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ae0:	9306      	str	r3, [sp, #24]
 8006ae2:	eba3 0309 	sub.w	r3, r3, r9
 8006ae6:	455b      	cmp	r3, fp
 8006ae8:	dc31      	bgt.n	8006b4e <_printf_float+0x36e>
 8006aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aec:	459a      	cmp	sl, r3
 8006aee:	dc3a      	bgt.n	8006b66 <_printf_float+0x386>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	07da      	lsls	r2, r3, #31
 8006af4:	d437      	bmi.n	8006b66 <_printf_float+0x386>
 8006af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006af8:	ebaa 0903 	sub.w	r9, sl, r3
 8006afc:	9b06      	ldr	r3, [sp, #24]
 8006afe:	ebaa 0303 	sub.w	r3, sl, r3
 8006b02:	4599      	cmp	r9, r3
 8006b04:	bfa8      	it	ge
 8006b06:	4699      	movge	r9, r3
 8006b08:	f1b9 0f00 	cmp.w	r9, #0
 8006b0c:	dc33      	bgt.n	8006b76 <_printf_float+0x396>
 8006b0e:	f04f 0800 	mov.w	r8, #0
 8006b12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b16:	f104 0b1a 	add.w	fp, r4, #26
 8006b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b1c:	ebaa 0303 	sub.w	r3, sl, r3
 8006b20:	eba3 0309 	sub.w	r3, r3, r9
 8006b24:	4543      	cmp	r3, r8
 8006b26:	f77f af79 	ble.w	8006a1c <_printf_float+0x23c>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	465a      	mov	r2, fp
 8006b2e:	4631      	mov	r1, r6
 8006b30:	4628      	mov	r0, r5
 8006b32:	47b8      	blx	r7
 8006b34:	3001      	adds	r0, #1
 8006b36:	f43f aeae 	beq.w	8006896 <_printf_float+0xb6>
 8006b3a:	f108 0801 	add.w	r8, r8, #1
 8006b3e:	e7ec      	b.n	8006b1a <_printf_float+0x33a>
 8006b40:	4642      	mov	r2, r8
 8006b42:	4631      	mov	r1, r6
 8006b44:	4628      	mov	r0, r5
 8006b46:	47b8      	blx	r7
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d1c2      	bne.n	8006ad2 <_printf_float+0x2f2>
 8006b4c:	e6a3      	b.n	8006896 <_printf_float+0xb6>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	4631      	mov	r1, r6
 8006b52:	4628      	mov	r0, r5
 8006b54:	9206      	str	r2, [sp, #24]
 8006b56:	47b8      	blx	r7
 8006b58:	3001      	adds	r0, #1
 8006b5a:	f43f ae9c 	beq.w	8006896 <_printf_float+0xb6>
 8006b5e:	9a06      	ldr	r2, [sp, #24]
 8006b60:	f10b 0b01 	add.w	fp, fp, #1
 8006b64:	e7bb      	b.n	8006ade <_printf_float+0x2fe>
 8006b66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	47b8      	blx	r7
 8006b70:	3001      	adds	r0, #1
 8006b72:	d1c0      	bne.n	8006af6 <_printf_float+0x316>
 8006b74:	e68f      	b.n	8006896 <_printf_float+0xb6>
 8006b76:	9a06      	ldr	r2, [sp, #24]
 8006b78:	464b      	mov	r3, r9
 8006b7a:	4442      	add	r2, r8
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	4628      	mov	r0, r5
 8006b80:	47b8      	blx	r7
 8006b82:	3001      	adds	r0, #1
 8006b84:	d1c3      	bne.n	8006b0e <_printf_float+0x32e>
 8006b86:	e686      	b.n	8006896 <_printf_float+0xb6>
 8006b88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b8c:	f1ba 0f01 	cmp.w	sl, #1
 8006b90:	dc01      	bgt.n	8006b96 <_printf_float+0x3b6>
 8006b92:	07db      	lsls	r3, r3, #31
 8006b94:	d536      	bpl.n	8006c04 <_printf_float+0x424>
 8006b96:	2301      	movs	r3, #1
 8006b98:	4642      	mov	r2, r8
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	47b8      	blx	r7
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	f43f ae78 	beq.w	8006896 <_printf_float+0xb6>
 8006ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006baa:	4631      	mov	r1, r6
 8006bac:	4628      	mov	r0, r5
 8006bae:	47b8      	blx	r7
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	f43f ae70 	beq.w	8006896 <_printf_float+0xb6>
 8006bb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bc2:	f7f9 ffa1 	bl	8000b08 <__aeabi_dcmpeq>
 8006bc6:	b9c0      	cbnz	r0, 8006bfa <_printf_float+0x41a>
 8006bc8:	4653      	mov	r3, sl
 8006bca:	f108 0201 	add.w	r2, r8, #1
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b8      	blx	r7
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d10c      	bne.n	8006bf2 <_printf_float+0x412>
 8006bd8:	e65d      	b.n	8006896 <_printf_float+0xb6>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	465a      	mov	r2, fp
 8006bde:	4631      	mov	r1, r6
 8006be0:	4628      	mov	r0, r5
 8006be2:	47b8      	blx	r7
 8006be4:	3001      	adds	r0, #1
 8006be6:	f43f ae56 	beq.w	8006896 <_printf_float+0xb6>
 8006bea:	f108 0801 	add.w	r8, r8, #1
 8006bee:	45d0      	cmp	r8, sl
 8006bf0:	dbf3      	blt.n	8006bda <_printf_float+0x3fa>
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006bf8:	e6df      	b.n	80069ba <_printf_float+0x1da>
 8006bfa:	f04f 0800 	mov.w	r8, #0
 8006bfe:	f104 0b1a 	add.w	fp, r4, #26
 8006c02:	e7f4      	b.n	8006bee <_printf_float+0x40e>
 8006c04:	2301      	movs	r3, #1
 8006c06:	4642      	mov	r2, r8
 8006c08:	e7e1      	b.n	8006bce <_printf_float+0x3ee>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	464a      	mov	r2, r9
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4628      	mov	r0, r5
 8006c12:	47b8      	blx	r7
 8006c14:	3001      	adds	r0, #1
 8006c16:	f43f ae3e 	beq.w	8006896 <_printf_float+0xb6>
 8006c1a:	f108 0801 	add.w	r8, r8, #1
 8006c1e:	68e3      	ldr	r3, [r4, #12]
 8006c20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c22:	1a5b      	subs	r3, r3, r1
 8006c24:	4543      	cmp	r3, r8
 8006c26:	dcf0      	bgt.n	8006c0a <_printf_float+0x42a>
 8006c28:	e6fc      	b.n	8006a24 <_printf_float+0x244>
 8006c2a:	f04f 0800 	mov.w	r8, #0
 8006c2e:	f104 0919 	add.w	r9, r4, #25
 8006c32:	e7f4      	b.n	8006c1e <_printf_float+0x43e>

08006c34 <_printf_common>:
 8006c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c38:	4616      	mov	r6, r2
 8006c3a:	4698      	mov	r8, r3
 8006c3c:	688a      	ldr	r2, [r1, #8]
 8006c3e:	690b      	ldr	r3, [r1, #16]
 8006c40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c44:	4293      	cmp	r3, r2
 8006c46:	bfb8      	it	lt
 8006c48:	4613      	movlt	r3, r2
 8006c4a:	6033      	str	r3, [r6, #0]
 8006c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c50:	4607      	mov	r7, r0
 8006c52:	460c      	mov	r4, r1
 8006c54:	b10a      	cbz	r2, 8006c5a <_printf_common+0x26>
 8006c56:	3301      	adds	r3, #1
 8006c58:	6033      	str	r3, [r6, #0]
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	0699      	lsls	r1, r3, #26
 8006c5e:	bf42      	ittt	mi
 8006c60:	6833      	ldrmi	r3, [r6, #0]
 8006c62:	3302      	addmi	r3, #2
 8006c64:	6033      	strmi	r3, [r6, #0]
 8006c66:	6825      	ldr	r5, [r4, #0]
 8006c68:	f015 0506 	ands.w	r5, r5, #6
 8006c6c:	d106      	bne.n	8006c7c <_printf_common+0x48>
 8006c6e:	f104 0a19 	add.w	sl, r4, #25
 8006c72:	68e3      	ldr	r3, [r4, #12]
 8006c74:	6832      	ldr	r2, [r6, #0]
 8006c76:	1a9b      	subs	r3, r3, r2
 8006c78:	42ab      	cmp	r3, r5
 8006c7a:	dc26      	bgt.n	8006cca <_printf_common+0x96>
 8006c7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c80:	6822      	ldr	r2, [r4, #0]
 8006c82:	3b00      	subs	r3, #0
 8006c84:	bf18      	it	ne
 8006c86:	2301      	movne	r3, #1
 8006c88:	0692      	lsls	r2, r2, #26
 8006c8a:	d42b      	bmi.n	8006ce4 <_printf_common+0xb0>
 8006c8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c90:	4641      	mov	r1, r8
 8006c92:	4638      	mov	r0, r7
 8006c94:	47c8      	blx	r9
 8006c96:	3001      	adds	r0, #1
 8006c98:	d01e      	beq.n	8006cd8 <_printf_common+0xa4>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	6922      	ldr	r2, [r4, #16]
 8006c9e:	f003 0306 	and.w	r3, r3, #6
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	bf02      	ittt	eq
 8006ca6:	68e5      	ldreq	r5, [r4, #12]
 8006ca8:	6833      	ldreq	r3, [r6, #0]
 8006caa:	1aed      	subeq	r5, r5, r3
 8006cac:	68a3      	ldr	r3, [r4, #8]
 8006cae:	bf0c      	ite	eq
 8006cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cb4:	2500      	movne	r5, #0
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	bfc4      	itt	gt
 8006cba:	1a9b      	subgt	r3, r3, r2
 8006cbc:	18ed      	addgt	r5, r5, r3
 8006cbe:	2600      	movs	r6, #0
 8006cc0:	341a      	adds	r4, #26
 8006cc2:	42b5      	cmp	r5, r6
 8006cc4:	d11a      	bne.n	8006cfc <_printf_common+0xc8>
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	e008      	b.n	8006cdc <_printf_common+0xa8>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	4652      	mov	r2, sl
 8006cce:	4641      	mov	r1, r8
 8006cd0:	4638      	mov	r0, r7
 8006cd2:	47c8      	blx	r9
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	d103      	bne.n	8006ce0 <_printf_common+0xac>
 8006cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce0:	3501      	adds	r5, #1
 8006ce2:	e7c6      	b.n	8006c72 <_printf_common+0x3e>
 8006ce4:	18e1      	adds	r1, r4, r3
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	2030      	movs	r0, #48	@ 0x30
 8006cea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006cee:	4422      	add	r2, r4
 8006cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006cf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006cf8:	3302      	adds	r3, #2
 8006cfa:	e7c7      	b.n	8006c8c <_printf_common+0x58>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	4622      	mov	r2, r4
 8006d00:	4641      	mov	r1, r8
 8006d02:	4638      	mov	r0, r7
 8006d04:	47c8      	blx	r9
 8006d06:	3001      	adds	r0, #1
 8006d08:	d0e6      	beq.n	8006cd8 <_printf_common+0xa4>
 8006d0a:	3601      	adds	r6, #1
 8006d0c:	e7d9      	b.n	8006cc2 <_printf_common+0x8e>
	...

08006d10 <_printf_i>:
 8006d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d14:	7e0f      	ldrb	r7, [r1, #24]
 8006d16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d18:	2f78      	cmp	r7, #120	@ 0x78
 8006d1a:	4691      	mov	r9, r2
 8006d1c:	4680      	mov	r8, r0
 8006d1e:	460c      	mov	r4, r1
 8006d20:	469a      	mov	sl, r3
 8006d22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d26:	d807      	bhi.n	8006d38 <_printf_i+0x28>
 8006d28:	2f62      	cmp	r7, #98	@ 0x62
 8006d2a:	d80a      	bhi.n	8006d42 <_printf_i+0x32>
 8006d2c:	2f00      	cmp	r7, #0
 8006d2e:	f000 80d1 	beq.w	8006ed4 <_printf_i+0x1c4>
 8006d32:	2f58      	cmp	r7, #88	@ 0x58
 8006d34:	f000 80b8 	beq.w	8006ea8 <_printf_i+0x198>
 8006d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d40:	e03a      	b.n	8006db8 <_printf_i+0xa8>
 8006d42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d46:	2b15      	cmp	r3, #21
 8006d48:	d8f6      	bhi.n	8006d38 <_printf_i+0x28>
 8006d4a:	a101      	add	r1, pc, #4	@ (adr r1, 8006d50 <_printf_i+0x40>)
 8006d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d50:	08006da9 	.word	0x08006da9
 8006d54:	08006dbd 	.word	0x08006dbd
 8006d58:	08006d39 	.word	0x08006d39
 8006d5c:	08006d39 	.word	0x08006d39
 8006d60:	08006d39 	.word	0x08006d39
 8006d64:	08006d39 	.word	0x08006d39
 8006d68:	08006dbd 	.word	0x08006dbd
 8006d6c:	08006d39 	.word	0x08006d39
 8006d70:	08006d39 	.word	0x08006d39
 8006d74:	08006d39 	.word	0x08006d39
 8006d78:	08006d39 	.word	0x08006d39
 8006d7c:	08006ebb 	.word	0x08006ebb
 8006d80:	08006de7 	.word	0x08006de7
 8006d84:	08006e75 	.word	0x08006e75
 8006d88:	08006d39 	.word	0x08006d39
 8006d8c:	08006d39 	.word	0x08006d39
 8006d90:	08006edd 	.word	0x08006edd
 8006d94:	08006d39 	.word	0x08006d39
 8006d98:	08006de7 	.word	0x08006de7
 8006d9c:	08006d39 	.word	0x08006d39
 8006da0:	08006d39 	.word	0x08006d39
 8006da4:	08006e7d 	.word	0x08006e7d
 8006da8:	6833      	ldr	r3, [r6, #0]
 8006daa:	1d1a      	adds	r2, r3, #4
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6032      	str	r2, [r6, #0]
 8006db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006db4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006db8:	2301      	movs	r3, #1
 8006dba:	e09c      	b.n	8006ef6 <_printf_i+0x1e6>
 8006dbc:	6833      	ldr	r3, [r6, #0]
 8006dbe:	6820      	ldr	r0, [r4, #0]
 8006dc0:	1d19      	adds	r1, r3, #4
 8006dc2:	6031      	str	r1, [r6, #0]
 8006dc4:	0606      	lsls	r6, r0, #24
 8006dc6:	d501      	bpl.n	8006dcc <_printf_i+0xbc>
 8006dc8:	681d      	ldr	r5, [r3, #0]
 8006dca:	e003      	b.n	8006dd4 <_printf_i+0xc4>
 8006dcc:	0645      	lsls	r5, r0, #25
 8006dce:	d5fb      	bpl.n	8006dc8 <_printf_i+0xb8>
 8006dd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006dd4:	2d00      	cmp	r5, #0
 8006dd6:	da03      	bge.n	8006de0 <_printf_i+0xd0>
 8006dd8:	232d      	movs	r3, #45	@ 0x2d
 8006dda:	426d      	negs	r5, r5
 8006ddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006de0:	4858      	ldr	r0, [pc, #352]	@ (8006f44 <_printf_i+0x234>)
 8006de2:	230a      	movs	r3, #10
 8006de4:	e011      	b.n	8006e0a <_printf_i+0xfa>
 8006de6:	6821      	ldr	r1, [r4, #0]
 8006de8:	6833      	ldr	r3, [r6, #0]
 8006dea:	0608      	lsls	r0, r1, #24
 8006dec:	f853 5b04 	ldr.w	r5, [r3], #4
 8006df0:	d402      	bmi.n	8006df8 <_printf_i+0xe8>
 8006df2:	0649      	lsls	r1, r1, #25
 8006df4:	bf48      	it	mi
 8006df6:	b2ad      	uxthmi	r5, r5
 8006df8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006dfa:	4852      	ldr	r0, [pc, #328]	@ (8006f44 <_printf_i+0x234>)
 8006dfc:	6033      	str	r3, [r6, #0]
 8006dfe:	bf14      	ite	ne
 8006e00:	230a      	movne	r3, #10
 8006e02:	2308      	moveq	r3, #8
 8006e04:	2100      	movs	r1, #0
 8006e06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e0a:	6866      	ldr	r6, [r4, #4]
 8006e0c:	60a6      	str	r6, [r4, #8]
 8006e0e:	2e00      	cmp	r6, #0
 8006e10:	db05      	blt.n	8006e1e <_printf_i+0x10e>
 8006e12:	6821      	ldr	r1, [r4, #0]
 8006e14:	432e      	orrs	r6, r5
 8006e16:	f021 0104 	bic.w	r1, r1, #4
 8006e1a:	6021      	str	r1, [r4, #0]
 8006e1c:	d04b      	beq.n	8006eb6 <_printf_i+0x1a6>
 8006e1e:	4616      	mov	r6, r2
 8006e20:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e24:	fb03 5711 	mls	r7, r3, r1, r5
 8006e28:	5dc7      	ldrb	r7, [r0, r7]
 8006e2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e2e:	462f      	mov	r7, r5
 8006e30:	42bb      	cmp	r3, r7
 8006e32:	460d      	mov	r5, r1
 8006e34:	d9f4      	bls.n	8006e20 <_printf_i+0x110>
 8006e36:	2b08      	cmp	r3, #8
 8006e38:	d10b      	bne.n	8006e52 <_printf_i+0x142>
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	07df      	lsls	r7, r3, #31
 8006e3e:	d508      	bpl.n	8006e52 <_printf_i+0x142>
 8006e40:	6923      	ldr	r3, [r4, #16]
 8006e42:	6861      	ldr	r1, [r4, #4]
 8006e44:	4299      	cmp	r1, r3
 8006e46:	bfde      	ittt	le
 8006e48:	2330      	movle	r3, #48	@ 0x30
 8006e4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e52:	1b92      	subs	r2, r2, r6
 8006e54:	6122      	str	r2, [r4, #16]
 8006e56:	f8cd a000 	str.w	sl, [sp]
 8006e5a:	464b      	mov	r3, r9
 8006e5c:	aa03      	add	r2, sp, #12
 8006e5e:	4621      	mov	r1, r4
 8006e60:	4640      	mov	r0, r8
 8006e62:	f7ff fee7 	bl	8006c34 <_printf_common>
 8006e66:	3001      	adds	r0, #1
 8006e68:	d14a      	bne.n	8006f00 <_printf_i+0x1f0>
 8006e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6e:	b004      	add	sp, #16
 8006e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	f043 0320 	orr.w	r3, r3, #32
 8006e7a:	6023      	str	r3, [r4, #0]
 8006e7c:	4832      	ldr	r0, [pc, #200]	@ (8006f48 <_printf_i+0x238>)
 8006e7e:	2778      	movs	r7, #120	@ 0x78
 8006e80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	6831      	ldr	r1, [r6, #0]
 8006e88:	061f      	lsls	r7, r3, #24
 8006e8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e8e:	d402      	bmi.n	8006e96 <_printf_i+0x186>
 8006e90:	065f      	lsls	r7, r3, #25
 8006e92:	bf48      	it	mi
 8006e94:	b2ad      	uxthmi	r5, r5
 8006e96:	6031      	str	r1, [r6, #0]
 8006e98:	07d9      	lsls	r1, r3, #31
 8006e9a:	bf44      	itt	mi
 8006e9c:	f043 0320 	orrmi.w	r3, r3, #32
 8006ea0:	6023      	strmi	r3, [r4, #0]
 8006ea2:	b11d      	cbz	r5, 8006eac <_printf_i+0x19c>
 8006ea4:	2310      	movs	r3, #16
 8006ea6:	e7ad      	b.n	8006e04 <_printf_i+0xf4>
 8006ea8:	4826      	ldr	r0, [pc, #152]	@ (8006f44 <_printf_i+0x234>)
 8006eaa:	e7e9      	b.n	8006e80 <_printf_i+0x170>
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	f023 0320 	bic.w	r3, r3, #32
 8006eb2:	6023      	str	r3, [r4, #0]
 8006eb4:	e7f6      	b.n	8006ea4 <_printf_i+0x194>
 8006eb6:	4616      	mov	r6, r2
 8006eb8:	e7bd      	b.n	8006e36 <_printf_i+0x126>
 8006eba:	6833      	ldr	r3, [r6, #0]
 8006ebc:	6825      	ldr	r5, [r4, #0]
 8006ebe:	6961      	ldr	r1, [r4, #20]
 8006ec0:	1d18      	adds	r0, r3, #4
 8006ec2:	6030      	str	r0, [r6, #0]
 8006ec4:	062e      	lsls	r6, r5, #24
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	d501      	bpl.n	8006ece <_printf_i+0x1be>
 8006eca:	6019      	str	r1, [r3, #0]
 8006ecc:	e002      	b.n	8006ed4 <_printf_i+0x1c4>
 8006ece:	0668      	lsls	r0, r5, #25
 8006ed0:	d5fb      	bpl.n	8006eca <_printf_i+0x1ba>
 8006ed2:	8019      	strh	r1, [r3, #0]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	6123      	str	r3, [r4, #16]
 8006ed8:	4616      	mov	r6, r2
 8006eda:	e7bc      	b.n	8006e56 <_printf_i+0x146>
 8006edc:	6833      	ldr	r3, [r6, #0]
 8006ede:	1d1a      	adds	r2, r3, #4
 8006ee0:	6032      	str	r2, [r6, #0]
 8006ee2:	681e      	ldr	r6, [r3, #0]
 8006ee4:	6862      	ldr	r2, [r4, #4]
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f7f9 f991 	bl	8000210 <memchr>
 8006eee:	b108      	cbz	r0, 8006ef4 <_printf_i+0x1e4>
 8006ef0:	1b80      	subs	r0, r0, r6
 8006ef2:	6060      	str	r0, [r4, #4]
 8006ef4:	6863      	ldr	r3, [r4, #4]
 8006ef6:	6123      	str	r3, [r4, #16]
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006efe:	e7aa      	b.n	8006e56 <_printf_i+0x146>
 8006f00:	6923      	ldr	r3, [r4, #16]
 8006f02:	4632      	mov	r2, r6
 8006f04:	4649      	mov	r1, r9
 8006f06:	4640      	mov	r0, r8
 8006f08:	47d0      	blx	sl
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	d0ad      	beq.n	8006e6a <_printf_i+0x15a>
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	079b      	lsls	r3, r3, #30
 8006f12:	d413      	bmi.n	8006f3c <_printf_i+0x22c>
 8006f14:	68e0      	ldr	r0, [r4, #12]
 8006f16:	9b03      	ldr	r3, [sp, #12]
 8006f18:	4298      	cmp	r0, r3
 8006f1a:	bfb8      	it	lt
 8006f1c:	4618      	movlt	r0, r3
 8006f1e:	e7a6      	b.n	8006e6e <_printf_i+0x15e>
 8006f20:	2301      	movs	r3, #1
 8006f22:	4632      	mov	r2, r6
 8006f24:	4649      	mov	r1, r9
 8006f26:	4640      	mov	r0, r8
 8006f28:	47d0      	blx	sl
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	d09d      	beq.n	8006e6a <_printf_i+0x15a>
 8006f2e:	3501      	adds	r5, #1
 8006f30:	68e3      	ldr	r3, [r4, #12]
 8006f32:	9903      	ldr	r1, [sp, #12]
 8006f34:	1a5b      	subs	r3, r3, r1
 8006f36:	42ab      	cmp	r3, r5
 8006f38:	dcf2      	bgt.n	8006f20 <_printf_i+0x210>
 8006f3a:	e7eb      	b.n	8006f14 <_printf_i+0x204>
 8006f3c:	2500      	movs	r5, #0
 8006f3e:	f104 0619 	add.w	r6, r4, #25
 8006f42:	e7f5      	b.n	8006f30 <_printf_i+0x220>
 8006f44:	0800ae46 	.word	0x0800ae46
 8006f48:	0800ae57 	.word	0x0800ae57

08006f4c <_scanf_float>:
 8006f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f50:	b087      	sub	sp, #28
 8006f52:	4691      	mov	r9, r2
 8006f54:	9303      	str	r3, [sp, #12]
 8006f56:	688b      	ldr	r3, [r1, #8]
 8006f58:	1e5a      	subs	r2, r3, #1
 8006f5a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006f5e:	bf81      	itttt	hi
 8006f60:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006f64:	eb03 0b05 	addhi.w	fp, r3, r5
 8006f68:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006f6c:	608b      	strhi	r3, [r1, #8]
 8006f6e:	680b      	ldr	r3, [r1, #0]
 8006f70:	460a      	mov	r2, r1
 8006f72:	f04f 0500 	mov.w	r5, #0
 8006f76:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006f7a:	f842 3b1c 	str.w	r3, [r2], #28
 8006f7e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006f82:	4680      	mov	r8, r0
 8006f84:	460c      	mov	r4, r1
 8006f86:	bf98      	it	ls
 8006f88:	f04f 0b00 	movls.w	fp, #0
 8006f8c:	9201      	str	r2, [sp, #4]
 8006f8e:	4616      	mov	r6, r2
 8006f90:	46aa      	mov	sl, r5
 8006f92:	462f      	mov	r7, r5
 8006f94:	9502      	str	r5, [sp, #8]
 8006f96:	68a2      	ldr	r2, [r4, #8]
 8006f98:	b15a      	cbz	r2, 8006fb2 <_scanf_float+0x66>
 8006f9a:	f8d9 3000 	ldr.w	r3, [r9]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	2b4e      	cmp	r3, #78	@ 0x4e
 8006fa2:	d863      	bhi.n	800706c <_scanf_float+0x120>
 8006fa4:	2b40      	cmp	r3, #64	@ 0x40
 8006fa6:	d83b      	bhi.n	8007020 <_scanf_float+0xd4>
 8006fa8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006fac:	b2c8      	uxtb	r0, r1
 8006fae:	280e      	cmp	r0, #14
 8006fb0:	d939      	bls.n	8007026 <_scanf_float+0xda>
 8006fb2:	b11f      	cbz	r7, 8006fbc <_scanf_float+0x70>
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fba:	6023      	str	r3, [r4, #0]
 8006fbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fc0:	f1ba 0f01 	cmp.w	sl, #1
 8006fc4:	f200 8114 	bhi.w	80071f0 <_scanf_float+0x2a4>
 8006fc8:	9b01      	ldr	r3, [sp, #4]
 8006fca:	429e      	cmp	r6, r3
 8006fcc:	f200 8105 	bhi.w	80071da <_scanf_float+0x28e>
 8006fd0:	2001      	movs	r0, #1
 8006fd2:	b007      	add	sp, #28
 8006fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006fdc:	2a0d      	cmp	r2, #13
 8006fde:	d8e8      	bhi.n	8006fb2 <_scanf_float+0x66>
 8006fe0:	a101      	add	r1, pc, #4	@ (adr r1, 8006fe8 <_scanf_float+0x9c>)
 8006fe2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006fe6:	bf00      	nop
 8006fe8:	08007131 	.word	0x08007131
 8006fec:	08006fb3 	.word	0x08006fb3
 8006ff0:	08006fb3 	.word	0x08006fb3
 8006ff4:	08006fb3 	.word	0x08006fb3
 8006ff8:	0800718d 	.word	0x0800718d
 8006ffc:	08007167 	.word	0x08007167
 8007000:	08006fb3 	.word	0x08006fb3
 8007004:	08006fb3 	.word	0x08006fb3
 8007008:	0800713f 	.word	0x0800713f
 800700c:	08006fb3 	.word	0x08006fb3
 8007010:	08006fb3 	.word	0x08006fb3
 8007014:	08006fb3 	.word	0x08006fb3
 8007018:	08006fb3 	.word	0x08006fb3
 800701c:	080070fb 	.word	0x080070fb
 8007020:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007024:	e7da      	b.n	8006fdc <_scanf_float+0x90>
 8007026:	290e      	cmp	r1, #14
 8007028:	d8c3      	bhi.n	8006fb2 <_scanf_float+0x66>
 800702a:	a001      	add	r0, pc, #4	@ (adr r0, 8007030 <_scanf_float+0xe4>)
 800702c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007030:	080070eb 	.word	0x080070eb
 8007034:	08006fb3 	.word	0x08006fb3
 8007038:	080070eb 	.word	0x080070eb
 800703c:	0800717b 	.word	0x0800717b
 8007040:	08006fb3 	.word	0x08006fb3
 8007044:	0800708d 	.word	0x0800708d
 8007048:	080070d1 	.word	0x080070d1
 800704c:	080070d1 	.word	0x080070d1
 8007050:	080070d1 	.word	0x080070d1
 8007054:	080070d1 	.word	0x080070d1
 8007058:	080070d1 	.word	0x080070d1
 800705c:	080070d1 	.word	0x080070d1
 8007060:	080070d1 	.word	0x080070d1
 8007064:	080070d1 	.word	0x080070d1
 8007068:	080070d1 	.word	0x080070d1
 800706c:	2b6e      	cmp	r3, #110	@ 0x6e
 800706e:	d809      	bhi.n	8007084 <_scanf_float+0x138>
 8007070:	2b60      	cmp	r3, #96	@ 0x60
 8007072:	d8b1      	bhi.n	8006fd8 <_scanf_float+0x8c>
 8007074:	2b54      	cmp	r3, #84	@ 0x54
 8007076:	d07b      	beq.n	8007170 <_scanf_float+0x224>
 8007078:	2b59      	cmp	r3, #89	@ 0x59
 800707a:	d19a      	bne.n	8006fb2 <_scanf_float+0x66>
 800707c:	2d07      	cmp	r5, #7
 800707e:	d198      	bne.n	8006fb2 <_scanf_float+0x66>
 8007080:	2508      	movs	r5, #8
 8007082:	e02f      	b.n	80070e4 <_scanf_float+0x198>
 8007084:	2b74      	cmp	r3, #116	@ 0x74
 8007086:	d073      	beq.n	8007170 <_scanf_float+0x224>
 8007088:	2b79      	cmp	r3, #121	@ 0x79
 800708a:	e7f6      	b.n	800707a <_scanf_float+0x12e>
 800708c:	6821      	ldr	r1, [r4, #0]
 800708e:	05c8      	lsls	r0, r1, #23
 8007090:	d51e      	bpl.n	80070d0 <_scanf_float+0x184>
 8007092:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007096:	6021      	str	r1, [r4, #0]
 8007098:	3701      	adds	r7, #1
 800709a:	f1bb 0f00 	cmp.w	fp, #0
 800709e:	d003      	beq.n	80070a8 <_scanf_float+0x15c>
 80070a0:	3201      	adds	r2, #1
 80070a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80070a6:	60a2      	str	r2, [r4, #8]
 80070a8:	68a3      	ldr	r3, [r4, #8]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	60a3      	str	r3, [r4, #8]
 80070ae:	6923      	ldr	r3, [r4, #16]
 80070b0:	3301      	adds	r3, #1
 80070b2:	6123      	str	r3, [r4, #16]
 80070b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80070b8:	3b01      	subs	r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f8c9 3004 	str.w	r3, [r9, #4]
 80070c0:	f340 8082 	ble.w	80071c8 <_scanf_float+0x27c>
 80070c4:	f8d9 3000 	ldr.w	r3, [r9]
 80070c8:	3301      	adds	r3, #1
 80070ca:	f8c9 3000 	str.w	r3, [r9]
 80070ce:	e762      	b.n	8006f96 <_scanf_float+0x4a>
 80070d0:	eb1a 0105 	adds.w	r1, sl, r5
 80070d4:	f47f af6d 	bne.w	8006fb2 <_scanf_float+0x66>
 80070d8:	6822      	ldr	r2, [r4, #0]
 80070da:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80070de:	6022      	str	r2, [r4, #0]
 80070e0:	460d      	mov	r5, r1
 80070e2:	468a      	mov	sl, r1
 80070e4:	f806 3b01 	strb.w	r3, [r6], #1
 80070e8:	e7de      	b.n	80070a8 <_scanf_float+0x15c>
 80070ea:	6822      	ldr	r2, [r4, #0]
 80070ec:	0610      	lsls	r0, r2, #24
 80070ee:	f57f af60 	bpl.w	8006fb2 <_scanf_float+0x66>
 80070f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80070f6:	6022      	str	r2, [r4, #0]
 80070f8:	e7f4      	b.n	80070e4 <_scanf_float+0x198>
 80070fa:	f1ba 0f00 	cmp.w	sl, #0
 80070fe:	d10c      	bne.n	800711a <_scanf_float+0x1ce>
 8007100:	b977      	cbnz	r7, 8007120 <_scanf_float+0x1d4>
 8007102:	6822      	ldr	r2, [r4, #0]
 8007104:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007108:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800710c:	d108      	bne.n	8007120 <_scanf_float+0x1d4>
 800710e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007112:	6022      	str	r2, [r4, #0]
 8007114:	f04f 0a01 	mov.w	sl, #1
 8007118:	e7e4      	b.n	80070e4 <_scanf_float+0x198>
 800711a:	f1ba 0f02 	cmp.w	sl, #2
 800711e:	d050      	beq.n	80071c2 <_scanf_float+0x276>
 8007120:	2d01      	cmp	r5, #1
 8007122:	d002      	beq.n	800712a <_scanf_float+0x1de>
 8007124:	2d04      	cmp	r5, #4
 8007126:	f47f af44 	bne.w	8006fb2 <_scanf_float+0x66>
 800712a:	3501      	adds	r5, #1
 800712c:	b2ed      	uxtb	r5, r5
 800712e:	e7d9      	b.n	80070e4 <_scanf_float+0x198>
 8007130:	f1ba 0f01 	cmp.w	sl, #1
 8007134:	f47f af3d 	bne.w	8006fb2 <_scanf_float+0x66>
 8007138:	f04f 0a02 	mov.w	sl, #2
 800713c:	e7d2      	b.n	80070e4 <_scanf_float+0x198>
 800713e:	b975      	cbnz	r5, 800715e <_scanf_float+0x212>
 8007140:	2f00      	cmp	r7, #0
 8007142:	f47f af37 	bne.w	8006fb4 <_scanf_float+0x68>
 8007146:	6822      	ldr	r2, [r4, #0]
 8007148:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800714c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007150:	f040 8103 	bne.w	800735a <_scanf_float+0x40e>
 8007154:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007158:	6022      	str	r2, [r4, #0]
 800715a:	2501      	movs	r5, #1
 800715c:	e7c2      	b.n	80070e4 <_scanf_float+0x198>
 800715e:	2d03      	cmp	r5, #3
 8007160:	d0e3      	beq.n	800712a <_scanf_float+0x1de>
 8007162:	2d05      	cmp	r5, #5
 8007164:	e7df      	b.n	8007126 <_scanf_float+0x1da>
 8007166:	2d02      	cmp	r5, #2
 8007168:	f47f af23 	bne.w	8006fb2 <_scanf_float+0x66>
 800716c:	2503      	movs	r5, #3
 800716e:	e7b9      	b.n	80070e4 <_scanf_float+0x198>
 8007170:	2d06      	cmp	r5, #6
 8007172:	f47f af1e 	bne.w	8006fb2 <_scanf_float+0x66>
 8007176:	2507      	movs	r5, #7
 8007178:	e7b4      	b.n	80070e4 <_scanf_float+0x198>
 800717a:	6822      	ldr	r2, [r4, #0]
 800717c:	0591      	lsls	r1, r2, #22
 800717e:	f57f af18 	bpl.w	8006fb2 <_scanf_float+0x66>
 8007182:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007186:	6022      	str	r2, [r4, #0]
 8007188:	9702      	str	r7, [sp, #8]
 800718a:	e7ab      	b.n	80070e4 <_scanf_float+0x198>
 800718c:	6822      	ldr	r2, [r4, #0]
 800718e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007192:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007196:	d005      	beq.n	80071a4 <_scanf_float+0x258>
 8007198:	0550      	lsls	r0, r2, #21
 800719a:	f57f af0a 	bpl.w	8006fb2 <_scanf_float+0x66>
 800719e:	2f00      	cmp	r7, #0
 80071a0:	f000 80db 	beq.w	800735a <_scanf_float+0x40e>
 80071a4:	0591      	lsls	r1, r2, #22
 80071a6:	bf58      	it	pl
 80071a8:	9902      	ldrpl	r1, [sp, #8]
 80071aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80071ae:	bf58      	it	pl
 80071b0:	1a79      	subpl	r1, r7, r1
 80071b2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80071b6:	bf58      	it	pl
 80071b8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80071bc:	6022      	str	r2, [r4, #0]
 80071be:	2700      	movs	r7, #0
 80071c0:	e790      	b.n	80070e4 <_scanf_float+0x198>
 80071c2:	f04f 0a03 	mov.w	sl, #3
 80071c6:	e78d      	b.n	80070e4 <_scanf_float+0x198>
 80071c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80071cc:	4649      	mov	r1, r9
 80071ce:	4640      	mov	r0, r8
 80071d0:	4798      	blx	r3
 80071d2:	2800      	cmp	r0, #0
 80071d4:	f43f aedf 	beq.w	8006f96 <_scanf_float+0x4a>
 80071d8:	e6eb      	b.n	8006fb2 <_scanf_float+0x66>
 80071da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80071de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071e2:	464a      	mov	r2, r9
 80071e4:	4640      	mov	r0, r8
 80071e6:	4798      	blx	r3
 80071e8:	6923      	ldr	r3, [r4, #16]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	6123      	str	r3, [r4, #16]
 80071ee:	e6eb      	b.n	8006fc8 <_scanf_float+0x7c>
 80071f0:	1e6b      	subs	r3, r5, #1
 80071f2:	2b06      	cmp	r3, #6
 80071f4:	d824      	bhi.n	8007240 <_scanf_float+0x2f4>
 80071f6:	2d02      	cmp	r5, #2
 80071f8:	d836      	bhi.n	8007268 <_scanf_float+0x31c>
 80071fa:	9b01      	ldr	r3, [sp, #4]
 80071fc:	429e      	cmp	r6, r3
 80071fe:	f67f aee7 	bls.w	8006fd0 <_scanf_float+0x84>
 8007202:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007206:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800720a:	464a      	mov	r2, r9
 800720c:	4640      	mov	r0, r8
 800720e:	4798      	blx	r3
 8007210:	6923      	ldr	r3, [r4, #16]
 8007212:	3b01      	subs	r3, #1
 8007214:	6123      	str	r3, [r4, #16]
 8007216:	e7f0      	b.n	80071fa <_scanf_float+0x2ae>
 8007218:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800721c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007220:	464a      	mov	r2, r9
 8007222:	4640      	mov	r0, r8
 8007224:	4798      	blx	r3
 8007226:	6923      	ldr	r3, [r4, #16]
 8007228:	3b01      	subs	r3, #1
 800722a:	6123      	str	r3, [r4, #16]
 800722c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007230:	fa5f fa8a 	uxtb.w	sl, sl
 8007234:	f1ba 0f02 	cmp.w	sl, #2
 8007238:	d1ee      	bne.n	8007218 <_scanf_float+0x2cc>
 800723a:	3d03      	subs	r5, #3
 800723c:	b2ed      	uxtb	r5, r5
 800723e:	1b76      	subs	r6, r6, r5
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	05da      	lsls	r2, r3, #23
 8007244:	d530      	bpl.n	80072a8 <_scanf_float+0x35c>
 8007246:	055b      	lsls	r3, r3, #21
 8007248:	d511      	bpl.n	800726e <_scanf_float+0x322>
 800724a:	9b01      	ldr	r3, [sp, #4]
 800724c:	429e      	cmp	r6, r3
 800724e:	f67f aebf 	bls.w	8006fd0 <_scanf_float+0x84>
 8007252:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007256:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800725a:	464a      	mov	r2, r9
 800725c:	4640      	mov	r0, r8
 800725e:	4798      	blx	r3
 8007260:	6923      	ldr	r3, [r4, #16]
 8007262:	3b01      	subs	r3, #1
 8007264:	6123      	str	r3, [r4, #16]
 8007266:	e7f0      	b.n	800724a <_scanf_float+0x2fe>
 8007268:	46aa      	mov	sl, r5
 800726a:	46b3      	mov	fp, r6
 800726c:	e7de      	b.n	800722c <_scanf_float+0x2e0>
 800726e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007272:	6923      	ldr	r3, [r4, #16]
 8007274:	2965      	cmp	r1, #101	@ 0x65
 8007276:	f103 33ff 	add.w	r3, r3, #4294967295
 800727a:	f106 35ff 	add.w	r5, r6, #4294967295
 800727e:	6123      	str	r3, [r4, #16]
 8007280:	d00c      	beq.n	800729c <_scanf_float+0x350>
 8007282:	2945      	cmp	r1, #69	@ 0x45
 8007284:	d00a      	beq.n	800729c <_scanf_float+0x350>
 8007286:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800728a:	464a      	mov	r2, r9
 800728c:	4640      	mov	r0, r8
 800728e:	4798      	blx	r3
 8007290:	6923      	ldr	r3, [r4, #16]
 8007292:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007296:	3b01      	subs	r3, #1
 8007298:	1eb5      	subs	r5, r6, #2
 800729a:	6123      	str	r3, [r4, #16]
 800729c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072a0:	464a      	mov	r2, r9
 80072a2:	4640      	mov	r0, r8
 80072a4:	4798      	blx	r3
 80072a6:	462e      	mov	r6, r5
 80072a8:	6822      	ldr	r2, [r4, #0]
 80072aa:	f012 0210 	ands.w	r2, r2, #16
 80072ae:	d001      	beq.n	80072b4 <_scanf_float+0x368>
 80072b0:	2000      	movs	r0, #0
 80072b2:	e68e      	b.n	8006fd2 <_scanf_float+0x86>
 80072b4:	7032      	strb	r2, [r6, #0]
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80072bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072c0:	d125      	bne.n	800730e <_scanf_float+0x3c2>
 80072c2:	9b02      	ldr	r3, [sp, #8]
 80072c4:	429f      	cmp	r7, r3
 80072c6:	d00a      	beq.n	80072de <_scanf_float+0x392>
 80072c8:	1bda      	subs	r2, r3, r7
 80072ca:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80072ce:	429e      	cmp	r6, r3
 80072d0:	bf28      	it	cs
 80072d2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80072d6:	4922      	ldr	r1, [pc, #136]	@ (8007360 <_scanf_float+0x414>)
 80072d8:	4630      	mov	r0, r6
 80072da:	f000 f919 	bl	8007510 <siprintf>
 80072de:	9901      	ldr	r1, [sp, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	4640      	mov	r0, r8
 80072e4:	f002 fc04 	bl	8009af0 <_strtod_r>
 80072e8:	9b03      	ldr	r3, [sp, #12]
 80072ea:	6821      	ldr	r1, [r4, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f011 0f02 	tst.w	r1, #2
 80072f2:	ec57 6b10 	vmov	r6, r7, d0
 80072f6:	f103 0204 	add.w	r2, r3, #4
 80072fa:	d015      	beq.n	8007328 <_scanf_float+0x3dc>
 80072fc:	9903      	ldr	r1, [sp, #12]
 80072fe:	600a      	str	r2, [r1, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	e9c3 6700 	strd	r6, r7, [r3]
 8007306:	68e3      	ldr	r3, [r4, #12]
 8007308:	3301      	adds	r3, #1
 800730a:	60e3      	str	r3, [r4, #12]
 800730c:	e7d0      	b.n	80072b0 <_scanf_float+0x364>
 800730e:	9b04      	ldr	r3, [sp, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d0e4      	beq.n	80072de <_scanf_float+0x392>
 8007314:	9905      	ldr	r1, [sp, #20]
 8007316:	230a      	movs	r3, #10
 8007318:	3101      	adds	r1, #1
 800731a:	4640      	mov	r0, r8
 800731c:	f002 fc68 	bl	8009bf0 <_strtol_r>
 8007320:	9b04      	ldr	r3, [sp, #16]
 8007322:	9e05      	ldr	r6, [sp, #20]
 8007324:	1ac2      	subs	r2, r0, r3
 8007326:	e7d0      	b.n	80072ca <_scanf_float+0x37e>
 8007328:	f011 0f04 	tst.w	r1, #4
 800732c:	9903      	ldr	r1, [sp, #12]
 800732e:	600a      	str	r2, [r1, #0]
 8007330:	d1e6      	bne.n	8007300 <_scanf_float+0x3b4>
 8007332:	681d      	ldr	r5, [r3, #0]
 8007334:	4632      	mov	r2, r6
 8007336:	463b      	mov	r3, r7
 8007338:	4630      	mov	r0, r6
 800733a:	4639      	mov	r1, r7
 800733c:	f7f9 fc16 	bl	8000b6c <__aeabi_dcmpun>
 8007340:	b128      	cbz	r0, 800734e <_scanf_float+0x402>
 8007342:	4808      	ldr	r0, [pc, #32]	@ (8007364 <_scanf_float+0x418>)
 8007344:	f000 f9ca 	bl	80076dc <nanf>
 8007348:	ed85 0a00 	vstr	s0, [r5]
 800734c:	e7db      	b.n	8007306 <_scanf_float+0x3ba>
 800734e:	4630      	mov	r0, r6
 8007350:	4639      	mov	r1, r7
 8007352:	f7f9 fc69 	bl	8000c28 <__aeabi_d2f>
 8007356:	6028      	str	r0, [r5, #0]
 8007358:	e7d5      	b.n	8007306 <_scanf_float+0x3ba>
 800735a:	2700      	movs	r7, #0
 800735c:	e62e      	b.n	8006fbc <_scanf_float+0x70>
 800735e:	bf00      	nop
 8007360:	0800ae68 	.word	0x0800ae68
 8007364:	0800afa9 	.word	0x0800afa9

08007368 <std>:
 8007368:	2300      	movs	r3, #0
 800736a:	b510      	push	{r4, lr}
 800736c:	4604      	mov	r4, r0
 800736e:	e9c0 3300 	strd	r3, r3, [r0]
 8007372:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007376:	6083      	str	r3, [r0, #8]
 8007378:	8181      	strh	r1, [r0, #12]
 800737a:	6643      	str	r3, [r0, #100]	@ 0x64
 800737c:	81c2      	strh	r2, [r0, #14]
 800737e:	6183      	str	r3, [r0, #24]
 8007380:	4619      	mov	r1, r3
 8007382:	2208      	movs	r2, #8
 8007384:	305c      	adds	r0, #92	@ 0x5c
 8007386:	f000 f928 	bl	80075da <memset>
 800738a:	4b0d      	ldr	r3, [pc, #52]	@ (80073c0 <std+0x58>)
 800738c:	6263      	str	r3, [r4, #36]	@ 0x24
 800738e:	4b0d      	ldr	r3, [pc, #52]	@ (80073c4 <std+0x5c>)
 8007390:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007392:	4b0d      	ldr	r3, [pc, #52]	@ (80073c8 <std+0x60>)
 8007394:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007396:	4b0d      	ldr	r3, [pc, #52]	@ (80073cc <std+0x64>)
 8007398:	6323      	str	r3, [r4, #48]	@ 0x30
 800739a:	4b0d      	ldr	r3, [pc, #52]	@ (80073d0 <std+0x68>)
 800739c:	6224      	str	r4, [r4, #32]
 800739e:	429c      	cmp	r4, r3
 80073a0:	d006      	beq.n	80073b0 <std+0x48>
 80073a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80073a6:	4294      	cmp	r4, r2
 80073a8:	d002      	beq.n	80073b0 <std+0x48>
 80073aa:	33d0      	adds	r3, #208	@ 0xd0
 80073ac:	429c      	cmp	r4, r3
 80073ae:	d105      	bne.n	80073bc <std+0x54>
 80073b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80073b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073b8:	f000 b98c 	b.w	80076d4 <__retarget_lock_init_recursive>
 80073bc:	bd10      	pop	{r4, pc}
 80073be:	bf00      	nop
 80073c0:	08007555 	.word	0x08007555
 80073c4:	08007577 	.word	0x08007577
 80073c8:	080075af 	.word	0x080075af
 80073cc:	080075d3 	.word	0x080075d3
 80073d0:	20000628 	.word	0x20000628

080073d4 <stdio_exit_handler>:
 80073d4:	4a02      	ldr	r2, [pc, #8]	@ (80073e0 <stdio_exit_handler+0xc>)
 80073d6:	4903      	ldr	r1, [pc, #12]	@ (80073e4 <stdio_exit_handler+0x10>)
 80073d8:	4803      	ldr	r0, [pc, #12]	@ (80073e8 <stdio_exit_handler+0x14>)
 80073da:	f000 b869 	b.w	80074b0 <_fwalk_sglue>
 80073de:	bf00      	nop
 80073e0:	20000018 	.word	0x20000018
 80073e4:	0800a231 	.word	0x0800a231
 80073e8:	20000028 	.word	0x20000028

080073ec <cleanup_stdio>:
 80073ec:	6841      	ldr	r1, [r0, #4]
 80073ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007420 <cleanup_stdio+0x34>)
 80073f0:	4299      	cmp	r1, r3
 80073f2:	b510      	push	{r4, lr}
 80073f4:	4604      	mov	r4, r0
 80073f6:	d001      	beq.n	80073fc <cleanup_stdio+0x10>
 80073f8:	f002 ff1a 	bl	800a230 <_fflush_r>
 80073fc:	68a1      	ldr	r1, [r4, #8]
 80073fe:	4b09      	ldr	r3, [pc, #36]	@ (8007424 <cleanup_stdio+0x38>)
 8007400:	4299      	cmp	r1, r3
 8007402:	d002      	beq.n	800740a <cleanup_stdio+0x1e>
 8007404:	4620      	mov	r0, r4
 8007406:	f002 ff13 	bl	800a230 <_fflush_r>
 800740a:	68e1      	ldr	r1, [r4, #12]
 800740c:	4b06      	ldr	r3, [pc, #24]	@ (8007428 <cleanup_stdio+0x3c>)
 800740e:	4299      	cmp	r1, r3
 8007410:	d004      	beq.n	800741c <cleanup_stdio+0x30>
 8007412:	4620      	mov	r0, r4
 8007414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007418:	f002 bf0a 	b.w	800a230 <_fflush_r>
 800741c:	bd10      	pop	{r4, pc}
 800741e:	bf00      	nop
 8007420:	20000628 	.word	0x20000628
 8007424:	20000690 	.word	0x20000690
 8007428:	200006f8 	.word	0x200006f8

0800742c <global_stdio_init.part.0>:
 800742c:	b510      	push	{r4, lr}
 800742e:	4b0b      	ldr	r3, [pc, #44]	@ (800745c <global_stdio_init.part.0+0x30>)
 8007430:	4c0b      	ldr	r4, [pc, #44]	@ (8007460 <global_stdio_init.part.0+0x34>)
 8007432:	4a0c      	ldr	r2, [pc, #48]	@ (8007464 <global_stdio_init.part.0+0x38>)
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	4620      	mov	r0, r4
 8007438:	2200      	movs	r2, #0
 800743a:	2104      	movs	r1, #4
 800743c:	f7ff ff94 	bl	8007368 <std>
 8007440:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007444:	2201      	movs	r2, #1
 8007446:	2109      	movs	r1, #9
 8007448:	f7ff ff8e 	bl	8007368 <std>
 800744c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007450:	2202      	movs	r2, #2
 8007452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007456:	2112      	movs	r1, #18
 8007458:	f7ff bf86 	b.w	8007368 <std>
 800745c:	20000760 	.word	0x20000760
 8007460:	20000628 	.word	0x20000628
 8007464:	080073d5 	.word	0x080073d5

08007468 <__sfp_lock_acquire>:
 8007468:	4801      	ldr	r0, [pc, #4]	@ (8007470 <__sfp_lock_acquire+0x8>)
 800746a:	f000 b934 	b.w	80076d6 <__retarget_lock_acquire_recursive>
 800746e:	bf00      	nop
 8007470:	20000769 	.word	0x20000769

08007474 <__sfp_lock_release>:
 8007474:	4801      	ldr	r0, [pc, #4]	@ (800747c <__sfp_lock_release+0x8>)
 8007476:	f000 b92f 	b.w	80076d8 <__retarget_lock_release_recursive>
 800747a:	bf00      	nop
 800747c:	20000769 	.word	0x20000769

08007480 <__sinit>:
 8007480:	b510      	push	{r4, lr}
 8007482:	4604      	mov	r4, r0
 8007484:	f7ff fff0 	bl	8007468 <__sfp_lock_acquire>
 8007488:	6a23      	ldr	r3, [r4, #32]
 800748a:	b11b      	cbz	r3, 8007494 <__sinit+0x14>
 800748c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007490:	f7ff bff0 	b.w	8007474 <__sfp_lock_release>
 8007494:	4b04      	ldr	r3, [pc, #16]	@ (80074a8 <__sinit+0x28>)
 8007496:	6223      	str	r3, [r4, #32]
 8007498:	4b04      	ldr	r3, [pc, #16]	@ (80074ac <__sinit+0x2c>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1f5      	bne.n	800748c <__sinit+0xc>
 80074a0:	f7ff ffc4 	bl	800742c <global_stdio_init.part.0>
 80074a4:	e7f2      	b.n	800748c <__sinit+0xc>
 80074a6:	bf00      	nop
 80074a8:	080073ed 	.word	0x080073ed
 80074ac:	20000760 	.word	0x20000760

080074b0 <_fwalk_sglue>:
 80074b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b4:	4607      	mov	r7, r0
 80074b6:	4688      	mov	r8, r1
 80074b8:	4614      	mov	r4, r2
 80074ba:	2600      	movs	r6, #0
 80074bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074c0:	f1b9 0901 	subs.w	r9, r9, #1
 80074c4:	d505      	bpl.n	80074d2 <_fwalk_sglue+0x22>
 80074c6:	6824      	ldr	r4, [r4, #0]
 80074c8:	2c00      	cmp	r4, #0
 80074ca:	d1f7      	bne.n	80074bc <_fwalk_sglue+0xc>
 80074cc:	4630      	mov	r0, r6
 80074ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074d2:	89ab      	ldrh	r3, [r5, #12]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d907      	bls.n	80074e8 <_fwalk_sglue+0x38>
 80074d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074dc:	3301      	adds	r3, #1
 80074de:	d003      	beq.n	80074e8 <_fwalk_sglue+0x38>
 80074e0:	4629      	mov	r1, r5
 80074e2:	4638      	mov	r0, r7
 80074e4:	47c0      	blx	r8
 80074e6:	4306      	orrs	r6, r0
 80074e8:	3568      	adds	r5, #104	@ 0x68
 80074ea:	e7e9      	b.n	80074c0 <_fwalk_sglue+0x10>

080074ec <iprintf>:
 80074ec:	b40f      	push	{r0, r1, r2, r3}
 80074ee:	b507      	push	{r0, r1, r2, lr}
 80074f0:	4906      	ldr	r1, [pc, #24]	@ (800750c <iprintf+0x20>)
 80074f2:	ab04      	add	r3, sp, #16
 80074f4:	6808      	ldr	r0, [r1, #0]
 80074f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80074fa:	6881      	ldr	r1, [r0, #8]
 80074fc:	9301      	str	r3, [sp, #4]
 80074fe:	f002 fcfb 	bl	8009ef8 <_vfiprintf_r>
 8007502:	b003      	add	sp, #12
 8007504:	f85d eb04 	ldr.w	lr, [sp], #4
 8007508:	b004      	add	sp, #16
 800750a:	4770      	bx	lr
 800750c:	20000024 	.word	0x20000024

08007510 <siprintf>:
 8007510:	b40e      	push	{r1, r2, r3}
 8007512:	b510      	push	{r4, lr}
 8007514:	b09d      	sub	sp, #116	@ 0x74
 8007516:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007518:	9002      	str	r0, [sp, #8]
 800751a:	9006      	str	r0, [sp, #24]
 800751c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007520:	480a      	ldr	r0, [pc, #40]	@ (800754c <siprintf+0x3c>)
 8007522:	9107      	str	r1, [sp, #28]
 8007524:	9104      	str	r1, [sp, #16]
 8007526:	490a      	ldr	r1, [pc, #40]	@ (8007550 <siprintf+0x40>)
 8007528:	f853 2b04 	ldr.w	r2, [r3], #4
 800752c:	9105      	str	r1, [sp, #20]
 800752e:	2400      	movs	r4, #0
 8007530:	a902      	add	r1, sp, #8
 8007532:	6800      	ldr	r0, [r0, #0]
 8007534:	9301      	str	r3, [sp, #4]
 8007536:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007538:	f002 fbb8 	bl	8009cac <_svfiprintf_r>
 800753c:	9b02      	ldr	r3, [sp, #8]
 800753e:	701c      	strb	r4, [r3, #0]
 8007540:	b01d      	add	sp, #116	@ 0x74
 8007542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007546:	b003      	add	sp, #12
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	20000024 	.word	0x20000024
 8007550:	ffff0208 	.word	0xffff0208

08007554 <__sread>:
 8007554:	b510      	push	{r4, lr}
 8007556:	460c      	mov	r4, r1
 8007558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800755c:	f000 f86c 	bl	8007638 <_read_r>
 8007560:	2800      	cmp	r0, #0
 8007562:	bfab      	itete	ge
 8007564:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007566:	89a3      	ldrhlt	r3, [r4, #12]
 8007568:	181b      	addge	r3, r3, r0
 800756a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800756e:	bfac      	ite	ge
 8007570:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007572:	81a3      	strhlt	r3, [r4, #12]
 8007574:	bd10      	pop	{r4, pc}

08007576 <__swrite>:
 8007576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800757a:	461f      	mov	r7, r3
 800757c:	898b      	ldrh	r3, [r1, #12]
 800757e:	05db      	lsls	r3, r3, #23
 8007580:	4605      	mov	r5, r0
 8007582:	460c      	mov	r4, r1
 8007584:	4616      	mov	r6, r2
 8007586:	d505      	bpl.n	8007594 <__swrite+0x1e>
 8007588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800758c:	2302      	movs	r3, #2
 800758e:	2200      	movs	r2, #0
 8007590:	f000 f840 	bl	8007614 <_lseek_r>
 8007594:	89a3      	ldrh	r3, [r4, #12]
 8007596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800759a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800759e:	81a3      	strh	r3, [r4, #12]
 80075a0:	4632      	mov	r2, r6
 80075a2:	463b      	mov	r3, r7
 80075a4:	4628      	mov	r0, r5
 80075a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075aa:	f000 b857 	b.w	800765c <_write_r>

080075ae <__sseek>:
 80075ae:	b510      	push	{r4, lr}
 80075b0:	460c      	mov	r4, r1
 80075b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b6:	f000 f82d 	bl	8007614 <_lseek_r>
 80075ba:	1c43      	adds	r3, r0, #1
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	bf15      	itete	ne
 80075c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80075c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80075c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80075ca:	81a3      	strheq	r3, [r4, #12]
 80075cc:	bf18      	it	ne
 80075ce:	81a3      	strhne	r3, [r4, #12]
 80075d0:	bd10      	pop	{r4, pc}

080075d2 <__sclose>:
 80075d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075d6:	f000 b80d 	b.w	80075f4 <_close_r>

080075da <memset>:
 80075da:	4402      	add	r2, r0
 80075dc:	4603      	mov	r3, r0
 80075de:	4293      	cmp	r3, r2
 80075e0:	d100      	bne.n	80075e4 <memset+0xa>
 80075e2:	4770      	bx	lr
 80075e4:	f803 1b01 	strb.w	r1, [r3], #1
 80075e8:	e7f9      	b.n	80075de <memset+0x4>
	...

080075ec <_localeconv_r>:
 80075ec:	4800      	ldr	r0, [pc, #0]	@ (80075f0 <_localeconv_r+0x4>)
 80075ee:	4770      	bx	lr
 80075f0:	20000164 	.word	0x20000164

080075f4 <_close_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4d06      	ldr	r5, [pc, #24]	@ (8007610 <_close_r+0x1c>)
 80075f8:	2300      	movs	r3, #0
 80075fa:	4604      	mov	r4, r0
 80075fc:	4608      	mov	r0, r1
 80075fe:	602b      	str	r3, [r5, #0]
 8007600:	f7fb f912 	bl	8002828 <_close>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	d102      	bne.n	800760e <_close_r+0x1a>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	b103      	cbz	r3, 800760e <_close_r+0x1a>
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	bd38      	pop	{r3, r4, r5, pc}
 8007610:	20000764 	.word	0x20000764

08007614 <_lseek_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	4d07      	ldr	r5, [pc, #28]	@ (8007634 <_lseek_r+0x20>)
 8007618:	4604      	mov	r4, r0
 800761a:	4608      	mov	r0, r1
 800761c:	4611      	mov	r1, r2
 800761e:	2200      	movs	r2, #0
 8007620:	602a      	str	r2, [r5, #0]
 8007622:	461a      	mov	r2, r3
 8007624:	f7fb f927 	bl	8002876 <_lseek>
 8007628:	1c43      	adds	r3, r0, #1
 800762a:	d102      	bne.n	8007632 <_lseek_r+0x1e>
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	b103      	cbz	r3, 8007632 <_lseek_r+0x1e>
 8007630:	6023      	str	r3, [r4, #0]
 8007632:	bd38      	pop	{r3, r4, r5, pc}
 8007634:	20000764 	.word	0x20000764

08007638 <_read_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4d07      	ldr	r5, [pc, #28]	@ (8007658 <_read_r+0x20>)
 800763c:	4604      	mov	r4, r0
 800763e:	4608      	mov	r0, r1
 8007640:	4611      	mov	r1, r2
 8007642:	2200      	movs	r2, #0
 8007644:	602a      	str	r2, [r5, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	f7fb f8d1 	bl	80027ee <_read>
 800764c:	1c43      	adds	r3, r0, #1
 800764e:	d102      	bne.n	8007656 <_read_r+0x1e>
 8007650:	682b      	ldr	r3, [r5, #0]
 8007652:	b103      	cbz	r3, 8007656 <_read_r+0x1e>
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	bd38      	pop	{r3, r4, r5, pc}
 8007658:	20000764 	.word	0x20000764

0800765c <_write_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	4d07      	ldr	r5, [pc, #28]	@ (800767c <_write_r+0x20>)
 8007660:	4604      	mov	r4, r0
 8007662:	4608      	mov	r0, r1
 8007664:	4611      	mov	r1, r2
 8007666:	2200      	movs	r2, #0
 8007668:	602a      	str	r2, [r5, #0]
 800766a:	461a      	mov	r2, r3
 800766c:	f7f9 fcf8 	bl	8001060 <_write>
 8007670:	1c43      	adds	r3, r0, #1
 8007672:	d102      	bne.n	800767a <_write_r+0x1e>
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	b103      	cbz	r3, 800767a <_write_r+0x1e>
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	bd38      	pop	{r3, r4, r5, pc}
 800767c:	20000764 	.word	0x20000764

08007680 <__errno>:
 8007680:	4b01      	ldr	r3, [pc, #4]	@ (8007688 <__errno+0x8>)
 8007682:	6818      	ldr	r0, [r3, #0]
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	20000024 	.word	0x20000024

0800768c <__libc_init_array>:
 800768c:	b570      	push	{r4, r5, r6, lr}
 800768e:	4d0d      	ldr	r5, [pc, #52]	@ (80076c4 <__libc_init_array+0x38>)
 8007690:	4c0d      	ldr	r4, [pc, #52]	@ (80076c8 <__libc_init_array+0x3c>)
 8007692:	1b64      	subs	r4, r4, r5
 8007694:	10a4      	asrs	r4, r4, #2
 8007696:	2600      	movs	r6, #0
 8007698:	42a6      	cmp	r6, r4
 800769a:	d109      	bne.n	80076b0 <__libc_init_array+0x24>
 800769c:	4d0b      	ldr	r5, [pc, #44]	@ (80076cc <__libc_init_array+0x40>)
 800769e:	4c0c      	ldr	r4, [pc, #48]	@ (80076d0 <__libc_init_array+0x44>)
 80076a0:	f003 fb78 	bl	800ad94 <_init>
 80076a4:	1b64      	subs	r4, r4, r5
 80076a6:	10a4      	asrs	r4, r4, #2
 80076a8:	2600      	movs	r6, #0
 80076aa:	42a6      	cmp	r6, r4
 80076ac:	d105      	bne.n	80076ba <__libc_init_array+0x2e>
 80076ae:	bd70      	pop	{r4, r5, r6, pc}
 80076b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076b4:	4798      	blx	r3
 80076b6:	3601      	adds	r6, #1
 80076b8:	e7ee      	b.n	8007698 <__libc_init_array+0xc>
 80076ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80076be:	4798      	blx	r3
 80076c0:	3601      	adds	r6, #1
 80076c2:	e7f2      	b.n	80076aa <__libc_init_array+0x1e>
 80076c4:	0800b264 	.word	0x0800b264
 80076c8:	0800b264 	.word	0x0800b264
 80076cc:	0800b264 	.word	0x0800b264
 80076d0:	0800b268 	.word	0x0800b268

080076d4 <__retarget_lock_init_recursive>:
 80076d4:	4770      	bx	lr

080076d6 <__retarget_lock_acquire_recursive>:
 80076d6:	4770      	bx	lr

080076d8 <__retarget_lock_release_recursive>:
 80076d8:	4770      	bx	lr
	...

080076dc <nanf>:
 80076dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80076e4 <nanf+0x8>
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	7fc00000 	.word	0x7fc00000

080076e8 <quorem>:
 80076e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	6903      	ldr	r3, [r0, #16]
 80076ee:	690c      	ldr	r4, [r1, #16]
 80076f0:	42a3      	cmp	r3, r4
 80076f2:	4607      	mov	r7, r0
 80076f4:	db7e      	blt.n	80077f4 <quorem+0x10c>
 80076f6:	3c01      	subs	r4, #1
 80076f8:	f101 0814 	add.w	r8, r1, #20
 80076fc:	00a3      	lsls	r3, r4, #2
 80076fe:	f100 0514 	add.w	r5, r0, #20
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007708:	9301      	str	r3, [sp, #4]
 800770a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800770e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007712:	3301      	adds	r3, #1
 8007714:	429a      	cmp	r2, r3
 8007716:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800771a:	fbb2 f6f3 	udiv	r6, r2, r3
 800771e:	d32e      	bcc.n	800777e <quorem+0x96>
 8007720:	f04f 0a00 	mov.w	sl, #0
 8007724:	46c4      	mov	ip, r8
 8007726:	46ae      	mov	lr, r5
 8007728:	46d3      	mov	fp, sl
 800772a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800772e:	b298      	uxth	r0, r3
 8007730:	fb06 a000 	mla	r0, r6, r0, sl
 8007734:	0c02      	lsrs	r2, r0, #16
 8007736:	0c1b      	lsrs	r3, r3, #16
 8007738:	fb06 2303 	mla	r3, r6, r3, r2
 800773c:	f8de 2000 	ldr.w	r2, [lr]
 8007740:	b280      	uxth	r0, r0
 8007742:	b292      	uxth	r2, r2
 8007744:	1a12      	subs	r2, r2, r0
 8007746:	445a      	add	r2, fp
 8007748:	f8de 0000 	ldr.w	r0, [lr]
 800774c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007750:	b29b      	uxth	r3, r3
 8007752:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007756:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800775a:	b292      	uxth	r2, r2
 800775c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007760:	45e1      	cmp	r9, ip
 8007762:	f84e 2b04 	str.w	r2, [lr], #4
 8007766:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800776a:	d2de      	bcs.n	800772a <quorem+0x42>
 800776c:	9b00      	ldr	r3, [sp, #0]
 800776e:	58eb      	ldr	r3, [r5, r3]
 8007770:	b92b      	cbnz	r3, 800777e <quorem+0x96>
 8007772:	9b01      	ldr	r3, [sp, #4]
 8007774:	3b04      	subs	r3, #4
 8007776:	429d      	cmp	r5, r3
 8007778:	461a      	mov	r2, r3
 800777a:	d32f      	bcc.n	80077dc <quorem+0xf4>
 800777c:	613c      	str	r4, [r7, #16]
 800777e:	4638      	mov	r0, r7
 8007780:	f001 f9c6 	bl	8008b10 <__mcmp>
 8007784:	2800      	cmp	r0, #0
 8007786:	db25      	blt.n	80077d4 <quorem+0xec>
 8007788:	4629      	mov	r1, r5
 800778a:	2000      	movs	r0, #0
 800778c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007790:	f8d1 c000 	ldr.w	ip, [r1]
 8007794:	fa1f fe82 	uxth.w	lr, r2
 8007798:	fa1f f38c 	uxth.w	r3, ip
 800779c:	eba3 030e 	sub.w	r3, r3, lr
 80077a0:	4403      	add	r3, r0
 80077a2:	0c12      	lsrs	r2, r2, #16
 80077a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80077a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077b2:	45c1      	cmp	r9, r8
 80077b4:	f841 3b04 	str.w	r3, [r1], #4
 80077b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80077bc:	d2e6      	bcs.n	800778c <quorem+0xa4>
 80077be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077c6:	b922      	cbnz	r2, 80077d2 <quorem+0xea>
 80077c8:	3b04      	subs	r3, #4
 80077ca:	429d      	cmp	r5, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	d30b      	bcc.n	80077e8 <quorem+0x100>
 80077d0:	613c      	str	r4, [r7, #16]
 80077d2:	3601      	adds	r6, #1
 80077d4:	4630      	mov	r0, r6
 80077d6:	b003      	add	sp, #12
 80077d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077dc:	6812      	ldr	r2, [r2, #0]
 80077de:	3b04      	subs	r3, #4
 80077e0:	2a00      	cmp	r2, #0
 80077e2:	d1cb      	bne.n	800777c <quorem+0x94>
 80077e4:	3c01      	subs	r4, #1
 80077e6:	e7c6      	b.n	8007776 <quorem+0x8e>
 80077e8:	6812      	ldr	r2, [r2, #0]
 80077ea:	3b04      	subs	r3, #4
 80077ec:	2a00      	cmp	r2, #0
 80077ee:	d1ef      	bne.n	80077d0 <quorem+0xe8>
 80077f0:	3c01      	subs	r4, #1
 80077f2:	e7ea      	b.n	80077ca <quorem+0xe2>
 80077f4:	2000      	movs	r0, #0
 80077f6:	e7ee      	b.n	80077d6 <quorem+0xee>

080077f8 <_dtoa_r>:
 80077f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fc:	69c7      	ldr	r7, [r0, #28]
 80077fe:	b097      	sub	sp, #92	@ 0x5c
 8007800:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007804:	ec55 4b10 	vmov	r4, r5, d0
 8007808:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800780a:	9107      	str	r1, [sp, #28]
 800780c:	4681      	mov	r9, r0
 800780e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007810:	9311      	str	r3, [sp, #68]	@ 0x44
 8007812:	b97f      	cbnz	r7, 8007834 <_dtoa_r+0x3c>
 8007814:	2010      	movs	r0, #16
 8007816:	f000 fe09 	bl	800842c <malloc>
 800781a:	4602      	mov	r2, r0
 800781c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007820:	b920      	cbnz	r0, 800782c <_dtoa_r+0x34>
 8007822:	4ba9      	ldr	r3, [pc, #676]	@ (8007ac8 <_dtoa_r+0x2d0>)
 8007824:	21ef      	movs	r1, #239	@ 0xef
 8007826:	48a9      	ldr	r0, [pc, #676]	@ (8007acc <_dtoa_r+0x2d4>)
 8007828:	f002 fe12 	bl	800a450 <__assert_func>
 800782c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007830:	6007      	str	r7, [r0, #0]
 8007832:	60c7      	str	r7, [r0, #12]
 8007834:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007838:	6819      	ldr	r1, [r3, #0]
 800783a:	b159      	cbz	r1, 8007854 <_dtoa_r+0x5c>
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	604a      	str	r2, [r1, #4]
 8007840:	2301      	movs	r3, #1
 8007842:	4093      	lsls	r3, r2
 8007844:	608b      	str	r3, [r1, #8]
 8007846:	4648      	mov	r0, r9
 8007848:	f000 fee6 	bl	8008618 <_Bfree>
 800784c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007850:	2200      	movs	r2, #0
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	1e2b      	subs	r3, r5, #0
 8007856:	bfb9      	ittee	lt
 8007858:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800785c:	9305      	strlt	r3, [sp, #20]
 800785e:	2300      	movge	r3, #0
 8007860:	6033      	strge	r3, [r6, #0]
 8007862:	9f05      	ldr	r7, [sp, #20]
 8007864:	4b9a      	ldr	r3, [pc, #616]	@ (8007ad0 <_dtoa_r+0x2d8>)
 8007866:	bfbc      	itt	lt
 8007868:	2201      	movlt	r2, #1
 800786a:	6032      	strlt	r2, [r6, #0]
 800786c:	43bb      	bics	r3, r7
 800786e:	d112      	bne.n	8007896 <_dtoa_r+0x9e>
 8007870:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007872:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800787c:	4323      	orrs	r3, r4
 800787e:	f000 855a 	beq.w	8008336 <_dtoa_r+0xb3e>
 8007882:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007884:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007ae4 <_dtoa_r+0x2ec>
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 855c 	beq.w	8008346 <_dtoa_r+0xb4e>
 800788e:	f10a 0303 	add.w	r3, sl, #3
 8007892:	f000 bd56 	b.w	8008342 <_dtoa_r+0xb4a>
 8007896:	ed9d 7b04 	vldr	d7, [sp, #16]
 800789a:	2200      	movs	r2, #0
 800789c:	ec51 0b17 	vmov	r0, r1, d7
 80078a0:	2300      	movs	r3, #0
 80078a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80078a6:	f7f9 f92f 	bl	8000b08 <__aeabi_dcmpeq>
 80078aa:	4680      	mov	r8, r0
 80078ac:	b158      	cbz	r0, 80078c6 <_dtoa_r+0xce>
 80078ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80078b0:	2301      	movs	r3, #1
 80078b2:	6013      	str	r3, [r2, #0]
 80078b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80078b6:	b113      	cbz	r3, 80078be <_dtoa_r+0xc6>
 80078b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80078ba:	4b86      	ldr	r3, [pc, #536]	@ (8007ad4 <_dtoa_r+0x2dc>)
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007ae8 <_dtoa_r+0x2f0>
 80078c2:	f000 bd40 	b.w	8008346 <_dtoa_r+0xb4e>
 80078c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80078ca:	aa14      	add	r2, sp, #80	@ 0x50
 80078cc:	a915      	add	r1, sp, #84	@ 0x54
 80078ce:	4648      	mov	r0, r9
 80078d0:	f001 fa3e 	bl	8008d50 <__d2b>
 80078d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80078d8:	9002      	str	r0, [sp, #8]
 80078da:	2e00      	cmp	r6, #0
 80078dc:	d078      	beq.n	80079d0 <_dtoa_r+0x1d8>
 80078de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80078e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80078ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80078f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80078f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80078f8:	4619      	mov	r1, r3
 80078fa:	2200      	movs	r2, #0
 80078fc:	4b76      	ldr	r3, [pc, #472]	@ (8007ad8 <_dtoa_r+0x2e0>)
 80078fe:	f7f8 fce3 	bl	80002c8 <__aeabi_dsub>
 8007902:	a36b      	add	r3, pc, #428	@ (adr r3, 8007ab0 <_dtoa_r+0x2b8>)
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	f7f8 fe96 	bl	8000638 <__aeabi_dmul>
 800790c:	a36a      	add	r3, pc, #424	@ (adr r3, 8007ab8 <_dtoa_r+0x2c0>)
 800790e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007912:	f7f8 fcdb 	bl	80002cc <__adddf3>
 8007916:	4604      	mov	r4, r0
 8007918:	4630      	mov	r0, r6
 800791a:	460d      	mov	r5, r1
 800791c:	f7f8 fe22 	bl	8000564 <__aeabi_i2d>
 8007920:	a367      	add	r3, pc, #412	@ (adr r3, 8007ac0 <_dtoa_r+0x2c8>)
 8007922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007926:	f7f8 fe87 	bl	8000638 <__aeabi_dmul>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	4620      	mov	r0, r4
 8007930:	4629      	mov	r1, r5
 8007932:	f7f8 fccb 	bl	80002cc <__adddf3>
 8007936:	4604      	mov	r4, r0
 8007938:	460d      	mov	r5, r1
 800793a:	f7f9 f92d 	bl	8000b98 <__aeabi_d2iz>
 800793e:	2200      	movs	r2, #0
 8007940:	4607      	mov	r7, r0
 8007942:	2300      	movs	r3, #0
 8007944:	4620      	mov	r0, r4
 8007946:	4629      	mov	r1, r5
 8007948:	f7f9 f8e8 	bl	8000b1c <__aeabi_dcmplt>
 800794c:	b140      	cbz	r0, 8007960 <_dtoa_r+0x168>
 800794e:	4638      	mov	r0, r7
 8007950:	f7f8 fe08 	bl	8000564 <__aeabi_i2d>
 8007954:	4622      	mov	r2, r4
 8007956:	462b      	mov	r3, r5
 8007958:	f7f9 f8d6 	bl	8000b08 <__aeabi_dcmpeq>
 800795c:	b900      	cbnz	r0, 8007960 <_dtoa_r+0x168>
 800795e:	3f01      	subs	r7, #1
 8007960:	2f16      	cmp	r7, #22
 8007962:	d852      	bhi.n	8007a0a <_dtoa_r+0x212>
 8007964:	4b5d      	ldr	r3, [pc, #372]	@ (8007adc <_dtoa_r+0x2e4>)
 8007966:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800796a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007972:	f7f9 f8d3 	bl	8000b1c <__aeabi_dcmplt>
 8007976:	2800      	cmp	r0, #0
 8007978:	d049      	beq.n	8007a0e <_dtoa_r+0x216>
 800797a:	3f01      	subs	r7, #1
 800797c:	2300      	movs	r3, #0
 800797e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007980:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007982:	1b9b      	subs	r3, r3, r6
 8007984:	1e5a      	subs	r2, r3, #1
 8007986:	bf45      	ittet	mi
 8007988:	f1c3 0301 	rsbmi	r3, r3, #1
 800798c:	9300      	strmi	r3, [sp, #0]
 800798e:	2300      	movpl	r3, #0
 8007990:	2300      	movmi	r3, #0
 8007992:	9206      	str	r2, [sp, #24]
 8007994:	bf54      	ite	pl
 8007996:	9300      	strpl	r3, [sp, #0]
 8007998:	9306      	strmi	r3, [sp, #24]
 800799a:	2f00      	cmp	r7, #0
 800799c:	db39      	blt.n	8007a12 <_dtoa_r+0x21a>
 800799e:	9b06      	ldr	r3, [sp, #24]
 80079a0:	970d      	str	r7, [sp, #52]	@ 0x34
 80079a2:	443b      	add	r3, r7
 80079a4:	9306      	str	r3, [sp, #24]
 80079a6:	2300      	movs	r3, #0
 80079a8:	9308      	str	r3, [sp, #32]
 80079aa:	9b07      	ldr	r3, [sp, #28]
 80079ac:	2b09      	cmp	r3, #9
 80079ae:	d863      	bhi.n	8007a78 <_dtoa_r+0x280>
 80079b0:	2b05      	cmp	r3, #5
 80079b2:	bfc4      	itt	gt
 80079b4:	3b04      	subgt	r3, #4
 80079b6:	9307      	strgt	r3, [sp, #28]
 80079b8:	9b07      	ldr	r3, [sp, #28]
 80079ba:	f1a3 0302 	sub.w	r3, r3, #2
 80079be:	bfcc      	ite	gt
 80079c0:	2400      	movgt	r4, #0
 80079c2:	2401      	movle	r4, #1
 80079c4:	2b03      	cmp	r3, #3
 80079c6:	d863      	bhi.n	8007a90 <_dtoa_r+0x298>
 80079c8:	e8df f003 	tbb	[pc, r3]
 80079cc:	2b375452 	.word	0x2b375452
 80079d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80079d4:	441e      	add	r6, r3
 80079d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80079da:	2b20      	cmp	r3, #32
 80079dc:	bfc1      	itttt	gt
 80079de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80079e2:	409f      	lslgt	r7, r3
 80079e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80079e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80079ec:	bfd6      	itet	le
 80079ee:	f1c3 0320 	rsble	r3, r3, #32
 80079f2:	ea47 0003 	orrgt.w	r0, r7, r3
 80079f6:	fa04 f003 	lslle.w	r0, r4, r3
 80079fa:	f7f8 fda3 	bl	8000544 <__aeabi_ui2d>
 80079fe:	2201      	movs	r2, #1
 8007a00:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007a04:	3e01      	subs	r6, #1
 8007a06:	9212      	str	r2, [sp, #72]	@ 0x48
 8007a08:	e776      	b.n	80078f8 <_dtoa_r+0x100>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e7b7      	b.n	800797e <_dtoa_r+0x186>
 8007a0e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007a10:	e7b6      	b.n	8007980 <_dtoa_r+0x188>
 8007a12:	9b00      	ldr	r3, [sp, #0]
 8007a14:	1bdb      	subs	r3, r3, r7
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	427b      	negs	r3, r7
 8007a1a:	9308      	str	r3, [sp, #32]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007a20:	e7c3      	b.n	80079aa <_dtoa_r+0x1b2>
 8007a22:	2301      	movs	r3, #1
 8007a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a28:	eb07 0b03 	add.w	fp, r7, r3
 8007a2c:	f10b 0301 	add.w	r3, fp, #1
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	9303      	str	r3, [sp, #12]
 8007a34:	bfb8      	it	lt
 8007a36:	2301      	movlt	r3, #1
 8007a38:	e006      	b.n	8007a48 <_dtoa_r+0x250>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	dd28      	ble.n	8007a96 <_dtoa_r+0x29e>
 8007a44:	469b      	mov	fp, r3
 8007a46:	9303      	str	r3, [sp, #12]
 8007a48:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	2204      	movs	r2, #4
 8007a50:	f102 0514 	add.w	r5, r2, #20
 8007a54:	429d      	cmp	r5, r3
 8007a56:	d926      	bls.n	8007aa6 <_dtoa_r+0x2ae>
 8007a58:	6041      	str	r1, [r0, #4]
 8007a5a:	4648      	mov	r0, r9
 8007a5c:	f000 fd9c 	bl	8008598 <_Balloc>
 8007a60:	4682      	mov	sl, r0
 8007a62:	2800      	cmp	r0, #0
 8007a64:	d142      	bne.n	8007aec <_dtoa_r+0x2f4>
 8007a66:	4b1e      	ldr	r3, [pc, #120]	@ (8007ae0 <_dtoa_r+0x2e8>)
 8007a68:	4602      	mov	r2, r0
 8007a6a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007a6e:	e6da      	b.n	8007826 <_dtoa_r+0x2e>
 8007a70:	2300      	movs	r3, #0
 8007a72:	e7e3      	b.n	8007a3c <_dtoa_r+0x244>
 8007a74:	2300      	movs	r3, #0
 8007a76:	e7d5      	b.n	8007a24 <_dtoa_r+0x22c>
 8007a78:	2401      	movs	r4, #1
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	9307      	str	r3, [sp, #28]
 8007a7e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007a80:	f04f 3bff 	mov.w	fp, #4294967295
 8007a84:	2200      	movs	r2, #0
 8007a86:	f8cd b00c 	str.w	fp, [sp, #12]
 8007a8a:	2312      	movs	r3, #18
 8007a8c:	920c      	str	r2, [sp, #48]	@ 0x30
 8007a8e:	e7db      	b.n	8007a48 <_dtoa_r+0x250>
 8007a90:	2301      	movs	r3, #1
 8007a92:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a94:	e7f4      	b.n	8007a80 <_dtoa_r+0x288>
 8007a96:	f04f 0b01 	mov.w	fp, #1
 8007a9a:	f8cd b00c 	str.w	fp, [sp, #12]
 8007a9e:	465b      	mov	r3, fp
 8007aa0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007aa4:	e7d0      	b.n	8007a48 <_dtoa_r+0x250>
 8007aa6:	3101      	adds	r1, #1
 8007aa8:	0052      	lsls	r2, r2, #1
 8007aaa:	e7d1      	b.n	8007a50 <_dtoa_r+0x258>
 8007aac:	f3af 8000 	nop.w
 8007ab0:	636f4361 	.word	0x636f4361
 8007ab4:	3fd287a7 	.word	0x3fd287a7
 8007ab8:	8b60c8b3 	.word	0x8b60c8b3
 8007abc:	3fc68a28 	.word	0x3fc68a28
 8007ac0:	509f79fb 	.word	0x509f79fb
 8007ac4:	3fd34413 	.word	0x3fd34413
 8007ac8:	0800ae7a 	.word	0x0800ae7a
 8007acc:	0800ae91 	.word	0x0800ae91
 8007ad0:	7ff00000 	.word	0x7ff00000
 8007ad4:	0800ae45 	.word	0x0800ae45
 8007ad8:	3ff80000 	.word	0x3ff80000
 8007adc:	0800b040 	.word	0x0800b040
 8007ae0:	0800aee9 	.word	0x0800aee9
 8007ae4:	0800ae76 	.word	0x0800ae76
 8007ae8:	0800ae44 	.word	0x0800ae44
 8007aec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007af0:	6018      	str	r0, [r3, #0]
 8007af2:	9b03      	ldr	r3, [sp, #12]
 8007af4:	2b0e      	cmp	r3, #14
 8007af6:	f200 80a1 	bhi.w	8007c3c <_dtoa_r+0x444>
 8007afa:	2c00      	cmp	r4, #0
 8007afc:	f000 809e 	beq.w	8007c3c <_dtoa_r+0x444>
 8007b00:	2f00      	cmp	r7, #0
 8007b02:	dd33      	ble.n	8007b6c <_dtoa_r+0x374>
 8007b04:	4b9c      	ldr	r3, [pc, #624]	@ (8007d78 <_dtoa_r+0x580>)
 8007b06:	f007 020f 	and.w	r2, r7, #15
 8007b0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b0e:	ed93 7b00 	vldr	d7, [r3]
 8007b12:	05f8      	lsls	r0, r7, #23
 8007b14:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007b18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007b1c:	d516      	bpl.n	8007b4c <_dtoa_r+0x354>
 8007b1e:	4b97      	ldr	r3, [pc, #604]	@ (8007d7c <_dtoa_r+0x584>)
 8007b20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b28:	f7f8 feb0 	bl	800088c <__aeabi_ddiv>
 8007b2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b30:	f004 040f 	and.w	r4, r4, #15
 8007b34:	2603      	movs	r6, #3
 8007b36:	4d91      	ldr	r5, [pc, #580]	@ (8007d7c <_dtoa_r+0x584>)
 8007b38:	b954      	cbnz	r4, 8007b50 <_dtoa_r+0x358>
 8007b3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007b3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b42:	f7f8 fea3 	bl	800088c <__aeabi_ddiv>
 8007b46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b4a:	e028      	b.n	8007b9e <_dtoa_r+0x3a6>
 8007b4c:	2602      	movs	r6, #2
 8007b4e:	e7f2      	b.n	8007b36 <_dtoa_r+0x33e>
 8007b50:	07e1      	lsls	r1, r4, #31
 8007b52:	d508      	bpl.n	8007b66 <_dtoa_r+0x36e>
 8007b54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007b58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b5c:	f7f8 fd6c 	bl	8000638 <__aeabi_dmul>
 8007b60:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007b64:	3601      	adds	r6, #1
 8007b66:	1064      	asrs	r4, r4, #1
 8007b68:	3508      	adds	r5, #8
 8007b6a:	e7e5      	b.n	8007b38 <_dtoa_r+0x340>
 8007b6c:	f000 80af 	beq.w	8007cce <_dtoa_r+0x4d6>
 8007b70:	427c      	negs	r4, r7
 8007b72:	4b81      	ldr	r3, [pc, #516]	@ (8007d78 <_dtoa_r+0x580>)
 8007b74:	4d81      	ldr	r5, [pc, #516]	@ (8007d7c <_dtoa_r+0x584>)
 8007b76:	f004 020f 	and.w	r2, r4, #15
 8007b7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b86:	f7f8 fd57 	bl	8000638 <__aeabi_dmul>
 8007b8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b8e:	1124      	asrs	r4, r4, #4
 8007b90:	2300      	movs	r3, #0
 8007b92:	2602      	movs	r6, #2
 8007b94:	2c00      	cmp	r4, #0
 8007b96:	f040 808f 	bne.w	8007cb8 <_dtoa_r+0x4c0>
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1d3      	bne.n	8007b46 <_dtoa_r+0x34e>
 8007b9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ba0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f000 8094 	beq.w	8007cd2 <_dtoa_r+0x4da>
 8007baa:	4b75      	ldr	r3, [pc, #468]	@ (8007d80 <_dtoa_r+0x588>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	4620      	mov	r0, r4
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	f7f8 ffb3 	bl	8000b1c <__aeabi_dcmplt>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	f000 808b 	beq.w	8007cd2 <_dtoa_r+0x4da>
 8007bbc:	9b03      	ldr	r3, [sp, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f000 8087 	beq.w	8007cd2 <_dtoa_r+0x4da>
 8007bc4:	f1bb 0f00 	cmp.w	fp, #0
 8007bc8:	dd34      	ble.n	8007c34 <_dtoa_r+0x43c>
 8007bca:	4620      	mov	r0, r4
 8007bcc:	4b6d      	ldr	r3, [pc, #436]	@ (8007d84 <_dtoa_r+0x58c>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	f7f8 fd31 	bl	8000638 <__aeabi_dmul>
 8007bd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bda:	f107 38ff 	add.w	r8, r7, #4294967295
 8007bde:	3601      	adds	r6, #1
 8007be0:	465c      	mov	r4, fp
 8007be2:	4630      	mov	r0, r6
 8007be4:	f7f8 fcbe 	bl	8000564 <__aeabi_i2d>
 8007be8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bec:	f7f8 fd24 	bl	8000638 <__aeabi_dmul>
 8007bf0:	4b65      	ldr	r3, [pc, #404]	@ (8007d88 <_dtoa_r+0x590>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f7f8 fb6a 	bl	80002cc <__adddf3>
 8007bf8:	4605      	mov	r5, r0
 8007bfa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007bfe:	2c00      	cmp	r4, #0
 8007c00:	d16a      	bne.n	8007cd8 <_dtoa_r+0x4e0>
 8007c02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c06:	4b61      	ldr	r3, [pc, #388]	@ (8007d8c <_dtoa_r+0x594>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f7f8 fb5d 	bl	80002c8 <__aeabi_dsub>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c16:	462a      	mov	r2, r5
 8007c18:	4633      	mov	r3, r6
 8007c1a:	f7f8 ff9d 	bl	8000b58 <__aeabi_dcmpgt>
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	f040 8298 	bne.w	8008154 <_dtoa_r+0x95c>
 8007c24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c28:	462a      	mov	r2, r5
 8007c2a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007c2e:	f7f8 ff75 	bl	8000b1c <__aeabi_dcmplt>
 8007c32:	bb38      	cbnz	r0, 8007c84 <_dtoa_r+0x48c>
 8007c34:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007c38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007c3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f2c0 8157 	blt.w	8007ef2 <_dtoa_r+0x6fa>
 8007c44:	2f0e      	cmp	r7, #14
 8007c46:	f300 8154 	bgt.w	8007ef2 <_dtoa_r+0x6fa>
 8007c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8007d78 <_dtoa_r+0x580>)
 8007c4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c50:	ed93 7b00 	vldr	d7, [r3]
 8007c54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	ed8d 7b00 	vstr	d7, [sp]
 8007c5c:	f280 80e5 	bge.w	8007e2a <_dtoa_r+0x632>
 8007c60:	9b03      	ldr	r3, [sp, #12]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f300 80e1 	bgt.w	8007e2a <_dtoa_r+0x632>
 8007c68:	d10c      	bne.n	8007c84 <_dtoa_r+0x48c>
 8007c6a:	4b48      	ldr	r3, [pc, #288]	@ (8007d8c <_dtoa_r+0x594>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	ec51 0b17 	vmov	r0, r1, d7
 8007c72:	f7f8 fce1 	bl	8000638 <__aeabi_dmul>
 8007c76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c7a:	f7f8 ff63 	bl	8000b44 <__aeabi_dcmpge>
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	f000 8266 	beq.w	8008150 <_dtoa_r+0x958>
 8007c84:	2400      	movs	r4, #0
 8007c86:	4625      	mov	r5, r4
 8007c88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c8a:	4656      	mov	r6, sl
 8007c8c:	ea6f 0803 	mvn.w	r8, r3
 8007c90:	2700      	movs	r7, #0
 8007c92:	4621      	mov	r1, r4
 8007c94:	4648      	mov	r0, r9
 8007c96:	f000 fcbf 	bl	8008618 <_Bfree>
 8007c9a:	2d00      	cmp	r5, #0
 8007c9c:	f000 80bd 	beq.w	8007e1a <_dtoa_r+0x622>
 8007ca0:	b12f      	cbz	r7, 8007cae <_dtoa_r+0x4b6>
 8007ca2:	42af      	cmp	r7, r5
 8007ca4:	d003      	beq.n	8007cae <_dtoa_r+0x4b6>
 8007ca6:	4639      	mov	r1, r7
 8007ca8:	4648      	mov	r0, r9
 8007caa:	f000 fcb5 	bl	8008618 <_Bfree>
 8007cae:	4629      	mov	r1, r5
 8007cb0:	4648      	mov	r0, r9
 8007cb2:	f000 fcb1 	bl	8008618 <_Bfree>
 8007cb6:	e0b0      	b.n	8007e1a <_dtoa_r+0x622>
 8007cb8:	07e2      	lsls	r2, r4, #31
 8007cba:	d505      	bpl.n	8007cc8 <_dtoa_r+0x4d0>
 8007cbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007cc0:	f7f8 fcba 	bl	8000638 <__aeabi_dmul>
 8007cc4:	3601      	adds	r6, #1
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	1064      	asrs	r4, r4, #1
 8007cca:	3508      	adds	r5, #8
 8007ccc:	e762      	b.n	8007b94 <_dtoa_r+0x39c>
 8007cce:	2602      	movs	r6, #2
 8007cd0:	e765      	b.n	8007b9e <_dtoa_r+0x3a6>
 8007cd2:	9c03      	ldr	r4, [sp, #12]
 8007cd4:	46b8      	mov	r8, r7
 8007cd6:	e784      	b.n	8007be2 <_dtoa_r+0x3ea>
 8007cd8:	4b27      	ldr	r3, [pc, #156]	@ (8007d78 <_dtoa_r+0x580>)
 8007cda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ce0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ce4:	4454      	add	r4, sl
 8007ce6:	2900      	cmp	r1, #0
 8007ce8:	d054      	beq.n	8007d94 <_dtoa_r+0x59c>
 8007cea:	4929      	ldr	r1, [pc, #164]	@ (8007d90 <_dtoa_r+0x598>)
 8007cec:	2000      	movs	r0, #0
 8007cee:	f7f8 fdcd 	bl	800088c <__aeabi_ddiv>
 8007cf2:	4633      	mov	r3, r6
 8007cf4:	462a      	mov	r2, r5
 8007cf6:	f7f8 fae7 	bl	80002c8 <__aeabi_dsub>
 8007cfa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007cfe:	4656      	mov	r6, sl
 8007d00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d04:	f7f8 ff48 	bl	8000b98 <__aeabi_d2iz>
 8007d08:	4605      	mov	r5, r0
 8007d0a:	f7f8 fc2b 	bl	8000564 <__aeabi_i2d>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d16:	f7f8 fad7 	bl	80002c8 <__aeabi_dsub>
 8007d1a:	3530      	adds	r5, #48	@ 0x30
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d24:	f806 5b01 	strb.w	r5, [r6], #1
 8007d28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d2c:	f7f8 fef6 	bl	8000b1c <__aeabi_dcmplt>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d172      	bne.n	8007e1a <_dtoa_r+0x622>
 8007d34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d38:	4911      	ldr	r1, [pc, #68]	@ (8007d80 <_dtoa_r+0x588>)
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	f7f8 fac4 	bl	80002c8 <__aeabi_dsub>
 8007d40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d44:	f7f8 feea 	bl	8000b1c <__aeabi_dcmplt>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	f040 80b4 	bne.w	8007eb6 <_dtoa_r+0x6be>
 8007d4e:	42a6      	cmp	r6, r4
 8007d50:	f43f af70 	beq.w	8007c34 <_dtoa_r+0x43c>
 8007d54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007d58:	4b0a      	ldr	r3, [pc, #40]	@ (8007d84 <_dtoa_r+0x58c>)
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f7f8 fc6c 	bl	8000638 <__aeabi_dmul>
 8007d60:	4b08      	ldr	r3, [pc, #32]	@ (8007d84 <_dtoa_r+0x58c>)
 8007d62:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007d66:	2200      	movs	r2, #0
 8007d68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d6c:	f7f8 fc64 	bl	8000638 <__aeabi_dmul>
 8007d70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d74:	e7c4      	b.n	8007d00 <_dtoa_r+0x508>
 8007d76:	bf00      	nop
 8007d78:	0800b040 	.word	0x0800b040
 8007d7c:	0800b018 	.word	0x0800b018
 8007d80:	3ff00000 	.word	0x3ff00000
 8007d84:	40240000 	.word	0x40240000
 8007d88:	401c0000 	.word	0x401c0000
 8007d8c:	40140000 	.word	0x40140000
 8007d90:	3fe00000 	.word	0x3fe00000
 8007d94:	4631      	mov	r1, r6
 8007d96:	4628      	mov	r0, r5
 8007d98:	f7f8 fc4e 	bl	8000638 <__aeabi_dmul>
 8007d9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007da0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007da2:	4656      	mov	r6, sl
 8007da4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007da8:	f7f8 fef6 	bl	8000b98 <__aeabi_d2iz>
 8007dac:	4605      	mov	r5, r0
 8007dae:	f7f8 fbd9 	bl	8000564 <__aeabi_i2d>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dba:	f7f8 fa85 	bl	80002c8 <__aeabi_dsub>
 8007dbe:	3530      	adds	r5, #48	@ 0x30
 8007dc0:	f806 5b01 	strb.w	r5, [r6], #1
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	42a6      	cmp	r6, r4
 8007dca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007dce:	f04f 0200 	mov.w	r2, #0
 8007dd2:	d124      	bne.n	8007e1e <_dtoa_r+0x626>
 8007dd4:	4baf      	ldr	r3, [pc, #700]	@ (8008094 <_dtoa_r+0x89c>)
 8007dd6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007dda:	f7f8 fa77 	bl	80002cc <__adddf3>
 8007dde:	4602      	mov	r2, r0
 8007de0:	460b      	mov	r3, r1
 8007de2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007de6:	f7f8 feb7 	bl	8000b58 <__aeabi_dcmpgt>
 8007dea:	2800      	cmp	r0, #0
 8007dec:	d163      	bne.n	8007eb6 <_dtoa_r+0x6be>
 8007dee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007df2:	49a8      	ldr	r1, [pc, #672]	@ (8008094 <_dtoa_r+0x89c>)
 8007df4:	2000      	movs	r0, #0
 8007df6:	f7f8 fa67 	bl	80002c8 <__aeabi_dsub>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e02:	f7f8 fe8b 	bl	8000b1c <__aeabi_dcmplt>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	f43f af14 	beq.w	8007c34 <_dtoa_r+0x43c>
 8007e0c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007e0e:	1e73      	subs	r3, r6, #1
 8007e10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007e16:	2b30      	cmp	r3, #48	@ 0x30
 8007e18:	d0f8      	beq.n	8007e0c <_dtoa_r+0x614>
 8007e1a:	4647      	mov	r7, r8
 8007e1c:	e03b      	b.n	8007e96 <_dtoa_r+0x69e>
 8007e1e:	4b9e      	ldr	r3, [pc, #632]	@ (8008098 <_dtoa_r+0x8a0>)
 8007e20:	f7f8 fc0a 	bl	8000638 <__aeabi_dmul>
 8007e24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e28:	e7bc      	b.n	8007da4 <_dtoa_r+0x5ac>
 8007e2a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007e2e:	4656      	mov	r6, sl
 8007e30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e34:	4620      	mov	r0, r4
 8007e36:	4629      	mov	r1, r5
 8007e38:	f7f8 fd28 	bl	800088c <__aeabi_ddiv>
 8007e3c:	f7f8 feac 	bl	8000b98 <__aeabi_d2iz>
 8007e40:	4680      	mov	r8, r0
 8007e42:	f7f8 fb8f 	bl	8000564 <__aeabi_i2d>
 8007e46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e4a:	f7f8 fbf5 	bl	8000638 <__aeabi_dmul>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	460b      	mov	r3, r1
 8007e52:	4620      	mov	r0, r4
 8007e54:	4629      	mov	r1, r5
 8007e56:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007e5a:	f7f8 fa35 	bl	80002c8 <__aeabi_dsub>
 8007e5e:	f806 4b01 	strb.w	r4, [r6], #1
 8007e62:	9d03      	ldr	r5, [sp, #12]
 8007e64:	eba6 040a 	sub.w	r4, r6, sl
 8007e68:	42a5      	cmp	r5, r4
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	d133      	bne.n	8007ed8 <_dtoa_r+0x6e0>
 8007e70:	f7f8 fa2c 	bl	80002cc <__adddf3>
 8007e74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e78:	4604      	mov	r4, r0
 8007e7a:	460d      	mov	r5, r1
 8007e7c:	f7f8 fe6c 	bl	8000b58 <__aeabi_dcmpgt>
 8007e80:	b9c0      	cbnz	r0, 8007eb4 <_dtoa_r+0x6bc>
 8007e82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e86:	4620      	mov	r0, r4
 8007e88:	4629      	mov	r1, r5
 8007e8a:	f7f8 fe3d 	bl	8000b08 <__aeabi_dcmpeq>
 8007e8e:	b110      	cbz	r0, 8007e96 <_dtoa_r+0x69e>
 8007e90:	f018 0f01 	tst.w	r8, #1
 8007e94:	d10e      	bne.n	8007eb4 <_dtoa_r+0x6bc>
 8007e96:	9902      	ldr	r1, [sp, #8]
 8007e98:	4648      	mov	r0, r9
 8007e9a:	f000 fbbd 	bl	8008618 <_Bfree>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	7033      	strb	r3, [r6, #0]
 8007ea2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007ea4:	3701      	adds	r7, #1
 8007ea6:	601f      	str	r7, [r3, #0]
 8007ea8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 824b 	beq.w	8008346 <_dtoa_r+0xb4e>
 8007eb0:	601e      	str	r6, [r3, #0]
 8007eb2:	e248      	b.n	8008346 <_dtoa_r+0xb4e>
 8007eb4:	46b8      	mov	r8, r7
 8007eb6:	4633      	mov	r3, r6
 8007eb8:	461e      	mov	r6, r3
 8007eba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ebe:	2a39      	cmp	r2, #57	@ 0x39
 8007ec0:	d106      	bne.n	8007ed0 <_dtoa_r+0x6d8>
 8007ec2:	459a      	cmp	sl, r3
 8007ec4:	d1f8      	bne.n	8007eb8 <_dtoa_r+0x6c0>
 8007ec6:	2230      	movs	r2, #48	@ 0x30
 8007ec8:	f108 0801 	add.w	r8, r8, #1
 8007ecc:	f88a 2000 	strb.w	r2, [sl]
 8007ed0:	781a      	ldrb	r2, [r3, #0]
 8007ed2:	3201      	adds	r2, #1
 8007ed4:	701a      	strb	r2, [r3, #0]
 8007ed6:	e7a0      	b.n	8007e1a <_dtoa_r+0x622>
 8007ed8:	4b6f      	ldr	r3, [pc, #444]	@ (8008098 <_dtoa_r+0x8a0>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	f7f8 fbac 	bl	8000638 <__aeabi_dmul>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	460d      	mov	r5, r1
 8007ee8:	f7f8 fe0e 	bl	8000b08 <__aeabi_dcmpeq>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d09f      	beq.n	8007e30 <_dtoa_r+0x638>
 8007ef0:	e7d1      	b.n	8007e96 <_dtoa_r+0x69e>
 8007ef2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ef4:	2a00      	cmp	r2, #0
 8007ef6:	f000 80ea 	beq.w	80080ce <_dtoa_r+0x8d6>
 8007efa:	9a07      	ldr	r2, [sp, #28]
 8007efc:	2a01      	cmp	r2, #1
 8007efe:	f300 80cd 	bgt.w	800809c <_dtoa_r+0x8a4>
 8007f02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007f04:	2a00      	cmp	r2, #0
 8007f06:	f000 80c1 	beq.w	800808c <_dtoa_r+0x894>
 8007f0a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007f0e:	9c08      	ldr	r4, [sp, #32]
 8007f10:	9e00      	ldr	r6, [sp, #0]
 8007f12:	9a00      	ldr	r2, [sp, #0]
 8007f14:	441a      	add	r2, r3
 8007f16:	9200      	str	r2, [sp, #0]
 8007f18:	9a06      	ldr	r2, [sp, #24]
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	441a      	add	r2, r3
 8007f1e:	4648      	mov	r0, r9
 8007f20:	9206      	str	r2, [sp, #24]
 8007f22:	f000 fc77 	bl	8008814 <__i2b>
 8007f26:	4605      	mov	r5, r0
 8007f28:	b166      	cbz	r6, 8007f44 <_dtoa_r+0x74c>
 8007f2a:	9b06      	ldr	r3, [sp, #24]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	dd09      	ble.n	8007f44 <_dtoa_r+0x74c>
 8007f30:	42b3      	cmp	r3, r6
 8007f32:	9a00      	ldr	r2, [sp, #0]
 8007f34:	bfa8      	it	ge
 8007f36:	4633      	movge	r3, r6
 8007f38:	1ad2      	subs	r2, r2, r3
 8007f3a:	9200      	str	r2, [sp, #0]
 8007f3c:	9a06      	ldr	r2, [sp, #24]
 8007f3e:	1af6      	subs	r6, r6, r3
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	9306      	str	r3, [sp, #24]
 8007f44:	9b08      	ldr	r3, [sp, #32]
 8007f46:	b30b      	cbz	r3, 8007f8c <_dtoa_r+0x794>
 8007f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 80c6 	beq.w	80080dc <_dtoa_r+0x8e4>
 8007f50:	2c00      	cmp	r4, #0
 8007f52:	f000 80c0 	beq.w	80080d6 <_dtoa_r+0x8de>
 8007f56:	4629      	mov	r1, r5
 8007f58:	4622      	mov	r2, r4
 8007f5a:	4648      	mov	r0, r9
 8007f5c:	f000 fd12 	bl	8008984 <__pow5mult>
 8007f60:	9a02      	ldr	r2, [sp, #8]
 8007f62:	4601      	mov	r1, r0
 8007f64:	4605      	mov	r5, r0
 8007f66:	4648      	mov	r0, r9
 8007f68:	f000 fc6a 	bl	8008840 <__multiply>
 8007f6c:	9902      	ldr	r1, [sp, #8]
 8007f6e:	4680      	mov	r8, r0
 8007f70:	4648      	mov	r0, r9
 8007f72:	f000 fb51 	bl	8008618 <_Bfree>
 8007f76:	9b08      	ldr	r3, [sp, #32]
 8007f78:	1b1b      	subs	r3, r3, r4
 8007f7a:	9308      	str	r3, [sp, #32]
 8007f7c:	f000 80b1 	beq.w	80080e2 <_dtoa_r+0x8ea>
 8007f80:	9a08      	ldr	r2, [sp, #32]
 8007f82:	4641      	mov	r1, r8
 8007f84:	4648      	mov	r0, r9
 8007f86:	f000 fcfd 	bl	8008984 <__pow5mult>
 8007f8a:	9002      	str	r0, [sp, #8]
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	4648      	mov	r0, r9
 8007f90:	f000 fc40 	bl	8008814 <__i2b>
 8007f94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f96:	4604      	mov	r4, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 81d8 	beq.w	800834e <_dtoa_r+0xb56>
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	4601      	mov	r1, r0
 8007fa2:	4648      	mov	r0, r9
 8007fa4:	f000 fcee 	bl	8008984 <__pow5mult>
 8007fa8:	9b07      	ldr	r3, [sp, #28]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	4604      	mov	r4, r0
 8007fae:	f300 809f 	bgt.w	80080f0 <_dtoa_r+0x8f8>
 8007fb2:	9b04      	ldr	r3, [sp, #16]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f040 8097 	bne.w	80080e8 <_dtoa_r+0x8f0>
 8007fba:	9b05      	ldr	r3, [sp, #20]
 8007fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f040 8093 	bne.w	80080ec <_dtoa_r+0x8f4>
 8007fc6:	9b05      	ldr	r3, [sp, #20]
 8007fc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fcc:	0d1b      	lsrs	r3, r3, #20
 8007fce:	051b      	lsls	r3, r3, #20
 8007fd0:	b133      	cbz	r3, 8007fe0 <_dtoa_r+0x7e8>
 8007fd2:	9b00      	ldr	r3, [sp, #0]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	9b06      	ldr	r3, [sp, #24]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	9306      	str	r3, [sp, #24]
 8007fde:	2301      	movs	r3, #1
 8007fe0:	9308      	str	r3, [sp, #32]
 8007fe2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 81b8 	beq.w	800835a <_dtoa_r+0xb62>
 8007fea:	6923      	ldr	r3, [r4, #16]
 8007fec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ff0:	6918      	ldr	r0, [r3, #16]
 8007ff2:	f000 fbc3 	bl	800877c <__hi0bits>
 8007ff6:	f1c0 0020 	rsb	r0, r0, #32
 8007ffa:	9b06      	ldr	r3, [sp, #24]
 8007ffc:	4418      	add	r0, r3
 8007ffe:	f010 001f 	ands.w	r0, r0, #31
 8008002:	f000 8082 	beq.w	800810a <_dtoa_r+0x912>
 8008006:	f1c0 0320 	rsb	r3, r0, #32
 800800a:	2b04      	cmp	r3, #4
 800800c:	dd73      	ble.n	80080f6 <_dtoa_r+0x8fe>
 800800e:	9b00      	ldr	r3, [sp, #0]
 8008010:	f1c0 001c 	rsb	r0, r0, #28
 8008014:	4403      	add	r3, r0
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	9b06      	ldr	r3, [sp, #24]
 800801a:	4403      	add	r3, r0
 800801c:	4406      	add	r6, r0
 800801e:	9306      	str	r3, [sp, #24]
 8008020:	9b00      	ldr	r3, [sp, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	dd05      	ble.n	8008032 <_dtoa_r+0x83a>
 8008026:	9902      	ldr	r1, [sp, #8]
 8008028:	461a      	mov	r2, r3
 800802a:	4648      	mov	r0, r9
 800802c:	f000 fd04 	bl	8008a38 <__lshift>
 8008030:	9002      	str	r0, [sp, #8]
 8008032:	9b06      	ldr	r3, [sp, #24]
 8008034:	2b00      	cmp	r3, #0
 8008036:	dd05      	ble.n	8008044 <_dtoa_r+0x84c>
 8008038:	4621      	mov	r1, r4
 800803a:	461a      	mov	r2, r3
 800803c:	4648      	mov	r0, r9
 800803e:	f000 fcfb 	bl	8008a38 <__lshift>
 8008042:	4604      	mov	r4, r0
 8008044:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008046:	2b00      	cmp	r3, #0
 8008048:	d061      	beq.n	800810e <_dtoa_r+0x916>
 800804a:	9802      	ldr	r0, [sp, #8]
 800804c:	4621      	mov	r1, r4
 800804e:	f000 fd5f 	bl	8008b10 <__mcmp>
 8008052:	2800      	cmp	r0, #0
 8008054:	da5b      	bge.n	800810e <_dtoa_r+0x916>
 8008056:	2300      	movs	r3, #0
 8008058:	9902      	ldr	r1, [sp, #8]
 800805a:	220a      	movs	r2, #10
 800805c:	4648      	mov	r0, r9
 800805e:	f000 fafd 	bl	800865c <__multadd>
 8008062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008064:	9002      	str	r0, [sp, #8]
 8008066:	f107 38ff 	add.w	r8, r7, #4294967295
 800806a:	2b00      	cmp	r3, #0
 800806c:	f000 8177 	beq.w	800835e <_dtoa_r+0xb66>
 8008070:	4629      	mov	r1, r5
 8008072:	2300      	movs	r3, #0
 8008074:	220a      	movs	r2, #10
 8008076:	4648      	mov	r0, r9
 8008078:	f000 faf0 	bl	800865c <__multadd>
 800807c:	f1bb 0f00 	cmp.w	fp, #0
 8008080:	4605      	mov	r5, r0
 8008082:	dc6f      	bgt.n	8008164 <_dtoa_r+0x96c>
 8008084:	9b07      	ldr	r3, [sp, #28]
 8008086:	2b02      	cmp	r3, #2
 8008088:	dc49      	bgt.n	800811e <_dtoa_r+0x926>
 800808a:	e06b      	b.n	8008164 <_dtoa_r+0x96c>
 800808c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800808e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008092:	e73c      	b.n	8007f0e <_dtoa_r+0x716>
 8008094:	3fe00000 	.word	0x3fe00000
 8008098:	40240000 	.word	0x40240000
 800809c:	9b03      	ldr	r3, [sp, #12]
 800809e:	1e5c      	subs	r4, r3, #1
 80080a0:	9b08      	ldr	r3, [sp, #32]
 80080a2:	42a3      	cmp	r3, r4
 80080a4:	db09      	blt.n	80080ba <_dtoa_r+0x8c2>
 80080a6:	1b1c      	subs	r4, r3, r4
 80080a8:	9b03      	ldr	r3, [sp, #12]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f6bf af30 	bge.w	8007f10 <_dtoa_r+0x718>
 80080b0:	9b00      	ldr	r3, [sp, #0]
 80080b2:	9a03      	ldr	r2, [sp, #12]
 80080b4:	1a9e      	subs	r6, r3, r2
 80080b6:	2300      	movs	r3, #0
 80080b8:	e72b      	b.n	8007f12 <_dtoa_r+0x71a>
 80080ba:	9b08      	ldr	r3, [sp, #32]
 80080bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80080be:	9408      	str	r4, [sp, #32]
 80080c0:	1ae3      	subs	r3, r4, r3
 80080c2:	441a      	add	r2, r3
 80080c4:	9e00      	ldr	r6, [sp, #0]
 80080c6:	9b03      	ldr	r3, [sp, #12]
 80080c8:	920d      	str	r2, [sp, #52]	@ 0x34
 80080ca:	2400      	movs	r4, #0
 80080cc:	e721      	b.n	8007f12 <_dtoa_r+0x71a>
 80080ce:	9c08      	ldr	r4, [sp, #32]
 80080d0:	9e00      	ldr	r6, [sp, #0]
 80080d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80080d4:	e728      	b.n	8007f28 <_dtoa_r+0x730>
 80080d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80080da:	e751      	b.n	8007f80 <_dtoa_r+0x788>
 80080dc:	9a08      	ldr	r2, [sp, #32]
 80080de:	9902      	ldr	r1, [sp, #8]
 80080e0:	e750      	b.n	8007f84 <_dtoa_r+0x78c>
 80080e2:	f8cd 8008 	str.w	r8, [sp, #8]
 80080e6:	e751      	b.n	8007f8c <_dtoa_r+0x794>
 80080e8:	2300      	movs	r3, #0
 80080ea:	e779      	b.n	8007fe0 <_dtoa_r+0x7e8>
 80080ec:	9b04      	ldr	r3, [sp, #16]
 80080ee:	e777      	b.n	8007fe0 <_dtoa_r+0x7e8>
 80080f0:	2300      	movs	r3, #0
 80080f2:	9308      	str	r3, [sp, #32]
 80080f4:	e779      	b.n	8007fea <_dtoa_r+0x7f2>
 80080f6:	d093      	beq.n	8008020 <_dtoa_r+0x828>
 80080f8:	9a00      	ldr	r2, [sp, #0]
 80080fa:	331c      	adds	r3, #28
 80080fc:	441a      	add	r2, r3
 80080fe:	9200      	str	r2, [sp, #0]
 8008100:	9a06      	ldr	r2, [sp, #24]
 8008102:	441a      	add	r2, r3
 8008104:	441e      	add	r6, r3
 8008106:	9206      	str	r2, [sp, #24]
 8008108:	e78a      	b.n	8008020 <_dtoa_r+0x828>
 800810a:	4603      	mov	r3, r0
 800810c:	e7f4      	b.n	80080f8 <_dtoa_r+0x900>
 800810e:	9b03      	ldr	r3, [sp, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	46b8      	mov	r8, r7
 8008114:	dc20      	bgt.n	8008158 <_dtoa_r+0x960>
 8008116:	469b      	mov	fp, r3
 8008118:	9b07      	ldr	r3, [sp, #28]
 800811a:	2b02      	cmp	r3, #2
 800811c:	dd1e      	ble.n	800815c <_dtoa_r+0x964>
 800811e:	f1bb 0f00 	cmp.w	fp, #0
 8008122:	f47f adb1 	bne.w	8007c88 <_dtoa_r+0x490>
 8008126:	4621      	mov	r1, r4
 8008128:	465b      	mov	r3, fp
 800812a:	2205      	movs	r2, #5
 800812c:	4648      	mov	r0, r9
 800812e:	f000 fa95 	bl	800865c <__multadd>
 8008132:	4601      	mov	r1, r0
 8008134:	4604      	mov	r4, r0
 8008136:	9802      	ldr	r0, [sp, #8]
 8008138:	f000 fcea 	bl	8008b10 <__mcmp>
 800813c:	2800      	cmp	r0, #0
 800813e:	f77f ada3 	ble.w	8007c88 <_dtoa_r+0x490>
 8008142:	4656      	mov	r6, sl
 8008144:	2331      	movs	r3, #49	@ 0x31
 8008146:	f806 3b01 	strb.w	r3, [r6], #1
 800814a:	f108 0801 	add.w	r8, r8, #1
 800814e:	e59f      	b.n	8007c90 <_dtoa_r+0x498>
 8008150:	9c03      	ldr	r4, [sp, #12]
 8008152:	46b8      	mov	r8, r7
 8008154:	4625      	mov	r5, r4
 8008156:	e7f4      	b.n	8008142 <_dtoa_r+0x94a>
 8008158:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800815c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 8101 	beq.w	8008366 <_dtoa_r+0xb6e>
 8008164:	2e00      	cmp	r6, #0
 8008166:	dd05      	ble.n	8008174 <_dtoa_r+0x97c>
 8008168:	4629      	mov	r1, r5
 800816a:	4632      	mov	r2, r6
 800816c:	4648      	mov	r0, r9
 800816e:	f000 fc63 	bl	8008a38 <__lshift>
 8008172:	4605      	mov	r5, r0
 8008174:	9b08      	ldr	r3, [sp, #32]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d05c      	beq.n	8008234 <_dtoa_r+0xa3c>
 800817a:	6869      	ldr	r1, [r5, #4]
 800817c:	4648      	mov	r0, r9
 800817e:	f000 fa0b 	bl	8008598 <_Balloc>
 8008182:	4606      	mov	r6, r0
 8008184:	b928      	cbnz	r0, 8008192 <_dtoa_r+0x99a>
 8008186:	4b82      	ldr	r3, [pc, #520]	@ (8008390 <_dtoa_r+0xb98>)
 8008188:	4602      	mov	r2, r0
 800818a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800818e:	f7ff bb4a 	b.w	8007826 <_dtoa_r+0x2e>
 8008192:	692a      	ldr	r2, [r5, #16]
 8008194:	3202      	adds	r2, #2
 8008196:	0092      	lsls	r2, r2, #2
 8008198:	f105 010c 	add.w	r1, r5, #12
 800819c:	300c      	adds	r0, #12
 800819e:	f002 f93f 	bl	800a420 <memcpy>
 80081a2:	2201      	movs	r2, #1
 80081a4:	4631      	mov	r1, r6
 80081a6:	4648      	mov	r0, r9
 80081a8:	f000 fc46 	bl	8008a38 <__lshift>
 80081ac:	f10a 0301 	add.w	r3, sl, #1
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	eb0a 030b 	add.w	r3, sl, fp
 80081b6:	9308      	str	r3, [sp, #32]
 80081b8:	9b04      	ldr	r3, [sp, #16]
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	462f      	mov	r7, r5
 80081c0:	9306      	str	r3, [sp, #24]
 80081c2:	4605      	mov	r5, r0
 80081c4:	9b00      	ldr	r3, [sp, #0]
 80081c6:	9802      	ldr	r0, [sp, #8]
 80081c8:	4621      	mov	r1, r4
 80081ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80081ce:	f7ff fa8b 	bl	80076e8 <quorem>
 80081d2:	4603      	mov	r3, r0
 80081d4:	3330      	adds	r3, #48	@ 0x30
 80081d6:	9003      	str	r0, [sp, #12]
 80081d8:	4639      	mov	r1, r7
 80081da:	9802      	ldr	r0, [sp, #8]
 80081dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80081de:	f000 fc97 	bl	8008b10 <__mcmp>
 80081e2:	462a      	mov	r2, r5
 80081e4:	9004      	str	r0, [sp, #16]
 80081e6:	4621      	mov	r1, r4
 80081e8:	4648      	mov	r0, r9
 80081ea:	f000 fcad 	bl	8008b48 <__mdiff>
 80081ee:	68c2      	ldr	r2, [r0, #12]
 80081f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081f2:	4606      	mov	r6, r0
 80081f4:	bb02      	cbnz	r2, 8008238 <_dtoa_r+0xa40>
 80081f6:	4601      	mov	r1, r0
 80081f8:	9802      	ldr	r0, [sp, #8]
 80081fa:	f000 fc89 	bl	8008b10 <__mcmp>
 80081fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008200:	4602      	mov	r2, r0
 8008202:	4631      	mov	r1, r6
 8008204:	4648      	mov	r0, r9
 8008206:	920c      	str	r2, [sp, #48]	@ 0x30
 8008208:	9309      	str	r3, [sp, #36]	@ 0x24
 800820a:	f000 fa05 	bl	8008618 <_Bfree>
 800820e:	9b07      	ldr	r3, [sp, #28]
 8008210:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008212:	9e00      	ldr	r6, [sp, #0]
 8008214:	ea42 0103 	orr.w	r1, r2, r3
 8008218:	9b06      	ldr	r3, [sp, #24]
 800821a:	4319      	orrs	r1, r3
 800821c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800821e:	d10d      	bne.n	800823c <_dtoa_r+0xa44>
 8008220:	2b39      	cmp	r3, #57	@ 0x39
 8008222:	d027      	beq.n	8008274 <_dtoa_r+0xa7c>
 8008224:	9a04      	ldr	r2, [sp, #16]
 8008226:	2a00      	cmp	r2, #0
 8008228:	dd01      	ble.n	800822e <_dtoa_r+0xa36>
 800822a:	9b03      	ldr	r3, [sp, #12]
 800822c:	3331      	adds	r3, #49	@ 0x31
 800822e:	f88b 3000 	strb.w	r3, [fp]
 8008232:	e52e      	b.n	8007c92 <_dtoa_r+0x49a>
 8008234:	4628      	mov	r0, r5
 8008236:	e7b9      	b.n	80081ac <_dtoa_r+0x9b4>
 8008238:	2201      	movs	r2, #1
 800823a:	e7e2      	b.n	8008202 <_dtoa_r+0xa0a>
 800823c:	9904      	ldr	r1, [sp, #16]
 800823e:	2900      	cmp	r1, #0
 8008240:	db04      	blt.n	800824c <_dtoa_r+0xa54>
 8008242:	9807      	ldr	r0, [sp, #28]
 8008244:	4301      	orrs	r1, r0
 8008246:	9806      	ldr	r0, [sp, #24]
 8008248:	4301      	orrs	r1, r0
 800824a:	d120      	bne.n	800828e <_dtoa_r+0xa96>
 800824c:	2a00      	cmp	r2, #0
 800824e:	ddee      	ble.n	800822e <_dtoa_r+0xa36>
 8008250:	9902      	ldr	r1, [sp, #8]
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	2201      	movs	r2, #1
 8008256:	4648      	mov	r0, r9
 8008258:	f000 fbee 	bl	8008a38 <__lshift>
 800825c:	4621      	mov	r1, r4
 800825e:	9002      	str	r0, [sp, #8]
 8008260:	f000 fc56 	bl	8008b10 <__mcmp>
 8008264:	2800      	cmp	r0, #0
 8008266:	9b00      	ldr	r3, [sp, #0]
 8008268:	dc02      	bgt.n	8008270 <_dtoa_r+0xa78>
 800826a:	d1e0      	bne.n	800822e <_dtoa_r+0xa36>
 800826c:	07da      	lsls	r2, r3, #31
 800826e:	d5de      	bpl.n	800822e <_dtoa_r+0xa36>
 8008270:	2b39      	cmp	r3, #57	@ 0x39
 8008272:	d1da      	bne.n	800822a <_dtoa_r+0xa32>
 8008274:	2339      	movs	r3, #57	@ 0x39
 8008276:	f88b 3000 	strb.w	r3, [fp]
 800827a:	4633      	mov	r3, r6
 800827c:	461e      	mov	r6, r3
 800827e:	3b01      	subs	r3, #1
 8008280:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008284:	2a39      	cmp	r2, #57	@ 0x39
 8008286:	d04e      	beq.n	8008326 <_dtoa_r+0xb2e>
 8008288:	3201      	adds	r2, #1
 800828a:	701a      	strb	r2, [r3, #0]
 800828c:	e501      	b.n	8007c92 <_dtoa_r+0x49a>
 800828e:	2a00      	cmp	r2, #0
 8008290:	dd03      	ble.n	800829a <_dtoa_r+0xaa2>
 8008292:	2b39      	cmp	r3, #57	@ 0x39
 8008294:	d0ee      	beq.n	8008274 <_dtoa_r+0xa7c>
 8008296:	3301      	adds	r3, #1
 8008298:	e7c9      	b.n	800822e <_dtoa_r+0xa36>
 800829a:	9a00      	ldr	r2, [sp, #0]
 800829c:	9908      	ldr	r1, [sp, #32]
 800829e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80082a2:	428a      	cmp	r2, r1
 80082a4:	d028      	beq.n	80082f8 <_dtoa_r+0xb00>
 80082a6:	9902      	ldr	r1, [sp, #8]
 80082a8:	2300      	movs	r3, #0
 80082aa:	220a      	movs	r2, #10
 80082ac:	4648      	mov	r0, r9
 80082ae:	f000 f9d5 	bl	800865c <__multadd>
 80082b2:	42af      	cmp	r7, r5
 80082b4:	9002      	str	r0, [sp, #8]
 80082b6:	f04f 0300 	mov.w	r3, #0
 80082ba:	f04f 020a 	mov.w	r2, #10
 80082be:	4639      	mov	r1, r7
 80082c0:	4648      	mov	r0, r9
 80082c2:	d107      	bne.n	80082d4 <_dtoa_r+0xadc>
 80082c4:	f000 f9ca 	bl	800865c <__multadd>
 80082c8:	4607      	mov	r7, r0
 80082ca:	4605      	mov	r5, r0
 80082cc:	9b00      	ldr	r3, [sp, #0]
 80082ce:	3301      	adds	r3, #1
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	e777      	b.n	80081c4 <_dtoa_r+0x9cc>
 80082d4:	f000 f9c2 	bl	800865c <__multadd>
 80082d8:	4629      	mov	r1, r5
 80082da:	4607      	mov	r7, r0
 80082dc:	2300      	movs	r3, #0
 80082de:	220a      	movs	r2, #10
 80082e0:	4648      	mov	r0, r9
 80082e2:	f000 f9bb 	bl	800865c <__multadd>
 80082e6:	4605      	mov	r5, r0
 80082e8:	e7f0      	b.n	80082cc <_dtoa_r+0xad4>
 80082ea:	f1bb 0f00 	cmp.w	fp, #0
 80082ee:	bfcc      	ite	gt
 80082f0:	465e      	movgt	r6, fp
 80082f2:	2601      	movle	r6, #1
 80082f4:	4456      	add	r6, sl
 80082f6:	2700      	movs	r7, #0
 80082f8:	9902      	ldr	r1, [sp, #8]
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	2201      	movs	r2, #1
 80082fe:	4648      	mov	r0, r9
 8008300:	f000 fb9a 	bl	8008a38 <__lshift>
 8008304:	4621      	mov	r1, r4
 8008306:	9002      	str	r0, [sp, #8]
 8008308:	f000 fc02 	bl	8008b10 <__mcmp>
 800830c:	2800      	cmp	r0, #0
 800830e:	dcb4      	bgt.n	800827a <_dtoa_r+0xa82>
 8008310:	d102      	bne.n	8008318 <_dtoa_r+0xb20>
 8008312:	9b00      	ldr	r3, [sp, #0]
 8008314:	07db      	lsls	r3, r3, #31
 8008316:	d4b0      	bmi.n	800827a <_dtoa_r+0xa82>
 8008318:	4633      	mov	r3, r6
 800831a:	461e      	mov	r6, r3
 800831c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008320:	2a30      	cmp	r2, #48	@ 0x30
 8008322:	d0fa      	beq.n	800831a <_dtoa_r+0xb22>
 8008324:	e4b5      	b.n	8007c92 <_dtoa_r+0x49a>
 8008326:	459a      	cmp	sl, r3
 8008328:	d1a8      	bne.n	800827c <_dtoa_r+0xa84>
 800832a:	2331      	movs	r3, #49	@ 0x31
 800832c:	f108 0801 	add.w	r8, r8, #1
 8008330:	f88a 3000 	strb.w	r3, [sl]
 8008334:	e4ad      	b.n	8007c92 <_dtoa_r+0x49a>
 8008336:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008338:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008394 <_dtoa_r+0xb9c>
 800833c:	b11b      	cbz	r3, 8008346 <_dtoa_r+0xb4e>
 800833e:	f10a 0308 	add.w	r3, sl, #8
 8008342:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	4650      	mov	r0, sl
 8008348:	b017      	add	sp, #92	@ 0x5c
 800834a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834e:	9b07      	ldr	r3, [sp, #28]
 8008350:	2b01      	cmp	r3, #1
 8008352:	f77f ae2e 	ble.w	8007fb2 <_dtoa_r+0x7ba>
 8008356:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008358:	9308      	str	r3, [sp, #32]
 800835a:	2001      	movs	r0, #1
 800835c:	e64d      	b.n	8007ffa <_dtoa_r+0x802>
 800835e:	f1bb 0f00 	cmp.w	fp, #0
 8008362:	f77f aed9 	ble.w	8008118 <_dtoa_r+0x920>
 8008366:	4656      	mov	r6, sl
 8008368:	9802      	ldr	r0, [sp, #8]
 800836a:	4621      	mov	r1, r4
 800836c:	f7ff f9bc 	bl	80076e8 <quorem>
 8008370:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008374:	f806 3b01 	strb.w	r3, [r6], #1
 8008378:	eba6 020a 	sub.w	r2, r6, sl
 800837c:	4593      	cmp	fp, r2
 800837e:	ddb4      	ble.n	80082ea <_dtoa_r+0xaf2>
 8008380:	9902      	ldr	r1, [sp, #8]
 8008382:	2300      	movs	r3, #0
 8008384:	220a      	movs	r2, #10
 8008386:	4648      	mov	r0, r9
 8008388:	f000 f968 	bl	800865c <__multadd>
 800838c:	9002      	str	r0, [sp, #8]
 800838e:	e7eb      	b.n	8008368 <_dtoa_r+0xb70>
 8008390:	0800aee9 	.word	0x0800aee9
 8008394:	0800ae6d 	.word	0x0800ae6d

08008398 <_free_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	4605      	mov	r5, r0
 800839c:	2900      	cmp	r1, #0
 800839e:	d041      	beq.n	8008424 <_free_r+0x8c>
 80083a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083a4:	1f0c      	subs	r4, r1, #4
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	bfb8      	it	lt
 80083aa:	18e4      	addlt	r4, r4, r3
 80083ac:	f000 f8e8 	bl	8008580 <__malloc_lock>
 80083b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008428 <_free_r+0x90>)
 80083b2:	6813      	ldr	r3, [r2, #0]
 80083b4:	b933      	cbnz	r3, 80083c4 <_free_r+0x2c>
 80083b6:	6063      	str	r3, [r4, #4]
 80083b8:	6014      	str	r4, [r2, #0]
 80083ba:	4628      	mov	r0, r5
 80083bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083c0:	f000 b8e4 	b.w	800858c <__malloc_unlock>
 80083c4:	42a3      	cmp	r3, r4
 80083c6:	d908      	bls.n	80083da <_free_r+0x42>
 80083c8:	6820      	ldr	r0, [r4, #0]
 80083ca:	1821      	adds	r1, r4, r0
 80083cc:	428b      	cmp	r3, r1
 80083ce:	bf01      	itttt	eq
 80083d0:	6819      	ldreq	r1, [r3, #0]
 80083d2:	685b      	ldreq	r3, [r3, #4]
 80083d4:	1809      	addeq	r1, r1, r0
 80083d6:	6021      	streq	r1, [r4, #0]
 80083d8:	e7ed      	b.n	80083b6 <_free_r+0x1e>
 80083da:	461a      	mov	r2, r3
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	b10b      	cbz	r3, 80083e4 <_free_r+0x4c>
 80083e0:	42a3      	cmp	r3, r4
 80083e2:	d9fa      	bls.n	80083da <_free_r+0x42>
 80083e4:	6811      	ldr	r1, [r2, #0]
 80083e6:	1850      	adds	r0, r2, r1
 80083e8:	42a0      	cmp	r0, r4
 80083ea:	d10b      	bne.n	8008404 <_free_r+0x6c>
 80083ec:	6820      	ldr	r0, [r4, #0]
 80083ee:	4401      	add	r1, r0
 80083f0:	1850      	adds	r0, r2, r1
 80083f2:	4283      	cmp	r3, r0
 80083f4:	6011      	str	r1, [r2, #0]
 80083f6:	d1e0      	bne.n	80083ba <_free_r+0x22>
 80083f8:	6818      	ldr	r0, [r3, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	6053      	str	r3, [r2, #4]
 80083fe:	4408      	add	r0, r1
 8008400:	6010      	str	r0, [r2, #0]
 8008402:	e7da      	b.n	80083ba <_free_r+0x22>
 8008404:	d902      	bls.n	800840c <_free_r+0x74>
 8008406:	230c      	movs	r3, #12
 8008408:	602b      	str	r3, [r5, #0]
 800840a:	e7d6      	b.n	80083ba <_free_r+0x22>
 800840c:	6820      	ldr	r0, [r4, #0]
 800840e:	1821      	adds	r1, r4, r0
 8008410:	428b      	cmp	r3, r1
 8008412:	bf04      	itt	eq
 8008414:	6819      	ldreq	r1, [r3, #0]
 8008416:	685b      	ldreq	r3, [r3, #4]
 8008418:	6063      	str	r3, [r4, #4]
 800841a:	bf04      	itt	eq
 800841c:	1809      	addeq	r1, r1, r0
 800841e:	6021      	streq	r1, [r4, #0]
 8008420:	6054      	str	r4, [r2, #4]
 8008422:	e7ca      	b.n	80083ba <_free_r+0x22>
 8008424:	bd38      	pop	{r3, r4, r5, pc}
 8008426:	bf00      	nop
 8008428:	20000770 	.word	0x20000770

0800842c <malloc>:
 800842c:	4b02      	ldr	r3, [pc, #8]	@ (8008438 <malloc+0xc>)
 800842e:	4601      	mov	r1, r0
 8008430:	6818      	ldr	r0, [r3, #0]
 8008432:	f000 b825 	b.w	8008480 <_malloc_r>
 8008436:	bf00      	nop
 8008438:	20000024 	.word	0x20000024

0800843c <sbrk_aligned>:
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	4e0f      	ldr	r6, [pc, #60]	@ (800847c <sbrk_aligned+0x40>)
 8008440:	460c      	mov	r4, r1
 8008442:	6831      	ldr	r1, [r6, #0]
 8008444:	4605      	mov	r5, r0
 8008446:	b911      	cbnz	r1, 800844e <sbrk_aligned+0x12>
 8008448:	f001 ffda 	bl	800a400 <_sbrk_r>
 800844c:	6030      	str	r0, [r6, #0]
 800844e:	4621      	mov	r1, r4
 8008450:	4628      	mov	r0, r5
 8008452:	f001 ffd5 	bl	800a400 <_sbrk_r>
 8008456:	1c43      	adds	r3, r0, #1
 8008458:	d103      	bne.n	8008462 <sbrk_aligned+0x26>
 800845a:	f04f 34ff 	mov.w	r4, #4294967295
 800845e:	4620      	mov	r0, r4
 8008460:	bd70      	pop	{r4, r5, r6, pc}
 8008462:	1cc4      	adds	r4, r0, #3
 8008464:	f024 0403 	bic.w	r4, r4, #3
 8008468:	42a0      	cmp	r0, r4
 800846a:	d0f8      	beq.n	800845e <sbrk_aligned+0x22>
 800846c:	1a21      	subs	r1, r4, r0
 800846e:	4628      	mov	r0, r5
 8008470:	f001 ffc6 	bl	800a400 <_sbrk_r>
 8008474:	3001      	adds	r0, #1
 8008476:	d1f2      	bne.n	800845e <sbrk_aligned+0x22>
 8008478:	e7ef      	b.n	800845a <sbrk_aligned+0x1e>
 800847a:	bf00      	nop
 800847c:	2000076c 	.word	0x2000076c

08008480 <_malloc_r>:
 8008480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008484:	1ccd      	adds	r5, r1, #3
 8008486:	f025 0503 	bic.w	r5, r5, #3
 800848a:	3508      	adds	r5, #8
 800848c:	2d0c      	cmp	r5, #12
 800848e:	bf38      	it	cc
 8008490:	250c      	movcc	r5, #12
 8008492:	2d00      	cmp	r5, #0
 8008494:	4606      	mov	r6, r0
 8008496:	db01      	blt.n	800849c <_malloc_r+0x1c>
 8008498:	42a9      	cmp	r1, r5
 800849a:	d904      	bls.n	80084a6 <_malloc_r+0x26>
 800849c:	230c      	movs	r3, #12
 800849e:	6033      	str	r3, [r6, #0]
 80084a0:	2000      	movs	r0, #0
 80084a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800857c <_malloc_r+0xfc>
 80084aa:	f000 f869 	bl	8008580 <__malloc_lock>
 80084ae:	f8d8 3000 	ldr.w	r3, [r8]
 80084b2:	461c      	mov	r4, r3
 80084b4:	bb44      	cbnz	r4, 8008508 <_malloc_r+0x88>
 80084b6:	4629      	mov	r1, r5
 80084b8:	4630      	mov	r0, r6
 80084ba:	f7ff ffbf 	bl	800843c <sbrk_aligned>
 80084be:	1c43      	adds	r3, r0, #1
 80084c0:	4604      	mov	r4, r0
 80084c2:	d158      	bne.n	8008576 <_malloc_r+0xf6>
 80084c4:	f8d8 4000 	ldr.w	r4, [r8]
 80084c8:	4627      	mov	r7, r4
 80084ca:	2f00      	cmp	r7, #0
 80084cc:	d143      	bne.n	8008556 <_malloc_r+0xd6>
 80084ce:	2c00      	cmp	r4, #0
 80084d0:	d04b      	beq.n	800856a <_malloc_r+0xea>
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	4639      	mov	r1, r7
 80084d6:	4630      	mov	r0, r6
 80084d8:	eb04 0903 	add.w	r9, r4, r3
 80084dc:	f001 ff90 	bl	800a400 <_sbrk_r>
 80084e0:	4581      	cmp	r9, r0
 80084e2:	d142      	bne.n	800856a <_malloc_r+0xea>
 80084e4:	6821      	ldr	r1, [r4, #0]
 80084e6:	1a6d      	subs	r5, r5, r1
 80084e8:	4629      	mov	r1, r5
 80084ea:	4630      	mov	r0, r6
 80084ec:	f7ff ffa6 	bl	800843c <sbrk_aligned>
 80084f0:	3001      	adds	r0, #1
 80084f2:	d03a      	beq.n	800856a <_malloc_r+0xea>
 80084f4:	6823      	ldr	r3, [r4, #0]
 80084f6:	442b      	add	r3, r5
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	f8d8 3000 	ldr.w	r3, [r8]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	bb62      	cbnz	r2, 800855c <_malloc_r+0xdc>
 8008502:	f8c8 7000 	str.w	r7, [r8]
 8008506:	e00f      	b.n	8008528 <_malloc_r+0xa8>
 8008508:	6822      	ldr	r2, [r4, #0]
 800850a:	1b52      	subs	r2, r2, r5
 800850c:	d420      	bmi.n	8008550 <_malloc_r+0xd0>
 800850e:	2a0b      	cmp	r2, #11
 8008510:	d917      	bls.n	8008542 <_malloc_r+0xc2>
 8008512:	1961      	adds	r1, r4, r5
 8008514:	42a3      	cmp	r3, r4
 8008516:	6025      	str	r5, [r4, #0]
 8008518:	bf18      	it	ne
 800851a:	6059      	strne	r1, [r3, #4]
 800851c:	6863      	ldr	r3, [r4, #4]
 800851e:	bf08      	it	eq
 8008520:	f8c8 1000 	streq.w	r1, [r8]
 8008524:	5162      	str	r2, [r4, r5]
 8008526:	604b      	str	r3, [r1, #4]
 8008528:	4630      	mov	r0, r6
 800852a:	f000 f82f 	bl	800858c <__malloc_unlock>
 800852e:	f104 000b 	add.w	r0, r4, #11
 8008532:	1d23      	adds	r3, r4, #4
 8008534:	f020 0007 	bic.w	r0, r0, #7
 8008538:	1ac2      	subs	r2, r0, r3
 800853a:	bf1c      	itt	ne
 800853c:	1a1b      	subne	r3, r3, r0
 800853e:	50a3      	strne	r3, [r4, r2]
 8008540:	e7af      	b.n	80084a2 <_malloc_r+0x22>
 8008542:	6862      	ldr	r2, [r4, #4]
 8008544:	42a3      	cmp	r3, r4
 8008546:	bf0c      	ite	eq
 8008548:	f8c8 2000 	streq.w	r2, [r8]
 800854c:	605a      	strne	r2, [r3, #4]
 800854e:	e7eb      	b.n	8008528 <_malloc_r+0xa8>
 8008550:	4623      	mov	r3, r4
 8008552:	6864      	ldr	r4, [r4, #4]
 8008554:	e7ae      	b.n	80084b4 <_malloc_r+0x34>
 8008556:	463c      	mov	r4, r7
 8008558:	687f      	ldr	r7, [r7, #4]
 800855a:	e7b6      	b.n	80084ca <_malloc_r+0x4a>
 800855c:	461a      	mov	r2, r3
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	42a3      	cmp	r3, r4
 8008562:	d1fb      	bne.n	800855c <_malloc_r+0xdc>
 8008564:	2300      	movs	r3, #0
 8008566:	6053      	str	r3, [r2, #4]
 8008568:	e7de      	b.n	8008528 <_malloc_r+0xa8>
 800856a:	230c      	movs	r3, #12
 800856c:	6033      	str	r3, [r6, #0]
 800856e:	4630      	mov	r0, r6
 8008570:	f000 f80c 	bl	800858c <__malloc_unlock>
 8008574:	e794      	b.n	80084a0 <_malloc_r+0x20>
 8008576:	6005      	str	r5, [r0, #0]
 8008578:	e7d6      	b.n	8008528 <_malloc_r+0xa8>
 800857a:	bf00      	nop
 800857c:	20000770 	.word	0x20000770

08008580 <__malloc_lock>:
 8008580:	4801      	ldr	r0, [pc, #4]	@ (8008588 <__malloc_lock+0x8>)
 8008582:	f7ff b8a8 	b.w	80076d6 <__retarget_lock_acquire_recursive>
 8008586:	bf00      	nop
 8008588:	20000768 	.word	0x20000768

0800858c <__malloc_unlock>:
 800858c:	4801      	ldr	r0, [pc, #4]	@ (8008594 <__malloc_unlock+0x8>)
 800858e:	f7ff b8a3 	b.w	80076d8 <__retarget_lock_release_recursive>
 8008592:	bf00      	nop
 8008594:	20000768 	.word	0x20000768

08008598 <_Balloc>:
 8008598:	b570      	push	{r4, r5, r6, lr}
 800859a:	69c6      	ldr	r6, [r0, #28]
 800859c:	4604      	mov	r4, r0
 800859e:	460d      	mov	r5, r1
 80085a0:	b976      	cbnz	r6, 80085c0 <_Balloc+0x28>
 80085a2:	2010      	movs	r0, #16
 80085a4:	f7ff ff42 	bl	800842c <malloc>
 80085a8:	4602      	mov	r2, r0
 80085aa:	61e0      	str	r0, [r4, #28]
 80085ac:	b920      	cbnz	r0, 80085b8 <_Balloc+0x20>
 80085ae:	4b18      	ldr	r3, [pc, #96]	@ (8008610 <_Balloc+0x78>)
 80085b0:	4818      	ldr	r0, [pc, #96]	@ (8008614 <_Balloc+0x7c>)
 80085b2:	216b      	movs	r1, #107	@ 0x6b
 80085b4:	f001 ff4c 	bl	800a450 <__assert_func>
 80085b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085bc:	6006      	str	r6, [r0, #0]
 80085be:	60c6      	str	r6, [r0, #12]
 80085c0:	69e6      	ldr	r6, [r4, #28]
 80085c2:	68f3      	ldr	r3, [r6, #12]
 80085c4:	b183      	cbz	r3, 80085e8 <_Balloc+0x50>
 80085c6:	69e3      	ldr	r3, [r4, #28]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085ce:	b9b8      	cbnz	r0, 8008600 <_Balloc+0x68>
 80085d0:	2101      	movs	r1, #1
 80085d2:	fa01 f605 	lsl.w	r6, r1, r5
 80085d6:	1d72      	adds	r2, r6, #5
 80085d8:	0092      	lsls	r2, r2, #2
 80085da:	4620      	mov	r0, r4
 80085dc:	f001 ff56 	bl	800a48c <_calloc_r>
 80085e0:	b160      	cbz	r0, 80085fc <_Balloc+0x64>
 80085e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085e6:	e00e      	b.n	8008606 <_Balloc+0x6e>
 80085e8:	2221      	movs	r2, #33	@ 0x21
 80085ea:	2104      	movs	r1, #4
 80085ec:	4620      	mov	r0, r4
 80085ee:	f001 ff4d 	bl	800a48c <_calloc_r>
 80085f2:	69e3      	ldr	r3, [r4, #28]
 80085f4:	60f0      	str	r0, [r6, #12]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e4      	bne.n	80085c6 <_Balloc+0x2e>
 80085fc:	2000      	movs	r0, #0
 80085fe:	bd70      	pop	{r4, r5, r6, pc}
 8008600:	6802      	ldr	r2, [r0, #0]
 8008602:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008606:	2300      	movs	r3, #0
 8008608:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800860c:	e7f7      	b.n	80085fe <_Balloc+0x66>
 800860e:	bf00      	nop
 8008610:	0800ae7a 	.word	0x0800ae7a
 8008614:	0800aefa 	.word	0x0800aefa

08008618 <_Bfree>:
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	69c6      	ldr	r6, [r0, #28]
 800861c:	4605      	mov	r5, r0
 800861e:	460c      	mov	r4, r1
 8008620:	b976      	cbnz	r6, 8008640 <_Bfree+0x28>
 8008622:	2010      	movs	r0, #16
 8008624:	f7ff ff02 	bl	800842c <malloc>
 8008628:	4602      	mov	r2, r0
 800862a:	61e8      	str	r0, [r5, #28]
 800862c:	b920      	cbnz	r0, 8008638 <_Bfree+0x20>
 800862e:	4b09      	ldr	r3, [pc, #36]	@ (8008654 <_Bfree+0x3c>)
 8008630:	4809      	ldr	r0, [pc, #36]	@ (8008658 <_Bfree+0x40>)
 8008632:	218f      	movs	r1, #143	@ 0x8f
 8008634:	f001 ff0c 	bl	800a450 <__assert_func>
 8008638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800863c:	6006      	str	r6, [r0, #0]
 800863e:	60c6      	str	r6, [r0, #12]
 8008640:	b13c      	cbz	r4, 8008652 <_Bfree+0x3a>
 8008642:	69eb      	ldr	r3, [r5, #28]
 8008644:	6862      	ldr	r2, [r4, #4]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800864c:	6021      	str	r1, [r4, #0]
 800864e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008652:	bd70      	pop	{r4, r5, r6, pc}
 8008654:	0800ae7a 	.word	0x0800ae7a
 8008658:	0800aefa 	.word	0x0800aefa

0800865c <__multadd>:
 800865c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008660:	690d      	ldr	r5, [r1, #16]
 8008662:	4607      	mov	r7, r0
 8008664:	460c      	mov	r4, r1
 8008666:	461e      	mov	r6, r3
 8008668:	f101 0c14 	add.w	ip, r1, #20
 800866c:	2000      	movs	r0, #0
 800866e:	f8dc 3000 	ldr.w	r3, [ip]
 8008672:	b299      	uxth	r1, r3
 8008674:	fb02 6101 	mla	r1, r2, r1, r6
 8008678:	0c1e      	lsrs	r6, r3, #16
 800867a:	0c0b      	lsrs	r3, r1, #16
 800867c:	fb02 3306 	mla	r3, r2, r6, r3
 8008680:	b289      	uxth	r1, r1
 8008682:	3001      	adds	r0, #1
 8008684:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008688:	4285      	cmp	r5, r0
 800868a:	f84c 1b04 	str.w	r1, [ip], #4
 800868e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008692:	dcec      	bgt.n	800866e <__multadd+0x12>
 8008694:	b30e      	cbz	r6, 80086da <__multadd+0x7e>
 8008696:	68a3      	ldr	r3, [r4, #8]
 8008698:	42ab      	cmp	r3, r5
 800869a:	dc19      	bgt.n	80086d0 <__multadd+0x74>
 800869c:	6861      	ldr	r1, [r4, #4]
 800869e:	4638      	mov	r0, r7
 80086a0:	3101      	adds	r1, #1
 80086a2:	f7ff ff79 	bl	8008598 <_Balloc>
 80086a6:	4680      	mov	r8, r0
 80086a8:	b928      	cbnz	r0, 80086b6 <__multadd+0x5a>
 80086aa:	4602      	mov	r2, r0
 80086ac:	4b0c      	ldr	r3, [pc, #48]	@ (80086e0 <__multadd+0x84>)
 80086ae:	480d      	ldr	r0, [pc, #52]	@ (80086e4 <__multadd+0x88>)
 80086b0:	21ba      	movs	r1, #186	@ 0xba
 80086b2:	f001 fecd 	bl	800a450 <__assert_func>
 80086b6:	6922      	ldr	r2, [r4, #16]
 80086b8:	3202      	adds	r2, #2
 80086ba:	f104 010c 	add.w	r1, r4, #12
 80086be:	0092      	lsls	r2, r2, #2
 80086c0:	300c      	adds	r0, #12
 80086c2:	f001 fead 	bl	800a420 <memcpy>
 80086c6:	4621      	mov	r1, r4
 80086c8:	4638      	mov	r0, r7
 80086ca:	f7ff ffa5 	bl	8008618 <_Bfree>
 80086ce:	4644      	mov	r4, r8
 80086d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086d4:	3501      	adds	r5, #1
 80086d6:	615e      	str	r6, [r3, #20]
 80086d8:	6125      	str	r5, [r4, #16]
 80086da:	4620      	mov	r0, r4
 80086dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086e0:	0800aee9 	.word	0x0800aee9
 80086e4:	0800aefa 	.word	0x0800aefa

080086e8 <__s2b>:
 80086e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086ec:	460c      	mov	r4, r1
 80086ee:	4615      	mov	r5, r2
 80086f0:	461f      	mov	r7, r3
 80086f2:	2209      	movs	r2, #9
 80086f4:	3308      	adds	r3, #8
 80086f6:	4606      	mov	r6, r0
 80086f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80086fc:	2100      	movs	r1, #0
 80086fe:	2201      	movs	r2, #1
 8008700:	429a      	cmp	r2, r3
 8008702:	db09      	blt.n	8008718 <__s2b+0x30>
 8008704:	4630      	mov	r0, r6
 8008706:	f7ff ff47 	bl	8008598 <_Balloc>
 800870a:	b940      	cbnz	r0, 800871e <__s2b+0x36>
 800870c:	4602      	mov	r2, r0
 800870e:	4b19      	ldr	r3, [pc, #100]	@ (8008774 <__s2b+0x8c>)
 8008710:	4819      	ldr	r0, [pc, #100]	@ (8008778 <__s2b+0x90>)
 8008712:	21d3      	movs	r1, #211	@ 0xd3
 8008714:	f001 fe9c 	bl	800a450 <__assert_func>
 8008718:	0052      	lsls	r2, r2, #1
 800871a:	3101      	adds	r1, #1
 800871c:	e7f0      	b.n	8008700 <__s2b+0x18>
 800871e:	9b08      	ldr	r3, [sp, #32]
 8008720:	6143      	str	r3, [r0, #20]
 8008722:	2d09      	cmp	r5, #9
 8008724:	f04f 0301 	mov.w	r3, #1
 8008728:	6103      	str	r3, [r0, #16]
 800872a:	dd16      	ble.n	800875a <__s2b+0x72>
 800872c:	f104 0909 	add.w	r9, r4, #9
 8008730:	46c8      	mov	r8, r9
 8008732:	442c      	add	r4, r5
 8008734:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008738:	4601      	mov	r1, r0
 800873a:	3b30      	subs	r3, #48	@ 0x30
 800873c:	220a      	movs	r2, #10
 800873e:	4630      	mov	r0, r6
 8008740:	f7ff ff8c 	bl	800865c <__multadd>
 8008744:	45a0      	cmp	r8, r4
 8008746:	d1f5      	bne.n	8008734 <__s2b+0x4c>
 8008748:	f1a5 0408 	sub.w	r4, r5, #8
 800874c:	444c      	add	r4, r9
 800874e:	1b2d      	subs	r5, r5, r4
 8008750:	1963      	adds	r3, r4, r5
 8008752:	42bb      	cmp	r3, r7
 8008754:	db04      	blt.n	8008760 <__s2b+0x78>
 8008756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800875a:	340a      	adds	r4, #10
 800875c:	2509      	movs	r5, #9
 800875e:	e7f6      	b.n	800874e <__s2b+0x66>
 8008760:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008764:	4601      	mov	r1, r0
 8008766:	3b30      	subs	r3, #48	@ 0x30
 8008768:	220a      	movs	r2, #10
 800876a:	4630      	mov	r0, r6
 800876c:	f7ff ff76 	bl	800865c <__multadd>
 8008770:	e7ee      	b.n	8008750 <__s2b+0x68>
 8008772:	bf00      	nop
 8008774:	0800aee9 	.word	0x0800aee9
 8008778:	0800aefa 	.word	0x0800aefa

0800877c <__hi0bits>:
 800877c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008780:	4603      	mov	r3, r0
 8008782:	bf36      	itet	cc
 8008784:	0403      	lslcc	r3, r0, #16
 8008786:	2000      	movcs	r0, #0
 8008788:	2010      	movcc	r0, #16
 800878a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800878e:	bf3c      	itt	cc
 8008790:	021b      	lslcc	r3, r3, #8
 8008792:	3008      	addcc	r0, #8
 8008794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008798:	bf3c      	itt	cc
 800879a:	011b      	lslcc	r3, r3, #4
 800879c:	3004      	addcc	r0, #4
 800879e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087a2:	bf3c      	itt	cc
 80087a4:	009b      	lslcc	r3, r3, #2
 80087a6:	3002      	addcc	r0, #2
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	db05      	blt.n	80087b8 <__hi0bits+0x3c>
 80087ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80087b0:	f100 0001 	add.w	r0, r0, #1
 80087b4:	bf08      	it	eq
 80087b6:	2020      	moveq	r0, #32
 80087b8:	4770      	bx	lr

080087ba <__lo0bits>:
 80087ba:	6803      	ldr	r3, [r0, #0]
 80087bc:	4602      	mov	r2, r0
 80087be:	f013 0007 	ands.w	r0, r3, #7
 80087c2:	d00b      	beq.n	80087dc <__lo0bits+0x22>
 80087c4:	07d9      	lsls	r1, r3, #31
 80087c6:	d421      	bmi.n	800880c <__lo0bits+0x52>
 80087c8:	0798      	lsls	r0, r3, #30
 80087ca:	bf49      	itett	mi
 80087cc:	085b      	lsrmi	r3, r3, #1
 80087ce:	089b      	lsrpl	r3, r3, #2
 80087d0:	2001      	movmi	r0, #1
 80087d2:	6013      	strmi	r3, [r2, #0]
 80087d4:	bf5c      	itt	pl
 80087d6:	6013      	strpl	r3, [r2, #0]
 80087d8:	2002      	movpl	r0, #2
 80087da:	4770      	bx	lr
 80087dc:	b299      	uxth	r1, r3
 80087de:	b909      	cbnz	r1, 80087e4 <__lo0bits+0x2a>
 80087e0:	0c1b      	lsrs	r3, r3, #16
 80087e2:	2010      	movs	r0, #16
 80087e4:	b2d9      	uxtb	r1, r3
 80087e6:	b909      	cbnz	r1, 80087ec <__lo0bits+0x32>
 80087e8:	3008      	adds	r0, #8
 80087ea:	0a1b      	lsrs	r3, r3, #8
 80087ec:	0719      	lsls	r1, r3, #28
 80087ee:	bf04      	itt	eq
 80087f0:	091b      	lsreq	r3, r3, #4
 80087f2:	3004      	addeq	r0, #4
 80087f4:	0799      	lsls	r1, r3, #30
 80087f6:	bf04      	itt	eq
 80087f8:	089b      	lsreq	r3, r3, #2
 80087fa:	3002      	addeq	r0, #2
 80087fc:	07d9      	lsls	r1, r3, #31
 80087fe:	d403      	bmi.n	8008808 <__lo0bits+0x4e>
 8008800:	085b      	lsrs	r3, r3, #1
 8008802:	f100 0001 	add.w	r0, r0, #1
 8008806:	d003      	beq.n	8008810 <__lo0bits+0x56>
 8008808:	6013      	str	r3, [r2, #0]
 800880a:	4770      	bx	lr
 800880c:	2000      	movs	r0, #0
 800880e:	4770      	bx	lr
 8008810:	2020      	movs	r0, #32
 8008812:	4770      	bx	lr

08008814 <__i2b>:
 8008814:	b510      	push	{r4, lr}
 8008816:	460c      	mov	r4, r1
 8008818:	2101      	movs	r1, #1
 800881a:	f7ff febd 	bl	8008598 <_Balloc>
 800881e:	4602      	mov	r2, r0
 8008820:	b928      	cbnz	r0, 800882e <__i2b+0x1a>
 8008822:	4b05      	ldr	r3, [pc, #20]	@ (8008838 <__i2b+0x24>)
 8008824:	4805      	ldr	r0, [pc, #20]	@ (800883c <__i2b+0x28>)
 8008826:	f240 1145 	movw	r1, #325	@ 0x145
 800882a:	f001 fe11 	bl	800a450 <__assert_func>
 800882e:	2301      	movs	r3, #1
 8008830:	6144      	str	r4, [r0, #20]
 8008832:	6103      	str	r3, [r0, #16]
 8008834:	bd10      	pop	{r4, pc}
 8008836:	bf00      	nop
 8008838:	0800aee9 	.word	0x0800aee9
 800883c:	0800aefa 	.word	0x0800aefa

08008840 <__multiply>:
 8008840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008844:	4617      	mov	r7, r2
 8008846:	690a      	ldr	r2, [r1, #16]
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	429a      	cmp	r2, r3
 800884c:	bfa8      	it	ge
 800884e:	463b      	movge	r3, r7
 8008850:	4689      	mov	r9, r1
 8008852:	bfa4      	itt	ge
 8008854:	460f      	movge	r7, r1
 8008856:	4699      	movge	r9, r3
 8008858:	693d      	ldr	r5, [r7, #16]
 800885a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	6879      	ldr	r1, [r7, #4]
 8008862:	eb05 060a 	add.w	r6, r5, sl
 8008866:	42b3      	cmp	r3, r6
 8008868:	b085      	sub	sp, #20
 800886a:	bfb8      	it	lt
 800886c:	3101      	addlt	r1, #1
 800886e:	f7ff fe93 	bl	8008598 <_Balloc>
 8008872:	b930      	cbnz	r0, 8008882 <__multiply+0x42>
 8008874:	4602      	mov	r2, r0
 8008876:	4b41      	ldr	r3, [pc, #260]	@ (800897c <__multiply+0x13c>)
 8008878:	4841      	ldr	r0, [pc, #260]	@ (8008980 <__multiply+0x140>)
 800887a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800887e:	f001 fde7 	bl	800a450 <__assert_func>
 8008882:	f100 0414 	add.w	r4, r0, #20
 8008886:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800888a:	4623      	mov	r3, r4
 800888c:	2200      	movs	r2, #0
 800888e:	4573      	cmp	r3, lr
 8008890:	d320      	bcc.n	80088d4 <__multiply+0x94>
 8008892:	f107 0814 	add.w	r8, r7, #20
 8008896:	f109 0114 	add.w	r1, r9, #20
 800889a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800889e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80088a2:	9302      	str	r3, [sp, #8]
 80088a4:	1beb      	subs	r3, r5, r7
 80088a6:	3b15      	subs	r3, #21
 80088a8:	f023 0303 	bic.w	r3, r3, #3
 80088ac:	3304      	adds	r3, #4
 80088ae:	3715      	adds	r7, #21
 80088b0:	42bd      	cmp	r5, r7
 80088b2:	bf38      	it	cc
 80088b4:	2304      	movcc	r3, #4
 80088b6:	9301      	str	r3, [sp, #4]
 80088b8:	9b02      	ldr	r3, [sp, #8]
 80088ba:	9103      	str	r1, [sp, #12]
 80088bc:	428b      	cmp	r3, r1
 80088be:	d80c      	bhi.n	80088da <__multiply+0x9a>
 80088c0:	2e00      	cmp	r6, #0
 80088c2:	dd03      	ble.n	80088cc <__multiply+0x8c>
 80088c4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d055      	beq.n	8008978 <__multiply+0x138>
 80088cc:	6106      	str	r6, [r0, #16]
 80088ce:	b005      	add	sp, #20
 80088d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d4:	f843 2b04 	str.w	r2, [r3], #4
 80088d8:	e7d9      	b.n	800888e <__multiply+0x4e>
 80088da:	f8b1 a000 	ldrh.w	sl, [r1]
 80088de:	f1ba 0f00 	cmp.w	sl, #0
 80088e2:	d01f      	beq.n	8008924 <__multiply+0xe4>
 80088e4:	46c4      	mov	ip, r8
 80088e6:	46a1      	mov	r9, r4
 80088e8:	2700      	movs	r7, #0
 80088ea:	f85c 2b04 	ldr.w	r2, [ip], #4
 80088ee:	f8d9 3000 	ldr.w	r3, [r9]
 80088f2:	fa1f fb82 	uxth.w	fp, r2
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	fb0a 330b 	mla	r3, sl, fp, r3
 80088fc:	443b      	add	r3, r7
 80088fe:	f8d9 7000 	ldr.w	r7, [r9]
 8008902:	0c12      	lsrs	r2, r2, #16
 8008904:	0c3f      	lsrs	r7, r7, #16
 8008906:	fb0a 7202 	mla	r2, sl, r2, r7
 800890a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800890e:	b29b      	uxth	r3, r3
 8008910:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008914:	4565      	cmp	r5, ip
 8008916:	f849 3b04 	str.w	r3, [r9], #4
 800891a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800891e:	d8e4      	bhi.n	80088ea <__multiply+0xaa>
 8008920:	9b01      	ldr	r3, [sp, #4]
 8008922:	50e7      	str	r7, [r4, r3]
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800892a:	3104      	adds	r1, #4
 800892c:	f1b9 0f00 	cmp.w	r9, #0
 8008930:	d020      	beq.n	8008974 <__multiply+0x134>
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	4647      	mov	r7, r8
 8008936:	46a4      	mov	ip, r4
 8008938:	f04f 0a00 	mov.w	sl, #0
 800893c:	f8b7 b000 	ldrh.w	fp, [r7]
 8008940:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008944:	fb09 220b 	mla	r2, r9, fp, r2
 8008948:	4452      	add	r2, sl
 800894a:	b29b      	uxth	r3, r3
 800894c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008950:	f84c 3b04 	str.w	r3, [ip], #4
 8008954:	f857 3b04 	ldr.w	r3, [r7], #4
 8008958:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800895c:	f8bc 3000 	ldrh.w	r3, [ip]
 8008960:	fb09 330a 	mla	r3, r9, sl, r3
 8008964:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008968:	42bd      	cmp	r5, r7
 800896a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800896e:	d8e5      	bhi.n	800893c <__multiply+0xfc>
 8008970:	9a01      	ldr	r2, [sp, #4]
 8008972:	50a3      	str	r3, [r4, r2]
 8008974:	3404      	adds	r4, #4
 8008976:	e79f      	b.n	80088b8 <__multiply+0x78>
 8008978:	3e01      	subs	r6, #1
 800897a:	e7a1      	b.n	80088c0 <__multiply+0x80>
 800897c:	0800aee9 	.word	0x0800aee9
 8008980:	0800aefa 	.word	0x0800aefa

08008984 <__pow5mult>:
 8008984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008988:	4615      	mov	r5, r2
 800898a:	f012 0203 	ands.w	r2, r2, #3
 800898e:	4607      	mov	r7, r0
 8008990:	460e      	mov	r6, r1
 8008992:	d007      	beq.n	80089a4 <__pow5mult+0x20>
 8008994:	4c25      	ldr	r4, [pc, #148]	@ (8008a2c <__pow5mult+0xa8>)
 8008996:	3a01      	subs	r2, #1
 8008998:	2300      	movs	r3, #0
 800899a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800899e:	f7ff fe5d 	bl	800865c <__multadd>
 80089a2:	4606      	mov	r6, r0
 80089a4:	10ad      	asrs	r5, r5, #2
 80089a6:	d03d      	beq.n	8008a24 <__pow5mult+0xa0>
 80089a8:	69fc      	ldr	r4, [r7, #28]
 80089aa:	b97c      	cbnz	r4, 80089cc <__pow5mult+0x48>
 80089ac:	2010      	movs	r0, #16
 80089ae:	f7ff fd3d 	bl	800842c <malloc>
 80089b2:	4602      	mov	r2, r0
 80089b4:	61f8      	str	r0, [r7, #28]
 80089b6:	b928      	cbnz	r0, 80089c4 <__pow5mult+0x40>
 80089b8:	4b1d      	ldr	r3, [pc, #116]	@ (8008a30 <__pow5mult+0xac>)
 80089ba:	481e      	ldr	r0, [pc, #120]	@ (8008a34 <__pow5mult+0xb0>)
 80089bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80089c0:	f001 fd46 	bl	800a450 <__assert_func>
 80089c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089c8:	6004      	str	r4, [r0, #0]
 80089ca:	60c4      	str	r4, [r0, #12]
 80089cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80089d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089d4:	b94c      	cbnz	r4, 80089ea <__pow5mult+0x66>
 80089d6:	f240 2171 	movw	r1, #625	@ 0x271
 80089da:	4638      	mov	r0, r7
 80089dc:	f7ff ff1a 	bl	8008814 <__i2b>
 80089e0:	2300      	movs	r3, #0
 80089e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80089e6:	4604      	mov	r4, r0
 80089e8:	6003      	str	r3, [r0, #0]
 80089ea:	f04f 0900 	mov.w	r9, #0
 80089ee:	07eb      	lsls	r3, r5, #31
 80089f0:	d50a      	bpl.n	8008a08 <__pow5mult+0x84>
 80089f2:	4631      	mov	r1, r6
 80089f4:	4622      	mov	r2, r4
 80089f6:	4638      	mov	r0, r7
 80089f8:	f7ff ff22 	bl	8008840 <__multiply>
 80089fc:	4631      	mov	r1, r6
 80089fe:	4680      	mov	r8, r0
 8008a00:	4638      	mov	r0, r7
 8008a02:	f7ff fe09 	bl	8008618 <_Bfree>
 8008a06:	4646      	mov	r6, r8
 8008a08:	106d      	asrs	r5, r5, #1
 8008a0a:	d00b      	beq.n	8008a24 <__pow5mult+0xa0>
 8008a0c:	6820      	ldr	r0, [r4, #0]
 8008a0e:	b938      	cbnz	r0, 8008a20 <__pow5mult+0x9c>
 8008a10:	4622      	mov	r2, r4
 8008a12:	4621      	mov	r1, r4
 8008a14:	4638      	mov	r0, r7
 8008a16:	f7ff ff13 	bl	8008840 <__multiply>
 8008a1a:	6020      	str	r0, [r4, #0]
 8008a1c:	f8c0 9000 	str.w	r9, [r0]
 8008a20:	4604      	mov	r4, r0
 8008a22:	e7e4      	b.n	80089ee <__pow5mult+0x6a>
 8008a24:	4630      	mov	r0, r6
 8008a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a2a:	bf00      	nop
 8008a2c:	0800b00c 	.word	0x0800b00c
 8008a30:	0800ae7a 	.word	0x0800ae7a
 8008a34:	0800aefa 	.word	0x0800aefa

08008a38 <__lshift>:
 8008a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	6849      	ldr	r1, [r1, #4]
 8008a40:	6923      	ldr	r3, [r4, #16]
 8008a42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a46:	68a3      	ldr	r3, [r4, #8]
 8008a48:	4607      	mov	r7, r0
 8008a4a:	4691      	mov	r9, r2
 8008a4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a50:	f108 0601 	add.w	r6, r8, #1
 8008a54:	42b3      	cmp	r3, r6
 8008a56:	db0b      	blt.n	8008a70 <__lshift+0x38>
 8008a58:	4638      	mov	r0, r7
 8008a5a:	f7ff fd9d 	bl	8008598 <_Balloc>
 8008a5e:	4605      	mov	r5, r0
 8008a60:	b948      	cbnz	r0, 8008a76 <__lshift+0x3e>
 8008a62:	4602      	mov	r2, r0
 8008a64:	4b28      	ldr	r3, [pc, #160]	@ (8008b08 <__lshift+0xd0>)
 8008a66:	4829      	ldr	r0, [pc, #164]	@ (8008b0c <__lshift+0xd4>)
 8008a68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008a6c:	f001 fcf0 	bl	800a450 <__assert_func>
 8008a70:	3101      	adds	r1, #1
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	e7ee      	b.n	8008a54 <__lshift+0x1c>
 8008a76:	2300      	movs	r3, #0
 8008a78:	f100 0114 	add.w	r1, r0, #20
 8008a7c:	f100 0210 	add.w	r2, r0, #16
 8008a80:	4618      	mov	r0, r3
 8008a82:	4553      	cmp	r3, sl
 8008a84:	db33      	blt.n	8008aee <__lshift+0xb6>
 8008a86:	6920      	ldr	r0, [r4, #16]
 8008a88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a8c:	f104 0314 	add.w	r3, r4, #20
 8008a90:	f019 091f 	ands.w	r9, r9, #31
 8008a94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a9c:	d02b      	beq.n	8008af6 <__lshift+0xbe>
 8008a9e:	f1c9 0e20 	rsb	lr, r9, #32
 8008aa2:	468a      	mov	sl, r1
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	6818      	ldr	r0, [r3, #0]
 8008aa8:	fa00 f009 	lsl.w	r0, r0, r9
 8008aac:	4310      	orrs	r0, r2
 8008aae:	f84a 0b04 	str.w	r0, [sl], #4
 8008ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ab6:	459c      	cmp	ip, r3
 8008ab8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008abc:	d8f3      	bhi.n	8008aa6 <__lshift+0x6e>
 8008abe:	ebac 0304 	sub.w	r3, ip, r4
 8008ac2:	3b15      	subs	r3, #21
 8008ac4:	f023 0303 	bic.w	r3, r3, #3
 8008ac8:	3304      	adds	r3, #4
 8008aca:	f104 0015 	add.w	r0, r4, #21
 8008ace:	4560      	cmp	r0, ip
 8008ad0:	bf88      	it	hi
 8008ad2:	2304      	movhi	r3, #4
 8008ad4:	50ca      	str	r2, [r1, r3]
 8008ad6:	b10a      	cbz	r2, 8008adc <__lshift+0xa4>
 8008ad8:	f108 0602 	add.w	r6, r8, #2
 8008adc:	3e01      	subs	r6, #1
 8008ade:	4638      	mov	r0, r7
 8008ae0:	612e      	str	r6, [r5, #16]
 8008ae2:	4621      	mov	r1, r4
 8008ae4:	f7ff fd98 	bl	8008618 <_Bfree>
 8008ae8:	4628      	mov	r0, r5
 8008aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aee:	f842 0f04 	str.w	r0, [r2, #4]!
 8008af2:	3301      	adds	r3, #1
 8008af4:	e7c5      	b.n	8008a82 <__lshift+0x4a>
 8008af6:	3904      	subs	r1, #4
 8008af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008afc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b00:	459c      	cmp	ip, r3
 8008b02:	d8f9      	bhi.n	8008af8 <__lshift+0xc0>
 8008b04:	e7ea      	b.n	8008adc <__lshift+0xa4>
 8008b06:	bf00      	nop
 8008b08:	0800aee9 	.word	0x0800aee9
 8008b0c:	0800aefa 	.word	0x0800aefa

08008b10 <__mcmp>:
 8008b10:	690a      	ldr	r2, [r1, #16]
 8008b12:	4603      	mov	r3, r0
 8008b14:	6900      	ldr	r0, [r0, #16]
 8008b16:	1a80      	subs	r0, r0, r2
 8008b18:	b530      	push	{r4, r5, lr}
 8008b1a:	d10e      	bne.n	8008b3a <__mcmp+0x2a>
 8008b1c:	3314      	adds	r3, #20
 8008b1e:	3114      	adds	r1, #20
 8008b20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008b24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b30:	4295      	cmp	r5, r2
 8008b32:	d003      	beq.n	8008b3c <__mcmp+0x2c>
 8008b34:	d205      	bcs.n	8008b42 <__mcmp+0x32>
 8008b36:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3a:	bd30      	pop	{r4, r5, pc}
 8008b3c:	42a3      	cmp	r3, r4
 8008b3e:	d3f3      	bcc.n	8008b28 <__mcmp+0x18>
 8008b40:	e7fb      	b.n	8008b3a <__mcmp+0x2a>
 8008b42:	2001      	movs	r0, #1
 8008b44:	e7f9      	b.n	8008b3a <__mcmp+0x2a>
	...

08008b48 <__mdiff>:
 8008b48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4c:	4689      	mov	r9, r1
 8008b4e:	4606      	mov	r6, r0
 8008b50:	4611      	mov	r1, r2
 8008b52:	4648      	mov	r0, r9
 8008b54:	4614      	mov	r4, r2
 8008b56:	f7ff ffdb 	bl	8008b10 <__mcmp>
 8008b5a:	1e05      	subs	r5, r0, #0
 8008b5c:	d112      	bne.n	8008b84 <__mdiff+0x3c>
 8008b5e:	4629      	mov	r1, r5
 8008b60:	4630      	mov	r0, r6
 8008b62:	f7ff fd19 	bl	8008598 <_Balloc>
 8008b66:	4602      	mov	r2, r0
 8008b68:	b928      	cbnz	r0, 8008b76 <__mdiff+0x2e>
 8008b6a:	4b3f      	ldr	r3, [pc, #252]	@ (8008c68 <__mdiff+0x120>)
 8008b6c:	f240 2137 	movw	r1, #567	@ 0x237
 8008b70:	483e      	ldr	r0, [pc, #248]	@ (8008c6c <__mdiff+0x124>)
 8008b72:	f001 fc6d 	bl	800a450 <__assert_func>
 8008b76:	2301      	movs	r3, #1
 8008b78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	b003      	add	sp, #12
 8008b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b84:	bfbc      	itt	lt
 8008b86:	464b      	movlt	r3, r9
 8008b88:	46a1      	movlt	r9, r4
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b90:	bfba      	itte	lt
 8008b92:	461c      	movlt	r4, r3
 8008b94:	2501      	movlt	r5, #1
 8008b96:	2500      	movge	r5, #0
 8008b98:	f7ff fcfe 	bl	8008598 <_Balloc>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	b918      	cbnz	r0, 8008ba8 <__mdiff+0x60>
 8008ba0:	4b31      	ldr	r3, [pc, #196]	@ (8008c68 <__mdiff+0x120>)
 8008ba2:	f240 2145 	movw	r1, #581	@ 0x245
 8008ba6:	e7e3      	b.n	8008b70 <__mdiff+0x28>
 8008ba8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008bac:	6926      	ldr	r6, [r4, #16]
 8008bae:	60c5      	str	r5, [r0, #12]
 8008bb0:	f109 0310 	add.w	r3, r9, #16
 8008bb4:	f109 0514 	add.w	r5, r9, #20
 8008bb8:	f104 0e14 	add.w	lr, r4, #20
 8008bbc:	f100 0b14 	add.w	fp, r0, #20
 8008bc0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008bc4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008bc8:	9301      	str	r3, [sp, #4]
 8008bca:	46d9      	mov	r9, fp
 8008bcc:	f04f 0c00 	mov.w	ip, #0
 8008bd0:	9b01      	ldr	r3, [sp, #4]
 8008bd2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008bd6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008bda:	9301      	str	r3, [sp, #4]
 8008bdc:	fa1f f38a 	uxth.w	r3, sl
 8008be0:	4619      	mov	r1, r3
 8008be2:	b283      	uxth	r3, r0
 8008be4:	1acb      	subs	r3, r1, r3
 8008be6:	0c00      	lsrs	r0, r0, #16
 8008be8:	4463      	add	r3, ip
 8008bea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008bee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008bf8:	4576      	cmp	r6, lr
 8008bfa:	f849 3b04 	str.w	r3, [r9], #4
 8008bfe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c02:	d8e5      	bhi.n	8008bd0 <__mdiff+0x88>
 8008c04:	1b33      	subs	r3, r6, r4
 8008c06:	3b15      	subs	r3, #21
 8008c08:	f023 0303 	bic.w	r3, r3, #3
 8008c0c:	3415      	adds	r4, #21
 8008c0e:	3304      	adds	r3, #4
 8008c10:	42a6      	cmp	r6, r4
 8008c12:	bf38      	it	cc
 8008c14:	2304      	movcc	r3, #4
 8008c16:	441d      	add	r5, r3
 8008c18:	445b      	add	r3, fp
 8008c1a:	461e      	mov	r6, r3
 8008c1c:	462c      	mov	r4, r5
 8008c1e:	4544      	cmp	r4, r8
 8008c20:	d30e      	bcc.n	8008c40 <__mdiff+0xf8>
 8008c22:	f108 0103 	add.w	r1, r8, #3
 8008c26:	1b49      	subs	r1, r1, r5
 8008c28:	f021 0103 	bic.w	r1, r1, #3
 8008c2c:	3d03      	subs	r5, #3
 8008c2e:	45a8      	cmp	r8, r5
 8008c30:	bf38      	it	cc
 8008c32:	2100      	movcc	r1, #0
 8008c34:	440b      	add	r3, r1
 8008c36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c3a:	b191      	cbz	r1, 8008c62 <__mdiff+0x11a>
 8008c3c:	6117      	str	r7, [r2, #16]
 8008c3e:	e79d      	b.n	8008b7c <__mdiff+0x34>
 8008c40:	f854 1b04 	ldr.w	r1, [r4], #4
 8008c44:	46e6      	mov	lr, ip
 8008c46:	0c08      	lsrs	r0, r1, #16
 8008c48:	fa1c fc81 	uxtah	ip, ip, r1
 8008c4c:	4471      	add	r1, lr
 8008c4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008c52:	b289      	uxth	r1, r1
 8008c54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008c58:	f846 1b04 	str.w	r1, [r6], #4
 8008c5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c60:	e7dd      	b.n	8008c1e <__mdiff+0xd6>
 8008c62:	3f01      	subs	r7, #1
 8008c64:	e7e7      	b.n	8008c36 <__mdiff+0xee>
 8008c66:	bf00      	nop
 8008c68:	0800aee9 	.word	0x0800aee9
 8008c6c:	0800aefa 	.word	0x0800aefa

08008c70 <__ulp>:
 8008c70:	b082      	sub	sp, #8
 8008c72:	ed8d 0b00 	vstr	d0, [sp]
 8008c76:	9a01      	ldr	r2, [sp, #4]
 8008c78:	4b0f      	ldr	r3, [pc, #60]	@ (8008cb8 <__ulp+0x48>)
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	dc08      	bgt.n	8008c96 <__ulp+0x26>
 8008c84:	425b      	negs	r3, r3
 8008c86:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008c8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008c8e:	da04      	bge.n	8008c9a <__ulp+0x2a>
 8008c90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008c94:	4113      	asrs	r3, r2
 8008c96:	2200      	movs	r2, #0
 8008c98:	e008      	b.n	8008cac <__ulp+0x3c>
 8008c9a:	f1a2 0314 	sub.w	r3, r2, #20
 8008c9e:	2b1e      	cmp	r3, #30
 8008ca0:	bfda      	itte	le
 8008ca2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008ca6:	40da      	lsrle	r2, r3
 8008ca8:	2201      	movgt	r2, #1
 8008caa:	2300      	movs	r3, #0
 8008cac:	4619      	mov	r1, r3
 8008cae:	4610      	mov	r0, r2
 8008cb0:	ec41 0b10 	vmov	d0, r0, r1
 8008cb4:	b002      	add	sp, #8
 8008cb6:	4770      	bx	lr
 8008cb8:	7ff00000 	.word	0x7ff00000

08008cbc <__b2d>:
 8008cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc0:	6906      	ldr	r6, [r0, #16]
 8008cc2:	f100 0814 	add.w	r8, r0, #20
 8008cc6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008cca:	1f37      	subs	r7, r6, #4
 8008ccc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	f7ff fd53 	bl	800877c <__hi0bits>
 8008cd6:	f1c0 0320 	rsb	r3, r0, #32
 8008cda:	280a      	cmp	r0, #10
 8008cdc:	600b      	str	r3, [r1, #0]
 8008cde:	491b      	ldr	r1, [pc, #108]	@ (8008d4c <__b2d+0x90>)
 8008ce0:	dc15      	bgt.n	8008d0e <__b2d+0x52>
 8008ce2:	f1c0 0c0b 	rsb	ip, r0, #11
 8008ce6:	fa22 f30c 	lsr.w	r3, r2, ip
 8008cea:	45b8      	cmp	r8, r7
 8008cec:	ea43 0501 	orr.w	r5, r3, r1
 8008cf0:	bf34      	ite	cc
 8008cf2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008cf6:	2300      	movcs	r3, #0
 8008cf8:	3015      	adds	r0, #21
 8008cfa:	fa02 f000 	lsl.w	r0, r2, r0
 8008cfe:	fa23 f30c 	lsr.w	r3, r3, ip
 8008d02:	4303      	orrs	r3, r0
 8008d04:	461c      	mov	r4, r3
 8008d06:	ec45 4b10 	vmov	d0, r4, r5
 8008d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d0e:	45b8      	cmp	r8, r7
 8008d10:	bf3a      	itte	cc
 8008d12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008d16:	f1a6 0708 	subcc.w	r7, r6, #8
 8008d1a:	2300      	movcs	r3, #0
 8008d1c:	380b      	subs	r0, #11
 8008d1e:	d012      	beq.n	8008d46 <__b2d+0x8a>
 8008d20:	f1c0 0120 	rsb	r1, r0, #32
 8008d24:	fa23 f401 	lsr.w	r4, r3, r1
 8008d28:	4082      	lsls	r2, r0
 8008d2a:	4322      	orrs	r2, r4
 8008d2c:	4547      	cmp	r7, r8
 8008d2e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008d32:	bf8c      	ite	hi
 8008d34:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008d38:	2200      	movls	r2, #0
 8008d3a:	4083      	lsls	r3, r0
 8008d3c:	40ca      	lsrs	r2, r1
 8008d3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008d42:	4313      	orrs	r3, r2
 8008d44:	e7de      	b.n	8008d04 <__b2d+0x48>
 8008d46:	ea42 0501 	orr.w	r5, r2, r1
 8008d4a:	e7db      	b.n	8008d04 <__b2d+0x48>
 8008d4c:	3ff00000 	.word	0x3ff00000

08008d50 <__d2b>:
 8008d50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d54:	460f      	mov	r7, r1
 8008d56:	2101      	movs	r1, #1
 8008d58:	ec59 8b10 	vmov	r8, r9, d0
 8008d5c:	4616      	mov	r6, r2
 8008d5e:	f7ff fc1b 	bl	8008598 <_Balloc>
 8008d62:	4604      	mov	r4, r0
 8008d64:	b930      	cbnz	r0, 8008d74 <__d2b+0x24>
 8008d66:	4602      	mov	r2, r0
 8008d68:	4b23      	ldr	r3, [pc, #140]	@ (8008df8 <__d2b+0xa8>)
 8008d6a:	4824      	ldr	r0, [pc, #144]	@ (8008dfc <__d2b+0xac>)
 8008d6c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008d70:	f001 fb6e 	bl	800a450 <__assert_func>
 8008d74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d7c:	b10d      	cbz	r5, 8008d82 <__d2b+0x32>
 8008d7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d82:	9301      	str	r3, [sp, #4]
 8008d84:	f1b8 0300 	subs.w	r3, r8, #0
 8008d88:	d023      	beq.n	8008dd2 <__d2b+0x82>
 8008d8a:	4668      	mov	r0, sp
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	f7ff fd14 	bl	80087ba <__lo0bits>
 8008d92:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d96:	b1d0      	cbz	r0, 8008dce <__d2b+0x7e>
 8008d98:	f1c0 0320 	rsb	r3, r0, #32
 8008d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008da0:	430b      	orrs	r3, r1
 8008da2:	40c2      	lsrs	r2, r0
 8008da4:	6163      	str	r3, [r4, #20]
 8008da6:	9201      	str	r2, [sp, #4]
 8008da8:	9b01      	ldr	r3, [sp, #4]
 8008daa:	61a3      	str	r3, [r4, #24]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	bf0c      	ite	eq
 8008db0:	2201      	moveq	r2, #1
 8008db2:	2202      	movne	r2, #2
 8008db4:	6122      	str	r2, [r4, #16]
 8008db6:	b1a5      	cbz	r5, 8008de2 <__d2b+0x92>
 8008db8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008dbc:	4405      	add	r5, r0
 8008dbe:	603d      	str	r5, [r7, #0]
 8008dc0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008dc4:	6030      	str	r0, [r6, #0]
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	b003      	add	sp, #12
 8008dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dce:	6161      	str	r1, [r4, #20]
 8008dd0:	e7ea      	b.n	8008da8 <__d2b+0x58>
 8008dd2:	a801      	add	r0, sp, #4
 8008dd4:	f7ff fcf1 	bl	80087ba <__lo0bits>
 8008dd8:	9b01      	ldr	r3, [sp, #4]
 8008dda:	6163      	str	r3, [r4, #20]
 8008ddc:	3020      	adds	r0, #32
 8008dde:	2201      	movs	r2, #1
 8008de0:	e7e8      	b.n	8008db4 <__d2b+0x64>
 8008de2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008de6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008dea:	6038      	str	r0, [r7, #0]
 8008dec:	6918      	ldr	r0, [r3, #16]
 8008dee:	f7ff fcc5 	bl	800877c <__hi0bits>
 8008df2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008df6:	e7e5      	b.n	8008dc4 <__d2b+0x74>
 8008df8:	0800aee9 	.word	0x0800aee9
 8008dfc:	0800aefa 	.word	0x0800aefa

08008e00 <__ratio>:
 8008e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e04:	b085      	sub	sp, #20
 8008e06:	e9cd 1000 	strd	r1, r0, [sp]
 8008e0a:	a902      	add	r1, sp, #8
 8008e0c:	f7ff ff56 	bl	8008cbc <__b2d>
 8008e10:	9800      	ldr	r0, [sp, #0]
 8008e12:	a903      	add	r1, sp, #12
 8008e14:	ec55 4b10 	vmov	r4, r5, d0
 8008e18:	f7ff ff50 	bl	8008cbc <__b2d>
 8008e1c:	9b01      	ldr	r3, [sp, #4]
 8008e1e:	6919      	ldr	r1, [r3, #16]
 8008e20:	9b00      	ldr	r3, [sp, #0]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	1ac9      	subs	r1, r1, r3
 8008e26:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008e2a:	1a9b      	subs	r3, r3, r2
 8008e2c:	ec5b ab10 	vmov	sl, fp, d0
 8008e30:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	bfce      	itee	gt
 8008e38:	462a      	movgt	r2, r5
 8008e3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008e3e:	465a      	movle	r2, fp
 8008e40:	462f      	mov	r7, r5
 8008e42:	46d9      	mov	r9, fp
 8008e44:	bfcc      	ite	gt
 8008e46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008e4a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008e4e:	464b      	mov	r3, r9
 8008e50:	4652      	mov	r2, sl
 8008e52:	4620      	mov	r0, r4
 8008e54:	4639      	mov	r1, r7
 8008e56:	f7f7 fd19 	bl	800088c <__aeabi_ddiv>
 8008e5a:	ec41 0b10 	vmov	d0, r0, r1
 8008e5e:	b005      	add	sp, #20
 8008e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e64 <__copybits>:
 8008e64:	3901      	subs	r1, #1
 8008e66:	b570      	push	{r4, r5, r6, lr}
 8008e68:	1149      	asrs	r1, r1, #5
 8008e6a:	6914      	ldr	r4, [r2, #16]
 8008e6c:	3101      	adds	r1, #1
 8008e6e:	f102 0314 	add.w	r3, r2, #20
 8008e72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008e76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008e7a:	1f05      	subs	r5, r0, #4
 8008e7c:	42a3      	cmp	r3, r4
 8008e7e:	d30c      	bcc.n	8008e9a <__copybits+0x36>
 8008e80:	1aa3      	subs	r3, r4, r2
 8008e82:	3b11      	subs	r3, #17
 8008e84:	f023 0303 	bic.w	r3, r3, #3
 8008e88:	3211      	adds	r2, #17
 8008e8a:	42a2      	cmp	r2, r4
 8008e8c:	bf88      	it	hi
 8008e8e:	2300      	movhi	r3, #0
 8008e90:	4418      	add	r0, r3
 8008e92:	2300      	movs	r3, #0
 8008e94:	4288      	cmp	r0, r1
 8008e96:	d305      	bcc.n	8008ea4 <__copybits+0x40>
 8008e98:	bd70      	pop	{r4, r5, r6, pc}
 8008e9a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008e9e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008ea2:	e7eb      	b.n	8008e7c <__copybits+0x18>
 8008ea4:	f840 3b04 	str.w	r3, [r0], #4
 8008ea8:	e7f4      	b.n	8008e94 <__copybits+0x30>

08008eaa <__any_on>:
 8008eaa:	f100 0214 	add.w	r2, r0, #20
 8008eae:	6900      	ldr	r0, [r0, #16]
 8008eb0:	114b      	asrs	r3, r1, #5
 8008eb2:	4298      	cmp	r0, r3
 8008eb4:	b510      	push	{r4, lr}
 8008eb6:	db11      	blt.n	8008edc <__any_on+0x32>
 8008eb8:	dd0a      	ble.n	8008ed0 <__any_on+0x26>
 8008eba:	f011 011f 	ands.w	r1, r1, #31
 8008ebe:	d007      	beq.n	8008ed0 <__any_on+0x26>
 8008ec0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008ec4:	fa24 f001 	lsr.w	r0, r4, r1
 8008ec8:	fa00 f101 	lsl.w	r1, r0, r1
 8008ecc:	428c      	cmp	r4, r1
 8008ece:	d10b      	bne.n	8008ee8 <__any_on+0x3e>
 8008ed0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d803      	bhi.n	8008ee0 <__any_on+0x36>
 8008ed8:	2000      	movs	r0, #0
 8008eda:	bd10      	pop	{r4, pc}
 8008edc:	4603      	mov	r3, r0
 8008ede:	e7f7      	b.n	8008ed0 <__any_on+0x26>
 8008ee0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ee4:	2900      	cmp	r1, #0
 8008ee6:	d0f5      	beq.n	8008ed4 <__any_on+0x2a>
 8008ee8:	2001      	movs	r0, #1
 8008eea:	e7f6      	b.n	8008eda <__any_on+0x30>

08008eec <sulp>:
 8008eec:	b570      	push	{r4, r5, r6, lr}
 8008eee:	4604      	mov	r4, r0
 8008ef0:	460d      	mov	r5, r1
 8008ef2:	ec45 4b10 	vmov	d0, r4, r5
 8008ef6:	4616      	mov	r6, r2
 8008ef8:	f7ff feba 	bl	8008c70 <__ulp>
 8008efc:	ec51 0b10 	vmov	r0, r1, d0
 8008f00:	b17e      	cbz	r6, 8008f22 <sulp+0x36>
 8008f02:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008f06:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	dd09      	ble.n	8008f22 <sulp+0x36>
 8008f0e:	051b      	lsls	r3, r3, #20
 8008f10:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008f14:	2400      	movs	r4, #0
 8008f16:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008f1a:	4622      	mov	r2, r4
 8008f1c:	462b      	mov	r3, r5
 8008f1e:	f7f7 fb8b 	bl	8000638 <__aeabi_dmul>
 8008f22:	ec41 0b10 	vmov	d0, r0, r1
 8008f26:	bd70      	pop	{r4, r5, r6, pc}

08008f28 <_strtod_l>:
 8008f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2c:	b09f      	sub	sp, #124	@ 0x7c
 8008f2e:	460c      	mov	r4, r1
 8008f30:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008f32:	2200      	movs	r2, #0
 8008f34:	921a      	str	r2, [sp, #104]	@ 0x68
 8008f36:	9005      	str	r0, [sp, #20]
 8008f38:	f04f 0a00 	mov.w	sl, #0
 8008f3c:	f04f 0b00 	mov.w	fp, #0
 8008f40:	460a      	mov	r2, r1
 8008f42:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f44:	7811      	ldrb	r1, [r2, #0]
 8008f46:	292b      	cmp	r1, #43	@ 0x2b
 8008f48:	d04a      	beq.n	8008fe0 <_strtod_l+0xb8>
 8008f4a:	d838      	bhi.n	8008fbe <_strtod_l+0x96>
 8008f4c:	290d      	cmp	r1, #13
 8008f4e:	d832      	bhi.n	8008fb6 <_strtod_l+0x8e>
 8008f50:	2908      	cmp	r1, #8
 8008f52:	d832      	bhi.n	8008fba <_strtod_l+0x92>
 8008f54:	2900      	cmp	r1, #0
 8008f56:	d03b      	beq.n	8008fd0 <_strtod_l+0xa8>
 8008f58:	2200      	movs	r2, #0
 8008f5a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f5c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008f5e:	782a      	ldrb	r2, [r5, #0]
 8008f60:	2a30      	cmp	r2, #48	@ 0x30
 8008f62:	f040 80b2 	bne.w	80090ca <_strtod_l+0x1a2>
 8008f66:	786a      	ldrb	r2, [r5, #1]
 8008f68:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008f6c:	2a58      	cmp	r2, #88	@ 0x58
 8008f6e:	d16e      	bne.n	800904e <_strtod_l+0x126>
 8008f70:	9302      	str	r3, [sp, #8]
 8008f72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f74:	9301      	str	r3, [sp, #4]
 8008f76:	ab1a      	add	r3, sp, #104	@ 0x68
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	4a8f      	ldr	r2, [pc, #572]	@ (80091b8 <_strtod_l+0x290>)
 8008f7c:	9805      	ldr	r0, [sp, #20]
 8008f7e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008f80:	a919      	add	r1, sp, #100	@ 0x64
 8008f82:	f001 faff 	bl	800a584 <__gethex>
 8008f86:	f010 060f 	ands.w	r6, r0, #15
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	d005      	beq.n	8008f9a <_strtod_l+0x72>
 8008f8e:	2e06      	cmp	r6, #6
 8008f90:	d128      	bne.n	8008fe4 <_strtod_l+0xbc>
 8008f92:	3501      	adds	r5, #1
 8008f94:	2300      	movs	r3, #0
 8008f96:	9519      	str	r5, [sp, #100]	@ 0x64
 8008f98:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f040 858e 	bne.w	8009abe <_strtod_l+0xb96>
 8008fa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fa4:	b1cb      	cbz	r3, 8008fda <_strtod_l+0xb2>
 8008fa6:	4652      	mov	r2, sl
 8008fa8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008fac:	ec43 2b10 	vmov	d0, r2, r3
 8008fb0:	b01f      	add	sp, #124	@ 0x7c
 8008fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb6:	2920      	cmp	r1, #32
 8008fb8:	d1ce      	bne.n	8008f58 <_strtod_l+0x30>
 8008fba:	3201      	adds	r2, #1
 8008fbc:	e7c1      	b.n	8008f42 <_strtod_l+0x1a>
 8008fbe:	292d      	cmp	r1, #45	@ 0x2d
 8008fc0:	d1ca      	bne.n	8008f58 <_strtod_l+0x30>
 8008fc2:	2101      	movs	r1, #1
 8008fc4:	910e      	str	r1, [sp, #56]	@ 0x38
 8008fc6:	1c51      	adds	r1, r2, #1
 8008fc8:	9119      	str	r1, [sp, #100]	@ 0x64
 8008fca:	7852      	ldrb	r2, [r2, #1]
 8008fcc:	2a00      	cmp	r2, #0
 8008fce:	d1c5      	bne.n	8008f5c <_strtod_l+0x34>
 8008fd0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008fd2:	9419      	str	r4, [sp, #100]	@ 0x64
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f040 8570 	bne.w	8009aba <_strtod_l+0xb92>
 8008fda:	4652      	mov	r2, sl
 8008fdc:	465b      	mov	r3, fp
 8008fde:	e7e5      	b.n	8008fac <_strtod_l+0x84>
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	e7ef      	b.n	8008fc4 <_strtod_l+0x9c>
 8008fe4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008fe6:	b13a      	cbz	r2, 8008ff8 <_strtod_l+0xd0>
 8008fe8:	2135      	movs	r1, #53	@ 0x35
 8008fea:	a81c      	add	r0, sp, #112	@ 0x70
 8008fec:	f7ff ff3a 	bl	8008e64 <__copybits>
 8008ff0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ff2:	9805      	ldr	r0, [sp, #20]
 8008ff4:	f7ff fb10 	bl	8008618 <_Bfree>
 8008ff8:	3e01      	subs	r6, #1
 8008ffa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008ffc:	2e04      	cmp	r6, #4
 8008ffe:	d806      	bhi.n	800900e <_strtod_l+0xe6>
 8009000:	e8df f006 	tbb	[pc, r6]
 8009004:	201d0314 	.word	0x201d0314
 8009008:	14          	.byte	0x14
 8009009:	00          	.byte	0x00
 800900a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800900e:	05e1      	lsls	r1, r4, #23
 8009010:	bf48      	it	mi
 8009012:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009016:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800901a:	0d1b      	lsrs	r3, r3, #20
 800901c:	051b      	lsls	r3, r3, #20
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1bb      	bne.n	8008f9a <_strtod_l+0x72>
 8009022:	f7fe fb2d 	bl	8007680 <__errno>
 8009026:	2322      	movs	r3, #34	@ 0x22
 8009028:	6003      	str	r3, [r0, #0]
 800902a:	e7b6      	b.n	8008f9a <_strtod_l+0x72>
 800902c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009030:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009034:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009038:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800903c:	e7e7      	b.n	800900e <_strtod_l+0xe6>
 800903e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80091c0 <_strtod_l+0x298>
 8009042:	e7e4      	b.n	800900e <_strtod_l+0xe6>
 8009044:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009048:	f04f 3aff 	mov.w	sl, #4294967295
 800904c:	e7df      	b.n	800900e <_strtod_l+0xe6>
 800904e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009050:	1c5a      	adds	r2, r3, #1
 8009052:	9219      	str	r2, [sp, #100]	@ 0x64
 8009054:	785b      	ldrb	r3, [r3, #1]
 8009056:	2b30      	cmp	r3, #48	@ 0x30
 8009058:	d0f9      	beq.n	800904e <_strtod_l+0x126>
 800905a:	2b00      	cmp	r3, #0
 800905c:	d09d      	beq.n	8008f9a <_strtod_l+0x72>
 800905e:	2301      	movs	r3, #1
 8009060:	2700      	movs	r7, #0
 8009062:	9308      	str	r3, [sp, #32]
 8009064:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009066:	930c      	str	r3, [sp, #48]	@ 0x30
 8009068:	970b      	str	r7, [sp, #44]	@ 0x2c
 800906a:	46b9      	mov	r9, r7
 800906c:	220a      	movs	r2, #10
 800906e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009070:	7805      	ldrb	r5, [r0, #0]
 8009072:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009076:	b2d9      	uxtb	r1, r3
 8009078:	2909      	cmp	r1, #9
 800907a:	d928      	bls.n	80090ce <_strtod_l+0x1a6>
 800907c:	494f      	ldr	r1, [pc, #316]	@ (80091bc <_strtod_l+0x294>)
 800907e:	2201      	movs	r2, #1
 8009080:	f001 f9ac 	bl	800a3dc <strncmp>
 8009084:	2800      	cmp	r0, #0
 8009086:	d032      	beq.n	80090ee <_strtod_l+0x1c6>
 8009088:	2000      	movs	r0, #0
 800908a:	462a      	mov	r2, r5
 800908c:	900a      	str	r0, [sp, #40]	@ 0x28
 800908e:	464d      	mov	r5, r9
 8009090:	4603      	mov	r3, r0
 8009092:	2a65      	cmp	r2, #101	@ 0x65
 8009094:	d001      	beq.n	800909a <_strtod_l+0x172>
 8009096:	2a45      	cmp	r2, #69	@ 0x45
 8009098:	d114      	bne.n	80090c4 <_strtod_l+0x19c>
 800909a:	b91d      	cbnz	r5, 80090a4 <_strtod_l+0x17c>
 800909c:	9a08      	ldr	r2, [sp, #32]
 800909e:	4302      	orrs	r2, r0
 80090a0:	d096      	beq.n	8008fd0 <_strtod_l+0xa8>
 80090a2:	2500      	movs	r5, #0
 80090a4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80090a6:	1c62      	adds	r2, r4, #1
 80090a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80090aa:	7862      	ldrb	r2, [r4, #1]
 80090ac:	2a2b      	cmp	r2, #43	@ 0x2b
 80090ae:	d07a      	beq.n	80091a6 <_strtod_l+0x27e>
 80090b0:	2a2d      	cmp	r2, #45	@ 0x2d
 80090b2:	d07e      	beq.n	80091b2 <_strtod_l+0x28a>
 80090b4:	f04f 0c00 	mov.w	ip, #0
 80090b8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80090bc:	2909      	cmp	r1, #9
 80090be:	f240 8085 	bls.w	80091cc <_strtod_l+0x2a4>
 80090c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80090c4:	f04f 0800 	mov.w	r8, #0
 80090c8:	e0a5      	b.n	8009216 <_strtod_l+0x2ee>
 80090ca:	2300      	movs	r3, #0
 80090cc:	e7c8      	b.n	8009060 <_strtod_l+0x138>
 80090ce:	f1b9 0f08 	cmp.w	r9, #8
 80090d2:	bfd8      	it	le
 80090d4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80090d6:	f100 0001 	add.w	r0, r0, #1
 80090da:	bfda      	itte	le
 80090dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80090e0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80090e2:	fb02 3707 	mlagt	r7, r2, r7, r3
 80090e6:	f109 0901 	add.w	r9, r9, #1
 80090ea:	9019      	str	r0, [sp, #100]	@ 0x64
 80090ec:	e7bf      	b.n	800906e <_strtod_l+0x146>
 80090ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090f0:	1c5a      	adds	r2, r3, #1
 80090f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80090f4:	785a      	ldrb	r2, [r3, #1]
 80090f6:	f1b9 0f00 	cmp.w	r9, #0
 80090fa:	d03b      	beq.n	8009174 <_strtod_l+0x24c>
 80090fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80090fe:	464d      	mov	r5, r9
 8009100:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009104:	2b09      	cmp	r3, #9
 8009106:	d912      	bls.n	800912e <_strtod_l+0x206>
 8009108:	2301      	movs	r3, #1
 800910a:	e7c2      	b.n	8009092 <_strtod_l+0x16a>
 800910c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	9219      	str	r2, [sp, #100]	@ 0x64
 8009112:	785a      	ldrb	r2, [r3, #1]
 8009114:	3001      	adds	r0, #1
 8009116:	2a30      	cmp	r2, #48	@ 0x30
 8009118:	d0f8      	beq.n	800910c <_strtod_l+0x1e4>
 800911a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800911e:	2b08      	cmp	r3, #8
 8009120:	f200 84d2 	bhi.w	8009ac8 <_strtod_l+0xba0>
 8009124:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009126:	900a      	str	r0, [sp, #40]	@ 0x28
 8009128:	2000      	movs	r0, #0
 800912a:	930c      	str	r3, [sp, #48]	@ 0x30
 800912c:	4605      	mov	r5, r0
 800912e:	3a30      	subs	r2, #48	@ 0x30
 8009130:	f100 0301 	add.w	r3, r0, #1
 8009134:	d018      	beq.n	8009168 <_strtod_l+0x240>
 8009136:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009138:	4419      	add	r1, r3
 800913a:	910a      	str	r1, [sp, #40]	@ 0x28
 800913c:	462e      	mov	r6, r5
 800913e:	f04f 0e0a 	mov.w	lr, #10
 8009142:	1c71      	adds	r1, r6, #1
 8009144:	eba1 0c05 	sub.w	ip, r1, r5
 8009148:	4563      	cmp	r3, ip
 800914a:	dc15      	bgt.n	8009178 <_strtod_l+0x250>
 800914c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009150:	182b      	adds	r3, r5, r0
 8009152:	2b08      	cmp	r3, #8
 8009154:	f105 0501 	add.w	r5, r5, #1
 8009158:	4405      	add	r5, r0
 800915a:	dc1a      	bgt.n	8009192 <_strtod_l+0x26a>
 800915c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800915e:	230a      	movs	r3, #10
 8009160:	fb03 2301 	mla	r3, r3, r1, r2
 8009164:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009166:	2300      	movs	r3, #0
 8009168:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800916a:	1c51      	adds	r1, r2, #1
 800916c:	9119      	str	r1, [sp, #100]	@ 0x64
 800916e:	7852      	ldrb	r2, [r2, #1]
 8009170:	4618      	mov	r0, r3
 8009172:	e7c5      	b.n	8009100 <_strtod_l+0x1d8>
 8009174:	4648      	mov	r0, r9
 8009176:	e7ce      	b.n	8009116 <_strtod_l+0x1ee>
 8009178:	2e08      	cmp	r6, #8
 800917a:	dc05      	bgt.n	8009188 <_strtod_l+0x260>
 800917c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800917e:	fb0e f606 	mul.w	r6, lr, r6
 8009182:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009184:	460e      	mov	r6, r1
 8009186:	e7dc      	b.n	8009142 <_strtod_l+0x21a>
 8009188:	2910      	cmp	r1, #16
 800918a:	bfd8      	it	le
 800918c:	fb0e f707 	mulle.w	r7, lr, r7
 8009190:	e7f8      	b.n	8009184 <_strtod_l+0x25c>
 8009192:	2b0f      	cmp	r3, #15
 8009194:	bfdc      	itt	le
 8009196:	230a      	movle	r3, #10
 8009198:	fb03 2707 	mlale	r7, r3, r7, r2
 800919c:	e7e3      	b.n	8009166 <_strtod_l+0x23e>
 800919e:	2300      	movs	r3, #0
 80091a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80091a2:	2301      	movs	r3, #1
 80091a4:	e77a      	b.n	800909c <_strtod_l+0x174>
 80091a6:	f04f 0c00 	mov.w	ip, #0
 80091aa:	1ca2      	adds	r2, r4, #2
 80091ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80091ae:	78a2      	ldrb	r2, [r4, #2]
 80091b0:	e782      	b.n	80090b8 <_strtod_l+0x190>
 80091b2:	f04f 0c01 	mov.w	ip, #1
 80091b6:	e7f8      	b.n	80091aa <_strtod_l+0x282>
 80091b8:	0800b11c 	.word	0x0800b11c
 80091bc:	0800af53 	.word	0x0800af53
 80091c0:	7ff00000 	.word	0x7ff00000
 80091c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80091c6:	1c51      	adds	r1, r2, #1
 80091c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80091ca:	7852      	ldrb	r2, [r2, #1]
 80091cc:	2a30      	cmp	r2, #48	@ 0x30
 80091ce:	d0f9      	beq.n	80091c4 <_strtod_l+0x29c>
 80091d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80091d4:	2908      	cmp	r1, #8
 80091d6:	f63f af75 	bhi.w	80090c4 <_strtod_l+0x19c>
 80091da:	3a30      	subs	r2, #48	@ 0x30
 80091dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80091de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80091e0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80091e2:	f04f 080a 	mov.w	r8, #10
 80091e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80091e8:	1c56      	adds	r6, r2, #1
 80091ea:	9619      	str	r6, [sp, #100]	@ 0x64
 80091ec:	7852      	ldrb	r2, [r2, #1]
 80091ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80091f2:	f1be 0f09 	cmp.w	lr, #9
 80091f6:	d939      	bls.n	800926c <_strtod_l+0x344>
 80091f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80091fa:	1a76      	subs	r6, r6, r1
 80091fc:	2e08      	cmp	r6, #8
 80091fe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009202:	dc03      	bgt.n	800920c <_strtod_l+0x2e4>
 8009204:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009206:	4588      	cmp	r8, r1
 8009208:	bfa8      	it	ge
 800920a:	4688      	movge	r8, r1
 800920c:	f1bc 0f00 	cmp.w	ip, #0
 8009210:	d001      	beq.n	8009216 <_strtod_l+0x2ee>
 8009212:	f1c8 0800 	rsb	r8, r8, #0
 8009216:	2d00      	cmp	r5, #0
 8009218:	d14e      	bne.n	80092b8 <_strtod_l+0x390>
 800921a:	9908      	ldr	r1, [sp, #32]
 800921c:	4308      	orrs	r0, r1
 800921e:	f47f aebc 	bne.w	8008f9a <_strtod_l+0x72>
 8009222:	2b00      	cmp	r3, #0
 8009224:	f47f aed4 	bne.w	8008fd0 <_strtod_l+0xa8>
 8009228:	2a69      	cmp	r2, #105	@ 0x69
 800922a:	d028      	beq.n	800927e <_strtod_l+0x356>
 800922c:	dc25      	bgt.n	800927a <_strtod_l+0x352>
 800922e:	2a49      	cmp	r2, #73	@ 0x49
 8009230:	d025      	beq.n	800927e <_strtod_l+0x356>
 8009232:	2a4e      	cmp	r2, #78	@ 0x4e
 8009234:	f47f aecc 	bne.w	8008fd0 <_strtod_l+0xa8>
 8009238:	499a      	ldr	r1, [pc, #616]	@ (80094a4 <_strtod_l+0x57c>)
 800923a:	a819      	add	r0, sp, #100	@ 0x64
 800923c:	f001 fbc4 	bl	800a9c8 <__match>
 8009240:	2800      	cmp	r0, #0
 8009242:	f43f aec5 	beq.w	8008fd0 <_strtod_l+0xa8>
 8009246:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	2b28      	cmp	r3, #40	@ 0x28
 800924c:	d12e      	bne.n	80092ac <_strtod_l+0x384>
 800924e:	4996      	ldr	r1, [pc, #600]	@ (80094a8 <_strtod_l+0x580>)
 8009250:	aa1c      	add	r2, sp, #112	@ 0x70
 8009252:	a819      	add	r0, sp, #100	@ 0x64
 8009254:	f001 fbcc 	bl	800a9f0 <__hexnan>
 8009258:	2805      	cmp	r0, #5
 800925a:	d127      	bne.n	80092ac <_strtod_l+0x384>
 800925c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800925e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009262:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009266:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800926a:	e696      	b.n	8008f9a <_strtod_l+0x72>
 800926c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800926e:	fb08 2101 	mla	r1, r8, r1, r2
 8009272:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009276:	9209      	str	r2, [sp, #36]	@ 0x24
 8009278:	e7b5      	b.n	80091e6 <_strtod_l+0x2be>
 800927a:	2a6e      	cmp	r2, #110	@ 0x6e
 800927c:	e7da      	b.n	8009234 <_strtod_l+0x30c>
 800927e:	498b      	ldr	r1, [pc, #556]	@ (80094ac <_strtod_l+0x584>)
 8009280:	a819      	add	r0, sp, #100	@ 0x64
 8009282:	f001 fba1 	bl	800a9c8 <__match>
 8009286:	2800      	cmp	r0, #0
 8009288:	f43f aea2 	beq.w	8008fd0 <_strtod_l+0xa8>
 800928c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800928e:	4988      	ldr	r1, [pc, #544]	@ (80094b0 <_strtod_l+0x588>)
 8009290:	3b01      	subs	r3, #1
 8009292:	a819      	add	r0, sp, #100	@ 0x64
 8009294:	9319      	str	r3, [sp, #100]	@ 0x64
 8009296:	f001 fb97 	bl	800a9c8 <__match>
 800929a:	b910      	cbnz	r0, 80092a2 <_strtod_l+0x37a>
 800929c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800929e:	3301      	adds	r3, #1
 80092a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80092a2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80094c0 <_strtod_l+0x598>
 80092a6:	f04f 0a00 	mov.w	sl, #0
 80092aa:	e676      	b.n	8008f9a <_strtod_l+0x72>
 80092ac:	4881      	ldr	r0, [pc, #516]	@ (80094b4 <_strtod_l+0x58c>)
 80092ae:	f001 f8c7 	bl	800a440 <nan>
 80092b2:	ec5b ab10 	vmov	sl, fp, d0
 80092b6:	e670      	b.n	8008f9a <_strtod_l+0x72>
 80092b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092ba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80092bc:	eba8 0303 	sub.w	r3, r8, r3
 80092c0:	f1b9 0f00 	cmp.w	r9, #0
 80092c4:	bf08      	it	eq
 80092c6:	46a9      	moveq	r9, r5
 80092c8:	2d10      	cmp	r5, #16
 80092ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80092cc:	462c      	mov	r4, r5
 80092ce:	bfa8      	it	ge
 80092d0:	2410      	movge	r4, #16
 80092d2:	f7f7 f937 	bl	8000544 <__aeabi_ui2d>
 80092d6:	2d09      	cmp	r5, #9
 80092d8:	4682      	mov	sl, r0
 80092da:	468b      	mov	fp, r1
 80092dc:	dc13      	bgt.n	8009306 <_strtod_l+0x3de>
 80092de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f43f ae5a 	beq.w	8008f9a <_strtod_l+0x72>
 80092e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e8:	dd78      	ble.n	80093dc <_strtod_l+0x4b4>
 80092ea:	2b16      	cmp	r3, #22
 80092ec:	dc5f      	bgt.n	80093ae <_strtod_l+0x486>
 80092ee:	4972      	ldr	r1, [pc, #456]	@ (80094b8 <_strtod_l+0x590>)
 80092f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80092f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092f8:	4652      	mov	r2, sl
 80092fa:	465b      	mov	r3, fp
 80092fc:	f7f7 f99c 	bl	8000638 <__aeabi_dmul>
 8009300:	4682      	mov	sl, r0
 8009302:	468b      	mov	fp, r1
 8009304:	e649      	b.n	8008f9a <_strtod_l+0x72>
 8009306:	4b6c      	ldr	r3, [pc, #432]	@ (80094b8 <_strtod_l+0x590>)
 8009308:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800930c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009310:	f7f7 f992 	bl	8000638 <__aeabi_dmul>
 8009314:	4682      	mov	sl, r0
 8009316:	4638      	mov	r0, r7
 8009318:	468b      	mov	fp, r1
 800931a:	f7f7 f913 	bl	8000544 <__aeabi_ui2d>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	4650      	mov	r0, sl
 8009324:	4659      	mov	r1, fp
 8009326:	f7f6 ffd1 	bl	80002cc <__adddf3>
 800932a:	2d0f      	cmp	r5, #15
 800932c:	4682      	mov	sl, r0
 800932e:	468b      	mov	fp, r1
 8009330:	ddd5      	ble.n	80092de <_strtod_l+0x3b6>
 8009332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009334:	1b2c      	subs	r4, r5, r4
 8009336:	441c      	add	r4, r3
 8009338:	2c00      	cmp	r4, #0
 800933a:	f340 8093 	ble.w	8009464 <_strtod_l+0x53c>
 800933e:	f014 030f 	ands.w	r3, r4, #15
 8009342:	d00a      	beq.n	800935a <_strtod_l+0x432>
 8009344:	495c      	ldr	r1, [pc, #368]	@ (80094b8 <_strtod_l+0x590>)
 8009346:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800934a:	4652      	mov	r2, sl
 800934c:	465b      	mov	r3, fp
 800934e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009352:	f7f7 f971 	bl	8000638 <__aeabi_dmul>
 8009356:	4682      	mov	sl, r0
 8009358:	468b      	mov	fp, r1
 800935a:	f034 040f 	bics.w	r4, r4, #15
 800935e:	d073      	beq.n	8009448 <_strtod_l+0x520>
 8009360:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009364:	dd49      	ble.n	80093fa <_strtod_l+0x4d2>
 8009366:	2400      	movs	r4, #0
 8009368:	46a0      	mov	r8, r4
 800936a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800936c:	46a1      	mov	r9, r4
 800936e:	9a05      	ldr	r2, [sp, #20]
 8009370:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80094c0 <_strtod_l+0x598>
 8009374:	2322      	movs	r3, #34	@ 0x22
 8009376:	6013      	str	r3, [r2, #0]
 8009378:	f04f 0a00 	mov.w	sl, #0
 800937c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800937e:	2b00      	cmp	r3, #0
 8009380:	f43f ae0b 	beq.w	8008f9a <_strtod_l+0x72>
 8009384:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009386:	9805      	ldr	r0, [sp, #20]
 8009388:	f7ff f946 	bl	8008618 <_Bfree>
 800938c:	9805      	ldr	r0, [sp, #20]
 800938e:	4649      	mov	r1, r9
 8009390:	f7ff f942 	bl	8008618 <_Bfree>
 8009394:	9805      	ldr	r0, [sp, #20]
 8009396:	4641      	mov	r1, r8
 8009398:	f7ff f93e 	bl	8008618 <_Bfree>
 800939c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800939e:	9805      	ldr	r0, [sp, #20]
 80093a0:	f7ff f93a 	bl	8008618 <_Bfree>
 80093a4:	9805      	ldr	r0, [sp, #20]
 80093a6:	4621      	mov	r1, r4
 80093a8:	f7ff f936 	bl	8008618 <_Bfree>
 80093ac:	e5f5      	b.n	8008f9a <_strtod_l+0x72>
 80093ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80093b4:	4293      	cmp	r3, r2
 80093b6:	dbbc      	blt.n	8009332 <_strtod_l+0x40a>
 80093b8:	4c3f      	ldr	r4, [pc, #252]	@ (80094b8 <_strtod_l+0x590>)
 80093ba:	f1c5 050f 	rsb	r5, r5, #15
 80093be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80093c2:	4652      	mov	r2, sl
 80093c4:	465b      	mov	r3, fp
 80093c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093ca:	f7f7 f935 	bl	8000638 <__aeabi_dmul>
 80093ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093d0:	1b5d      	subs	r5, r3, r5
 80093d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80093d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80093da:	e78f      	b.n	80092fc <_strtod_l+0x3d4>
 80093dc:	3316      	adds	r3, #22
 80093de:	dba8      	blt.n	8009332 <_strtod_l+0x40a>
 80093e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093e2:	eba3 0808 	sub.w	r8, r3, r8
 80093e6:	4b34      	ldr	r3, [pc, #208]	@ (80094b8 <_strtod_l+0x590>)
 80093e8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80093ec:	e9d8 2300 	ldrd	r2, r3, [r8]
 80093f0:	4650      	mov	r0, sl
 80093f2:	4659      	mov	r1, fp
 80093f4:	f7f7 fa4a 	bl	800088c <__aeabi_ddiv>
 80093f8:	e782      	b.n	8009300 <_strtod_l+0x3d8>
 80093fa:	2300      	movs	r3, #0
 80093fc:	4f2f      	ldr	r7, [pc, #188]	@ (80094bc <_strtod_l+0x594>)
 80093fe:	1124      	asrs	r4, r4, #4
 8009400:	4650      	mov	r0, sl
 8009402:	4659      	mov	r1, fp
 8009404:	461e      	mov	r6, r3
 8009406:	2c01      	cmp	r4, #1
 8009408:	dc21      	bgt.n	800944e <_strtod_l+0x526>
 800940a:	b10b      	cbz	r3, 8009410 <_strtod_l+0x4e8>
 800940c:	4682      	mov	sl, r0
 800940e:	468b      	mov	fp, r1
 8009410:	492a      	ldr	r1, [pc, #168]	@ (80094bc <_strtod_l+0x594>)
 8009412:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009416:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800941a:	4652      	mov	r2, sl
 800941c:	465b      	mov	r3, fp
 800941e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009422:	f7f7 f909 	bl	8000638 <__aeabi_dmul>
 8009426:	4b26      	ldr	r3, [pc, #152]	@ (80094c0 <_strtod_l+0x598>)
 8009428:	460a      	mov	r2, r1
 800942a:	400b      	ands	r3, r1
 800942c:	4925      	ldr	r1, [pc, #148]	@ (80094c4 <_strtod_l+0x59c>)
 800942e:	428b      	cmp	r3, r1
 8009430:	4682      	mov	sl, r0
 8009432:	d898      	bhi.n	8009366 <_strtod_l+0x43e>
 8009434:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009438:	428b      	cmp	r3, r1
 800943a:	bf86      	itte	hi
 800943c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80094c8 <_strtod_l+0x5a0>
 8009440:	f04f 3aff 	movhi.w	sl, #4294967295
 8009444:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009448:	2300      	movs	r3, #0
 800944a:	9308      	str	r3, [sp, #32]
 800944c:	e076      	b.n	800953c <_strtod_l+0x614>
 800944e:	07e2      	lsls	r2, r4, #31
 8009450:	d504      	bpl.n	800945c <_strtod_l+0x534>
 8009452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009456:	f7f7 f8ef 	bl	8000638 <__aeabi_dmul>
 800945a:	2301      	movs	r3, #1
 800945c:	3601      	adds	r6, #1
 800945e:	1064      	asrs	r4, r4, #1
 8009460:	3708      	adds	r7, #8
 8009462:	e7d0      	b.n	8009406 <_strtod_l+0x4de>
 8009464:	d0f0      	beq.n	8009448 <_strtod_l+0x520>
 8009466:	4264      	negs	r4, r4
 8009468:	f014 020f 	ands.w	r2, r4, #15
 800946c:	d00a      	beq.n	8009484 <_strtod_l+0x55c>
 800946e:	4b12      	ldr	r3, [pc, #72]	@ (80094b8 <_strtod_l+0x590>)
 8009470:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009474:	4650      	mov	r0, sl
 8009476:	4659      	mov	r1, fp
 8009478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947c:	f7f7 fa06 	bl	800088c <__aeabi_ddiv>
 8009480:	4682      	mov	sl, r0
 8009482:	468b      	mov	fp, r1
 8009484:	1124      	asrs	r4, r4, #4
 8009486:	d0df      	beq.n	8009448 <_strtod_l+0x520>
 8009488:	2c1f      	cmp	r4, #31
 800948a:	dd1f      	ble.n	80094cc <_strtod_l+0x5a4>
 800948c:	2400      	movs	r4, #0
 800948e:	46a0      	mov	r8, r4
 8009490:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009492:	46a1      	mov	r9, r4
 8009494:	9a05      	ldr	r2, [sp, #20]
 8009496:	2322      	movs	r3, #34	@ 0x22
 8009498:	f04f 0a00 	mov.w	sl, #0
 800949c:	f04f 0b00 	mov.w	fp, #0
 80094a0:	6013      	str	r3, [r2, #0]
 80094a2:	e76b      	b.n	800937c <_strtod_l+0x454>
 80094a4:	0800ae41 	.word	0x0800ae41
 80094a8:	0800b108 	.word	0x0800b108
 80094ac:	0800ae39 	.word	0x0800ae39
 80094b0:	0800ae70 	.word	0x0800ae70
 80094b4:	0800afa9 	.word	0x0800afa9
 80094b8:	0800b040 	.word	0x0800b040
 80094bc:	0800b018 	.word	0x0800b018
 80094c0:	7ff00000 	.word	0x7ff00000
 80094c4:	7ca00000 	.word	0x7ca00000
 80094c8:	7fefffff 	.word	0x7fefffff
 80094cc:	f014 0310 	ands.w	r3, r4, #16
 80094d0:	bf18      	it	ne
 80094d2:	236a      	movne	r3, #106	@ 0x6a
 80094d4:	4ea9      	ldr	r6, [pc, #676]	@ (800977c <_strtod_l+0x854>)
 80094d6:	9308      	str	r3, [sp, #32]
 80094d8:	4650      	mov	r0, sl
 80094da:	4659      	mov	r1, fp
 80094dc:	2300      	movs	r3, #0
 80094de:	07e7      	lsls	r7, r4, #31
 80094e0:	d504      	bpl.n	80094ec <_strtod_l+0x5c4>
 80094e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80094e6:	f7f7 f8a7 	bl	8000638 <__aeabi_dmul>
 80094ea:	2301      	movs	r3, #1
 80094ec:	1064      	asrs	r4, r4, #1
 80094ee:	f106 0608 	add.w	r6, r6, #8
 80094f2:	d1f4      	bne.n	80094de <_strtod_l+0x5b6>
 80094f4:	b10b      	cbz	r3, 80094fa <_strtod_l+0x5d2>
 80094f6:	4682      	mov	sl, r0
 80094f8:	468b      	mov	fp, r1
 80094fa:	9b08      	ldr	r3, [sp, #32]
 80094fc:	b1b3      	cbz	r3, 800952c <_strtod_l+0x604>
 80094fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009502:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009506:	2b00      	cmp	r3, #0
 8009508:	4659      	mov	r1, fp
 800950a:	dd0f      	ble.n	800952c <_strtod_l+0x604>
 800950c:	2b1f      	cmp	r3, #31
 800950e:	dd56      	ble.n	80095be <_strtod_l+0x696>
 8009510:	2b34      	cmp	r3, #52	@ 0x34
 8009512:	bfde      	ittt	le
 8009514:	f04f 33ff 	movle.w	r3, #4294967295
 8009518:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800951c:	4093      	lslle	r3, r2
 800951e:	f04f 0a00 	mov.w	sl, #0
 8009522:	bfcc      	ite	gt
 8009524:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009528:	ea03 0b01 	andle.w	fp, r3, r1
 800952c:	2200      	movs	r2, #0
 800952e:	2300      	movs	r3, #0
 8009530:	4650      	mov	r0, sl
 8009532:	4659      	mov	r1, fp
 8009534:	f7f7 fae8 	bl	8000b08 <__aeabi_dcmpeq>
 8009538:	2800      	cmp	r0, #0
 800953a:	d1a7      	bne.n	800948c <_strtod_l+0x564>
 800953c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009542:	9805      	ldr	r0, [sp, #20]
 8009544:	462b      	mov	r3, r5
 8009546:	464a      	mov	r2, r9
 8009548:	f7ff f8ce 	bl	80086e8 <__s2b>
 800954c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800954e:	2800      	cmp	r0, #0
 8009550:	f43f af09 	beq.w	8009366 <_strtod_l+0x43e>
 8009554:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009556:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009558:	2a00      	cmp	r2, #0
 800955a:	eba3 0308 	sub.w	r3, r3, r8
 800955e:	bfa8      	it	ge
 8009560:	2300      	movge	r3, #0
 8009562:	9312      	str	r3, [sp, #72]	@ 0x48
 8009564:	2400      	movs	r4, #0
 8009566:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800956a:	9316      	str	r3, [sp, #88]	@ 0x58
 800956c:	46a0      	mov	r8, r4
 800956e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009570:	9805      	ldr	r0, [sp, #20]
 8009572:	6859      	ldr	r1, [r3, #4]
 8009574:	f7ff f810 	bl	8008598 <_Balloc>
 8009578:	4681      	mov	r9, r0
 800957a:	2800      	cmp	r0, #0
 800957c:	f43f aef7 	beq.w	800936e <_strtod_l+0x446>
 8009580:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009582:	691a      	ldr	r2, [r3, #16]
 8009584:	3202      	adds	r2, #2
 8009586:	f103 010c 	add.w	r1, r3, #12
 800958a:	0092      	lsls	r2, r2, #2
 800958c:	300c      	adds	r0, #12
 800958e:	f000 ff47 	bl	800a420 <memcpy>
 8009592:	ec4b ab10 	vmov	d0, sl, fp
 8009596:	9805      	ldr	r0, [sp, #20]
 8009598:	aa1c      	add	r2, sp, #112	@ 0x70
 800959a:	a91b      	add	r1, sp, #108	@ 0x6c
 800959c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80095a0:	f7ff fbd6 	bl	8008d50 <__d2b>
 80095a4:	901a      	str	r0, [sp, #104]	@ 0x68
 80095a6:	2800      	cmp	r0, #0
 80095a8:	f43f aee1 	beq.w	800936e <_strtod_l+0x446>
 80095ac:	9805      	ldr	r0, [sp, #20]
 80095ae:	2101      	movs	r1, #1
 80095b0:	f7ff f930 	bl	8008814 <__i2b>
 80095b4:	4680      	mov	r8, r0
 80095b6:	b948      	cbnz	r0, 80095cc <_strtod_l+0x6a4>
 80095b8:	f04f 0800 	mov.w	r8, #0
 80095bc:	e6d7      	b.n	800936e <_strtod_l+0x446>
 80095be:	f04f 32ff 	mov.w	r2, #4294967295
 80095c2:	fa02 f303 	lsl.w	r3, r2, r3
 80095c6:	ea03 0a0a 	and.w	sl, r3, sl
 80095ca:	e7af      	b.n	800952c <_strtod_l+0x604>
 80095cc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80095ce:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80095d0:	2d00      	cmp	r5, #0
 80095d2:	bfab      	itete	ge
 80095d4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80095d6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80095d8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80095da:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80095dc:	bfac      	ite	ge
 80095de:	18ef      	addge	r7, r5, r3
 80095e0:	1b5e      	sublt	r6, r3, r5
 80095e2:	9b08      	ldr	r3, [sp, #32]
 80095e4:	1aed      	subs	r5, r5, r3
 80095e6:	4415      	add	r5, r2
 80095e8:	4b65      	ldr	r3, [pc, #404]	@ (8009780 <_strtod_l+0x858>)
 80095ea:	3d01      	subs	r5, #1
 80095ec:	429d      	cmp	r5, r3
 80095ee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80095f2:	da50      	bge.n	8009696 <_strtod_l+0x76e>
 80095f4:	1b5b      	subs	r3, r3, r5
 80095f6:	2b1f      	cmp	r3, #31
 80095f8:	eba2 0203 	sub.w	r2, r2, r3
 80095fc:	f04f 0101 	mov.w	r1, #1
 8009600:	dc3d      	bgt.n	800967e <_strtod_l+0x756>
 8009602:	fa01 f303 	lsl.w	r3, r1, r3
 8009606:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009608:	2300      	movs	r3, #0
 800960a:	9310      	str	r3, [sp, #64]	@ 0x40
 800960c:	18bd      	adds	r5, r7, r2
 800960e:	9b08      	ldr	r3, [sp, #32]
 8009610:	42af      	cmp	r7, r5
 8009612:	4416      	add	r6, r2
 8009614:	441e      	add	r6, r3
 8009616:	463b      	mov	r3, r7
 8009618:	bfa8      	it	ge
 800961a:	462b      	movge	r3, r5
 800961c:	42b3      	cmp	r3, r6
 800961e:	bfa8      	it	ge
 8009620:	4633      	movge	r3, r6
 8009622:	2b00      	cmp	r3, #0
 8009624:	bfc2      	ittt	gt
 8009626:	1aed      	subgt	r5, r5, r3
 8009628:	1af6      	subgt	r6, r6, r3
 800962a:	1aff      	subgt	r7, r7, r3
 800962c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800962e:	2b00      	cmp	r3, #0
 8009630:	dd16      	ble.n	8009660 <_strtod_l+0x738>
 8009632:	4641      	mov	r1, r8
 8009634:	9805      	ldr	r0, [sp, #20]
 8009636:	461a      	mov	r2, r3
 8009638:	f7ff f9a4 	bl	8008984 <__pow5mult>
 800963c:	4680      	mov	r8, r0
 800963e:	2800      	cmp	r0, #0
 8009640:	d0ba      	beq.n	80095b8 <_strtod_l+0x690>
 8009642:	4601      	mov	r1, r0
 8009644:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009646:	9805      	ldr	r0, [sp, #20]
 8009648:	f7ff f8fa 	bl	8008840 <__multiply>
 800964c:	900a      	str	r0, [sp, #40]	@ 0x28
 800964e:	2800      	cmp	r0, #0
 8009650:	f43f ae8d 	beq.w	800936e <_strtod_l+0x446>
 8009654:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009656:	9805      	ldr	r0, [sp, #20]
 8009658:	f7fe ffde 	bl	8008618 <_Bfree>
 800965c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800965e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009660:	2d00      	cmp	r5, #0
 8009662:	dc1d      	bgt.n	80096a0 <_strtod_l+0x778>
 8009664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009666:	2b00      	cmp	r3, #0
 8009668:	dd23      	ble.n	80096b2 <_strtod_l+0x78a>
 800966a:	4649      	mov	r1, r9
 800966c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800966e:	9805      	ldr	r0, [sp, #20]
 8009670:	f7ff f988 	bl	8008984 <__pow5mult>
 8009674:	4681      	mov	r9, r0
 8009676:	b9e0      	cbnz	r0, 80096b2 <_strtod_l+0x78a>
 8009678:	f04f 0900 	mov.w	r9, #0
 800967c:	e677      	b.n	800936e <_strtod_l+0x446>
 800967e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009682:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009686:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800968a:	35e2      	adds	r5, #226	@ 0xe2
 800968c:	fa01 f305 	lsl.w	r3, r1, r5
 8009690:	9310      	str	r3, [sp, #64]	@ 0x40
 8009692:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009694:	e7ba      	b.n	800960c <_strtod_l+0x6e4>
 8009696:	2300      	movs	r3, #0
 8009698:	9310      	str	r3, [sp, #64]	@ 0x40
 800969a:	2301      	movs	r3, #1
 800969c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800969e:	e7b5      	b.n	800960c <_strtod_l+0x6e4>
 80096a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096a2:	9805      	ldr	r0, [sp, #20]
 80096a4:	462a      	mov	r2, r5
 80096a6:	f7ff f9c7 	bl	8008a38 <__lshift>
 80096aa:	901a      	str	r0, [sp, #104]	@ 0x68
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d1d9      	bne.n	8009664 <_strtod_l+0x73c>
 80096b0:	e65d      	b.n	800936e <_strtod_l+0x446>
 80096b2:	2e00      	cmp	r6, #0
 80096b4:	dd07      	ble.n	80096c6 <_strtod_l+0x79e>
 80096b6:	4649      	mov	r1, r9
 80096b8:	9805      	ldr	r0, [sp, #20]
 80096ba:	4632      	mov	r2, r6
 80096bc:	f7ff f9bc 	bl	8008a38 <__lshift>
 80096c0:	4681      	mov	r9, r0
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d0d8      	beq.n	8009678 <_strtod_l+0x750>
 80096c6:	2f00      	cmp	r7, #0
 80096c8:	dd08      	ble.n	80096dc <_strtod_l+0x7b4>
 80096ca:	4641      	mov	r1, r8
 80096cc:	9805      	ldr	r0, [sp, #20]
 80096ce:	463a      	mov	r2, r7
 80096d0:	f7ff f9b2 	bl	8008a38 <__lshift>
 80096d4:	4680      	mov	r8, r0
 80096d6:	2800      	cmp	r0, #0
 80096d8:	f43f ae49 	beq.w	800936e <_strtod_l+0x446>
 80096dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096de:	9805      	ldr	r0, [sp, #20]
 80096e0:	464a      	mov	r2, r9
 80096e2:	f7ff fa31 	bl	8008b48 <__mdiff>
 80096e6:	4604      	mov	r4, r0
 80096e8:	2800      	cmp	r0, #0
 80096ea:	f43f ae40 	beq.w	800936e <_strtod_l+0x446>
 80096ee:	68c3      	ldr	r3, [r0, #12]
 80096f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096f2:	2300      	movs	r3, #0
 80096f4:	60c3      	str	r3, [r0, #12]
 80096f6:	4641      	mov	r1, r8
 80096f8:	f7ff fa0a 	bl	8008b10 <__mcmp>
 80096fc:	2800      	cmp	r0, #0
 80096fe:	da45      	bge.n	800978c <_strtod_l+0x864>
 8009700:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009702:	ea53 030a 	orrs.w	r3, r3, sl
 8009706:	d16b      	bne.n	80097e0 <_strtod_l+0x8b8>
 8009708:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800970c:	2b00      	cmp	r3, #0
 800970e:	d167      	bne.n	80097e0 <_strtod_l+0x8b8>
 8009710:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009714:	0d1b      	lsrs	r3, r3, #20
 8009716:	051b      	lsls	r3, r3, #20
 8009718:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800971c:	d960      	bls.n	80097e0 <_strtod_l+0x8b8>
 800971e:	6963      	ldr	r3, [r4, #20]
 8009720:	b913      	cbnz	r3, 8009728 <_strtod_l+0x800>
 8009722:	6923      	ldr	r3, [r4, #16]
 8009724:	2b01      	cmp	r3, #1
 8009726:	dd5b      	ble.n	80097e0 <_strtod_l+0x8b8>
 8009728:	4621      	mov	r1, r4
 800972a:	2201      	movs	r2, #1
 800972c:	9805      	ldr	r0, [sp, #20]
 800972e:	f7ff f983 	bl	8008a38 <__lshift>
 8009732:	4641      	mov	r1, r8
 8009734:	4604      	mov	r4, r0
 8009736:	f7ff f9eb 	bl	8008b10 <__mcmp>
 800973a:	2800      	cmp	r0, #0
 800973c:	dd50      	ble.n	80097e0 <_strtod_l+0x8b8>
 800973e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009742:	9a08      	ldr	r2, [sp, #32]
 8009744:	0d1b      	lsrs	r3, r3, #20
 8009746:	051b      	lsls	r3, r3, #20
 8009748:	2a00      	cmp	r2, #0
 800974a:	d06a      	beq.n	8009822 <_strtod_l+0x8fa>
 800974c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009750:	d867      	bhi.n	8009822 <_strtod_l+0x8fa>
 8009752:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009756:	f67f ae9d 	bls.w	8009494 <_strtod_l+0x56c>
 800975a:	4b0a      	ldr	r3, [pc, #40]	@ (8009784 <_strtod_l+0x85c>)
 800975c:	4650      	mov	r0, sl
 800975e:	4659      	mov	r1, fp
 8009760:	2200      	movs	r2, #0
 8009762:	f7f6 ff69 	bl	8000638 <__aeabi_dmul>
 8009766:	4b08      	ldr	r3, [pc, #32]	@ (8009788 <_strtod_l+0x860>)
 8009768:	400b      	ands	r3, r1
 800976a:	4682      	mov	sl, r0
 800976c:	468b      	mov	fp, r1
 800976e:	2b00      	cmp	r3, #0
 8009770:	f47f ae08 	bne.w	8009384 <_strtod_l+0x45c>
 8009774:	9a05      	ldr	r2, [sp, #20]
 8009776:	2322      	movs	r3, #34	@ 0x22
 8009778:	6013      	str	r3, [r2, #0]
 800977a:	e603      	b.n	8009384 <_strtod_l+0x45c>
 800977c:	0800b130 	.word	0x0800b130
 8009780:	fffffc02 	.word	0xfffffc02
 8009784:	39500000 	.word	0x39500000
 8009788:	7ff00000 	.word	0x7ff00000
 800978c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009790:	d165      	bne.n	800985e <_strtod_l+0x936>
 8009792:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009794:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009798:	b35a      	cbz	r2, 80097f2 <_strtod_l+0x8ca>
 800979a:	4a9f      	ldr	r2, [pc, #636]	@ (8009a18 <_strtod_l+0xaf0>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d12b      	bne.n	80097f8 <_strtod_l+0x8d0>
 80097a0:	9b08      	ldr	r3, [sp, #32]
 80097a2:	4651      	mov	r1, sl
 80097a4:	b303      	cbz	r3, 80097e8 <_strtod_l+0x8c0>
 80097a6:	4b9d      	ldr	r3, [pc, #628]	@ (8009a1c <_strtod_l+0xaf4>)
 80097a8:	465a      	mov	r2, fp
 80097aa:	4013      	ands	r3, r2
 80097ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80097b0:	f04f 32ff 	mov.w	r2, #4294967295
 80097b4:	d81b      	bhi.n	80097ee <_strtod_l+0x8c6>
 80097b6:	0d1b      	lsrs	r3, r3, #20
 80097b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80097bc:	fa02 f303 	lsl.w	r3, r2, r3
 80097c0:	4299      	cmp	r1, r3
 80097c2:	d119      	bne.n	80097f8 <_strtod_l+0x8d0>
 80097c4:	4b96      	ldr	r3, [pc, #600]	@ (8009a20 <_strtod_l+0xaf8>)
 80097c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d102      	bne.n	80097d2 <_strtod_l+0x8aa>
 80097cc:	3101      	adds	r1, #1
 80097ce:	f43f adce 	beq.w	800936e <_strtod_l+0x446>
 80097d2:	4b92      	ldr	r3, [pc, #584]	@ (8009a1c <_strtod_l+0xaf4>)
 80097d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80097d6:	401a      	ands	r2, r3
 80097d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80097dc:	f04f 0a00 	mov.w	sl, #0
 80097e0:	9b08      	ldr	r3, [sp, #32]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1b9      	bne.n	800975a <_strtod_l+0x832>
 80097e6:	e5cd      	b.n	8009384 <_strtod_l+0x45c>
 80097e8:	f04f 33ff 	mov.w	r3, #4294967295
 80097ec:	e7e8      	b.n	80097c0 <_strtod_l+0x898>
 80097ee:	4613      	mov	r3, r2
 80097f0:	e7e6      	b.n	80097c0 <_strtod_l+0x898>
 80097f2:	ea53 030a 	orrs.w	r3, r3, sl
 80097f6:	d0a2      	beq.n	800973e <_strtod_l+0x816>
 80097f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097fa:	b1db      	cbz	r3, 8009834 <_strtod_l+0x90c>
 80097fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80097fe:	4213      	tst	r3, r2
 8009800:	d0ee      	beq.n	80097e0 <_strtod_l+0x8b8>
 8009802:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009804:	9a08      	ldr	r2, [sp, #32]
 8009806:	4650      	mov	r0, sl
 8009808:	4659      	mov	r1, fp
 800980a:	b1bb      	cbz	r3, 800983c <_strtod_l+0x914>
 800980c:	f7ff fb6e 	bl	8008eec <sulp>
 8009810:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009814:	ec53 2b10 	vmov	r2, r3, d0
 8009818:	f7f6 fd58 	bl	80002cc <__adddf3>
 800981c:	4682      	mov	sl, r0
 800981e:	468b      	mov	fp, r1
 8009820:	e7de      	b.n	80097e0 <_strtod_l+0x8b8>
 8009822:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009826:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800982a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800982e:	f04f 3aff 	mov.w	sl, #4294967295
 8009832:	e7d5      	b.n	80097e0 <_strtod_l+0x8b8>
 8009834:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009836:	ea13 0f0a 	tst.w	r3, sl
 800983a:	e7e1      	b.n	8009800 <_strtod_l+0x8d8>
 800983c:	f7ff fb56 	bl	8008eec <sulp>
 8009840:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009844:	ec53 2b10 	vmov	r2, r3, d0
 8009848:	f7f6 fd3e 	bl	80002c8 <__aeabi_dsub>
 800984c:	2200      	movs	r2, #0
 800984e:	2300      	movs	r3, #0
 8009850:	4682      	mov	sl, r0
 8009852:	468b      	mov	fp, r1
 8009854:	f7f7 f958 	bl	8000b08 <__aeabi_dcmpeq>
 8009858:	2800      	cmp	r0, #0
 800985a:	d0c1      	beq.n	80097e0 <_strtod_l+0x8b8>
 800985c:	e61a      	b.n	8009494 <_strtod_l+0x56c>
 800985e:	4641      	mov	r1, r8
 8009860:	4620      	mov	r0, r4
 8009862:	f7ff facd 	bl	8008e00 <__ratio>
 8009866:	ec57 6b10 	vmov	r6, r7, d0
 800986a:	2200      	movs	r2, #0
 800986c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009870:	4630      	mov	r0, r6
 8009872:	4639      	mov	r1, r7
 8009874:	f7f7 f95c 	bl	8000b30 <__aeabi_dcmple>
 8009878:	2800      	cmp	r0, #0
 800987a:	d06f      	beq.n	800995c <_strtod_l+0xa34>
 800987c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800987e:	2b00      	cmp	r3, #0
 8009880:	d17a      	bne.n	8009978 <_strtod_l+0xa50>
 8009882:	f1ba 0f00 	cmp.w	sl, #0
 8009886:	d158      	bne.n	800993a <_strtod_l+0xa12>
 8009888:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800988a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800988e:	2b00      	cmp	r3, #0
 8009890:	d15a      	bne.n	8009948 <_strtod_l+0xa20>
 8009892:	4b64      	ldr	r3, [pc, #400]	@ (8009a24 <_strtod_l+0xafc>)
 8009894:	2200      	movs	r2, #0
 8009896:	4630      	mov	r0, r6
 8009898:	4639      	mov	r1, r7
 800989a:	f7f7 f93f 	bl	8000b1c <__aeabi_dcmplt>
 800989e:	2800      	cmp	r0, #0
 80098a0:	d159      	bne.n	8009956 <_strtod_l+0xa2e>
 80098a2:	4630      	mov	r0, r6
 80098a4:	4639      	mov	r1, r7
 80098a6:	4b60      	ldr	r3, [pc, #384]	@ (8009a28 <_strtod_l+0xb00>)
 80098a8:	2200      	movs	r2, #0
 80098aa:	f7f6 fec5 	bl	8000638 <__aeabi_dmul>
 80098ae:	4606      	mov	r6, r0
 80098b0:	460f      	mov	r7, r1
 80098b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80098b6:	9606      	str	r6, [sp, #24]
 80098b8:	9307      	str	r3, [sp, #28]
 80098ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098be:	4d57      	ldr	r5, [pc, #348]	@ (8009a1c <_strtod_l+0xaf4>)
 80098c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80098c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098c6:	401d      	ands	r5, r3
 80098c8:	4b58      	ldr	r3, [pc, #352]	@ (8009a2c <_strtod_l+0xb04>)
 80098ca:	429d      	cmp	r5, r3
 80098cc:	f040 80b2 	bne.w	8009a34 <_strtod_l+0xb0c>
 80098d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80098d6:	ec4b ab10 	vmov	d0, sl, fp
 80098da:	f7ff f9c9 	bl	8008c70 <__ulp>
 80098de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098e2:	ec51 0b10 	vmov	r0, r1, d0
 80098e6:	f7f6 fea7 	bl	8000638 <__aeabi_dmul>
 80098ea:	4652      	mov	r2, sl
 80098ec:	465b      	mov	r3, fp
 80098ee:	f7f6 fced 	bl	80002cc <__adddf3>
 80098f2:	460b      	mov	r3, r1
 80098f4:	4949      	ldr	r1, [pc, #292]	@ (8009a1c <_strtod_l+0xaf4>)
 80098f6:	4a4e      	ldr	r2, [pc, #312]	@ (8009a30 <_strtod_l+0xb08>)
 80098f8:	4019      	ands	r1, r3
 80098fa:	4291      	cmp	r1, r2
 80098fc:	4682      	mov	sl, r0
 80098fe:	d942      	bls.n	8009986 <_strtod_l+0xa5e>
 8009900:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009902:	4b47      	ldr	r3, [pc, #284]	@ (8009a20 <_strtod_l+0xaf8>)
 8009904:	429a      	cmp	r2, r3
 8009906:	d103      	bne.n	8009910 <_strtod_l+0x9e8>
 8009908:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800990a:	3301      	adds	r3, #1
 800990c:	f43f ad2f 	beq.w	800936e <_strtod_l+0x446>
 8009910:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009a20 <_strtod_l+0xaf8>
 8009914:	f04f 3aff 	mov.w	sl, #4294967295
 8009918:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800991a:	9805      	ldr	r0, [sp, #20]
 800991c:	f7fe fe7c 	bl	8008618 <_Bfree>
 8009920:	9805      	ldr	r0, [sp, #20]
 8009922:	4649      	mov	r1, r9
 8009924:	f7fe fe78 	bl	8008618 <_Bfree>
 8009928:	9805      	ldr	r0, [sp, #20]
 800992a:	4641      	mov	r1, r8
 800992c:	f7fe fe74 	bl	8008618 <_Bfree>
 8009930:	9805      	ldr	r0, [sp, #20]
 8009932:	4621      	mov	r1, r4
 8009934:	f7fe fe70 	bl	8008618 <_Bfree>
 8009938:	e619      	b.n	800956e <_strtod_l+0x646>
 800993a:	f1ba 0f01 	cmp.w	sl, #1
 800993e:	d103      	bne.n	8009948 <_strtod_l+0xa20>
 8009940:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009942:	2b00      	cmp	r3, #0
 8009944:	f43f ada6 	beq.w	8009494 <_strtod_l+0x56c>
 8009948:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80099f8 <_strtod_l+0xad0>
 800994c:	4f35      	ldr	r7, [pc, #212]	@ (8009a24 <_strtod_l+0xafc>)
 800994e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009952:	2600      	movs	r6, #0
 8009954:	e7b1      	b.n	80098ba <_strtod_l+0x992>
 8009956:	4f34      	ldr	r7, [pc, #208]	@ (8009a28 <_strtod_l+0xb00>)
 8009958:	2600      	movs	r6, #0
 800995a:	e7aa      	b.n	80098b2 <_strtod_l+0x98a>
 800995c:	4b32      	ldr	r3, [pc, #200]	@ (8009a28 <_strtod_l+0xb00>)
 800995e:	4630      	mov	r0, r6
 8009960:	4639      	mov	r1, r7
 8009962:	2200      	movs	r2, #0
 8009964:	f7f6 fe68 	bl	8000638 <__aeabi_dmul>
 8009968:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800996a:	4606      	mov	r6, r0
 800996c:	460f      	mov	r7, r1
 800996e:	2b00      	cmp	r3, #0
 8009970:	d09f      	beq.n	80098b2 <_strtod_l+0x98a>
 8009972:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009976:	e7a0      	b.n	80098ba <_strtod_l+0x992>
 8009978:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009a00 <_strtod_l+0xad8>
 800997c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009980:	ec57 6b17 	vmov	r6, r7, d7
 8009984:	e799      	b.n	80098ba <_strtod_l+0x992>
 8009986:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800998a:	9b08      	ldr	r3, [sp, #32]
 800998c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1c1      	bne.n	8009918 <_strtod_l+0x9f0>
 8009994:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009998:	0d1b      	lsrs	r3, r3, #20
 800999a:	051b      	lsls	r3, r3, #20
 800999c:	429d      	cmp	r5, r3
 800999e:	d1bb      	bne.n	8009918 <_strtod_l+0x9f0>
 80099a0:	4630      	mov	r0, r6
 80099a2:	4639      	mov	r1, r7
 80099a4:	f7f7 f9a8 	bl	8000cf8 <__aeabi_d2lz>
 80099a8:	f7f6 fe18 	bl	80005dc <__aeabi_l2d>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	4630      	mov	r0, r6
 80099b2:	4639      	mov	r1, r7
 80099b4:	f7f6 fc88 	bl	80002c8 <__aeabi_dsub>
 80099b8:	460b      	mov	r3, r1
 80099ba:	4602      	mov	r2, r0
 80099bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80099c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80099c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099c6:	ea46 060a 	orr.w	r6, r6, sl
 80099ca:	431e      	orrs	r6, r3
 80099cc:	d06f      	beq.n	8009aae <_strtod_l+0xb86>
 80099ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8009a08 <_strtod_l+0xae0>)
 80099d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d4:	f7f7 f8a2 	bl	8000b1c <__aeabi_dcmplt>
 80099d8:	2800      	cmp	r0, #0
 80099da:	f47f acd3 	bne.w	8009384 <_strtod_l+0x45c>
 80099de:	a30c      	add	r3, pc, #48	@ (adr r3, 8009a10 <_strtod_l+0xae8>)
 80099e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099e8:	f7f7 f8b6 	bl	8000b58 <__aeabi_dcmpgt>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d093      	beq.n	8009918 <_strtod_l+0x9f0>
 80099f0:	e4c8      	b.n	8009384 <_strtod_l+0x45c>
 80099f2:	bf00      	nop
 80099f4:	f3af 8000 	nop.w
 80099f8:	00000000 	.word	0x00000000
 80099fc:	bff00000 	.word	0xbff00000
 8009a00:	00000000 	.word	0x00000000
 8009a04:	3ff00000 	.word	0x3ff00000
 8009a08:	94a03595 	.word	0x94a03595
 8009a0c:	3fdfffff 	.word	0x3fdfffff
 8009a10:	35afe535 	.word	0x35afe535
 8009a14:	3fe00000 	.word	0x3fe00000
 8009a18:	000fffff 	.word	0x000fffff
 8009a1c:	7ff00000 	.word	0x7ff00000
 8009a20:	7fefffff 	.word	0x7fefffff
 8009a24:	3ff00000 	.word	0x3ff00000
 8009a28:	3fe00000 	.word	0x3fe00000
 8009a2c:	7fe00000 	.word	0x7fe00000
 8009a30:	7c9fffff 	.word	0x7c9fffff
 8009a34:	9b08      	ldr	r3, [sp, #32]
 8009a36:	b323      	cbz	r3, 8009a82 <_strtod_l+0xb5a>
 8009a38:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009a3c:	d821      	bhi.n	8009a82 <_strtod_l+0xb5a>
 8009a3e:	a328      	add	r3, pc, #160	@ (adr r3, 8009ae0 <_strtod_l+0xbb8>)
 8009a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a44:	4630      	mov	r0, r6
 8009a46:	4639      	mov	r1, r7
 8009a48:	f7f7 f872 	bl	8000b30 <__aeabi_dcmple>
 8009a4c:	b1a0      	cbz	r0, 8009a78 <_strtod_l+0xb50>
 8009a4e:	4639      	mov	r1, r7
 8009a50:	4630      	mov	r0, r6
 8009a52:	f7f7 f8c9 	bl	8000be8 <__aeabi_d2uiz>
 8009a56:	2801      	cmp	r0, #1
 8009a58:	bf38      	it	cc
 8009a5a:	2001      	movcc	r0, #1
 8009a5c:	f7f6 fd72 	bl	8000544 <__aeabi_ui2d>
 8009a60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a62:	4606      	mov	r6, r0
 8009a64:	460f      	mov	r7, r1
 8009a66:	b9fb      	cbnz	r3, 8009aa8 <_strtod_l+0xb80>
 8009a68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009a6c:	9014      	str	r0, [sp, #80]	@ 0x50
 8009a6e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009a70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009a74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009a78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009a7a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009a7e:	1b5b      	subs	r3, r3, r5
 8009a80:	9311      	str	r3, [sp, #68]	@ 0x44
 8009a82:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009a86:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009a8a:	f7ff f8f1 	bl	8008c70 <__ulp>
 8009a8e:	4650      	mov	r0, sl
 8009a90:	ec53 2b10 	vmov	r2, r3, d0
 8009a94:	4659      	mov	r1, fp
 8009a96:	f7f6 fdcf 	bl	8000638 <__aeabi_dmul>
 8009a9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009a9e:	f7f6 fc15 	bl	80002cc <__adddf3>
 8009aa2:	4682      	mov	sl, r0
 8009aa4:	468b      	mov	fp, r1
 8009aa6:	e770      	b.n	800998a <_strtod_l+0xa62>
 8009aa8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009aac:	e7e0      	b.n	8009a70 <_strtod_l+0xb48>
 8009aae:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ae8 <_strtod_l+0xbc0>)
 8009ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab4:	f7f7 f832 	bl	8000b1c <__aeabi_dcmplt>
 8009ab8:	e798      	b.n	80099ec <_strtod_l+0xac4>
 8009aba:	2300      	movs	r3, #0
 8009abc:	930e      	str	r3, [sp, #56]	@ 0x38
 8009abe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009ac0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	f7ff ba6d 	b.w	8008fa2 <_strtod_l+0x7a>
 8009ac8:	2a65      	cmp	r2, #101	@ 0x65
 8009aca:	f43f ab68 	beq.w	800919e <_strtod_l+0x276>
 8009ace:	2a45      	cmp	r2, #69	@ 0x45
 8009ad0:	f43f ab65 	beq.w	800919e <_strtod_l+0x276>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	f7ff bba0 	b.w	800921a <_strtod_l+0x2f2>
 8009ada:	bf00      	nop
 8009adc:	f3af 8000 	nop.w
 8009ae0:	ffc00000 	.word	0xffc00000
 8009ae4:	41dfffff 	.word	0x41dfffff
 8009ae8:	94a03595 	.word	0x94a03595
 8009aec:	3fcfffff 	.word	0x3fcfffff

08009af0 <_strtod_r>:
 8009af0:	4b01      	ldr	r3, [pc, #4]	@ (8009af8 <_strtod_r+0x8>)
 8009af2:	f7ff ba19 	b.w	8008f28 <_strtod_l>
 8009af6:	bf00      	nop
 8009af8:	20000074 	.word	0x20000074

08009afc <_strtol_l.isra.0>:
 8009afc:	2b24      	cmp	r3, #36	@ 0x24
 8009afe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b02:	4686      	mov	lr, r0
 8009b04:	4690      	mov	r8, r2
 8009b06:	d801      	bhi.n	8009b0c <_strtol_l.isra.0+0x10>
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d106      	bne.n	8009b1a <_strtol_l.isra.0+0x1e>
 8009b0c:	f7fd fdb8 	bl	8007680 <__errno>
 8009b10:	2316      	movs	r3, #22
 8009b12:	6003      	str	r3, [r0, #0]
 8009b14:	2000      	movs	r0, #0
 8009b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b1a:	4834      	ldr	r0, [pc, #208]	@ (8009bec <_strtol_l.isra.0+0xf0>)
 8009b1c:	460d      	mov	r5, r1
 8009b1e:	462a      	mov	r2, r5
 8009b20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b24:	5d06      	ldrb	r6, [r0, r4]
 8009b26:	f016 0608 	ands.w	r6, r6, #8
 8009b2a:	d1f8      	bne.n	8009b1e <_strtol_l.isra.0+0x22>
 8009b2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009b2e:	d110      	bne.n	8009b52 <_strtol_l.isra.0+0x56>
 8009b30:	782c      	ldrb	r4, [r5, #0]
 8009b32:	2601      	movs	r6, #1
 8009b34:	1c95      	adds	r5, r2, #2
 8009b36:	f033 0210 	bics.w	r2, r3, #16
 8009b3a:	d115      	bne.n	8009b68 <_strtol_l.isra.0+0x6c>
 8009b3c:	2c30      	cmp	r4, #48	@ 0x30
 8009b3e:	d10d      	bne.n	8009b5c <_strtol_l.isra.0+0x60>
 8009b40:	782a      	ldrb	r2, [r5, #0]
 8009b42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009b46:	2a58      	cmp	r2, #88	@ 0x58
 8009b48:	d108      	bne.n	8009b5c <_strtol_l.isra.0+0x60>
 8009b4a:	786c      	ldrb	r4, [r5, #1]
 8009b4c:	3502      	adds	r5, #2
 8009b4e:	2310      	movs	r3, #16
 8009b50:	e00a      	b.n	8009b68 <_strtol_l.isra.0+0x6c>
 8009b52:	2c2b      	cmp	r4, #43	@ 0x2b
 8009b54:	bf04      	itt	eq
 8009b56:	782c      	ldrbeq	r4, [r5, #0]
 8009b58:	1c95      	addeq	r5, r2, #2
 8009b5a:	e7ec      	b.n	8009b36 <_strtol_l.isra.0+0x3a>
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1f6      	bne.n	8009b4e <_strtol_l.isra.0+0x52>
 8009b60:	2c30      	cmp	r4, #48	@ 0x30
 8009b62:	bf14      	ite	ne
 8009b64:	230a      	movne	r3, #10
 8009b66:	2308      	moveq	r3, #8
 8009b68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009b6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009b70:	2200      	movs	r2, #0
 8009b72:	fbbc f9f3 	udiv	r9, ip, r3
 8009b76:	4610      	mov	r0, r2
 8009b78:	fb03 ca19 	mls	sl, r3, r9, ip
 8009b7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009b80:	2f09      	cmp	r7, #9
 8009b82:	d80f      	bhi.n	8009ba4 <_strtol_l.isra.0+0xa8>
 8009b84:	463c      	mov	r4, r7
 8009b86:	42a3      	cmp	r3, r4
 8009b88:	dd1b      	ble.n	8009bc2 <_strtol_l.isra.0+0xc6>
 8009b8a:	1c57      	adds	r7, r2, #1
 8009b8c:	d007      	beq.n	8009b9e <_strtol_l.isra.0+0xa2>
 8009b8e:	4581      	cmp	r9, r0
 8009b90:	d314      	bcc.n	8009bbc <_strtol_l.isra.0+0xc0>
 8009b92:	d101      	bne.n	8009b98 <_strtol_l.isra.0+0x9c>
 8009b94:	45a2      	cmp	sl, r4
 8009b96:	db11      	blt.n	8009bbc <_strtol_l.isra.0+0xc0>
 8009b98:	fb00 4003 	mla	r0, r0, r3, r4
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ba2:	e7eb      	b.n	8009b7c <_strtol_l.isra.0+0x80>
 8009ba4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009ba8:	2f19      	cmp	r7, #25
 8009baa:	d801      	bhi.n	8009bb0 <_strtol_l.isra.0+0xb4>
 8009bac:	3c37      	subs	r4, #55	@ 0x37
 8009bae:	e7ea      	b.n	8009b86 <_strtol_l.isra.0+0x8a>
 8009bb0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009bb4:	2f19      	cmp	r7, #25
 8009bb6:	d804      	bhi.n	8009bc2 <_strtol_l.isra.0+0xc6>
 8009bb8:	3c57      	subs	r4, #87	@ 0x57
 8009bba:	e7e4      	b.n	8009b86 <_strtol_l.isra.0+0x8a>
 8009bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc0:	e7ed      	b.n	8009b9e <_strtol_l.isra.0+0xa2>
 8009bc2:	1c53      	adds	r3, r2, #1
 8009bc4:	d108      	bne.n	8009bd8 <_strtol_l.isra.0+0xdc>
 8009bc6:	2322      	movs	r3, #34	@ 0x22
 8009bc8:	f8ce 3000 	str.w	r3, [lr]
 8009bcc:	4660      	mov	r0, ip
 8009bce:	f1b8 0f00 	cmp.w	r8, #0
 8009bd2:	d0a0      	beq.n	8009b16 <_strtol_l.isra.0+0x1a>
 8009bd4:	1e69      	subs	r1, r5, #1
 8009bd6:	e006      	b.n	8009be6 <_strtol_l.isra.0+0xea>
 8009bd8:	b106      	cbz	r6, 8009bdc <_strtol_l.isra.0+0xe0>
 8009bda:	4240      	negs	r0, r0
 8009bdc:	f1b8 0f00 	cmp.w	r8, #0
 8009be0:	d099      	beq.n	8009b16 <_strtol_l.isra.0+0x1a>
 8009be2:	2a00      	cmp	r2, #0
 8009be4:	d1f6      	bne.n	8009bd4 <_strtol_l.isra.0+0xd8>
 8009be6:	f8c8 1000 	str.w	r1, [r8]
 8009bea:	e794      	b.n	8009b16 <_strtol_l.isra.0+0x1a>
 8009bec:	0800b159 	.word	0x0800b159

08009bf0 <_strtol_r>:
 8009bf0:	f7ff bf84 	b.w	8009afc <_strtol_l.isra.0>

08009bf4 <__ssputs_r>:
 8009bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf8:	688e      	ldr	r6, [r1, #8]
 8009bfa:	461f      	mov	r7, r3
 8009bfc:	42be      	cmp	r6, r7
 8009bfe:	680b      	ldr	r3, [r1, #0]
 8009c00:	4682      	mov	sl, r0
 8009c02:	460c      	mov	r4, r1
 8009c04:	4690      	mov	r8, r2
 8009c06:	d82d      	bhi.n	8009c64 <__ssputs_r+0x70>
 8009c08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c10:	d026      	beq.n	8009c60 <__ssputs_r+0x6c>
 8009c12:	6965      	ldr	r5, [r4, #20]
 8009c14:	6909      	ldr	r1, [r1, #16]
 8009c16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c1a:	eba3 0901 	sub.w	r9, r3, r1
 8009c1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c22:	1c7b      	adds	r3, r7, #1
 8009c24:	444b      	add	r3, r9
 8009c26:	106d      	asrs	r5, r5, #1
 8009c28:	429d      	cmp	r5, r3
 8009c2a:	bf38      	it	cc
 8009c2c:	461d      	movcc	r5, r3
 8009c2e:	0553      	lsls	r3, r2, #21
 8009c30:	d527      	bpl.n	8009c82 <__ssputs_r+0x8e>
 8009c32:	4629      	mov	r1, r5
 8009c34:	f7fe fc24 	bl	8008480 <_malloc_r>
 8009c38:	4606      	mov	r6, r0
 8009c3a:	b360      	cbz	r0, 8009c96 <__ssputs_r+0xa2>
 8009c3c:	6921      	ldr	r1, [r4, #16]
 8009c3e:	464a      	mov	r2, r9
 8009c40:	f000 fbee 	bl	800a420 <memcpy>
 8009c44:	89a3      	ldrh	r3, [r4, #12]
 8009c46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c4e:	81a3      	strh	r3, [r4, #12]
 8009c50:	6126      	str	r6, [r4, #16]
 8009c52:	6165      	str	r5, [r4, #20]
 8009c54:	444e      	add	r6, r9
 8009c56:	eba5 0509 	sub.w	r5, r5, r9
 8009c5a:	6026      	str	r6, [r4, #0]
 8009c5c:	60a5      	str	r5, [r4, #8]
 8009c5e:	463e      	mov	r6, r7
 8009c60:	42be      	cmp	r6, r7
 8009c62:	d900      	bls.n	8009c66 <__ssputs_r+0x72>
 8009c64:	463e      	mov	r6, r7
 8009c66:	6820      	ldr	r0, [r4, #0]
 8009c68:	4632      	mov	r2, r6
 8009c6a:	4641      	mov	r1, r8
 8009c6c:	f000 fb9c 	bl	800a3a8 <memmove>
 8009c70:	68a3      	ldr	r3, [r4, #8]
 8009c72:	1b9b      	subs	r3, r3, r6
 8009c74:	60a3      	str	r3, [r4, #8]
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	4433      	add	r3, r6
 8009c7a:	6023      	str	r3, [r4, #0]
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c82:	462a      	mov	r2, r5
 8009c84:	f000 ff61 	bl	800ab4a <_realloc_r>
 8009c88:	4606      	mov	r6, r0
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	d1e0      	bne.n	8009c50 <__ssputs_r+0x5c>
 8009c8e:	6921      	ldr	r1, [r4, #16]
 8009c90:	4650      	mov	r0, sl
 8009c92:	f7fe fb81 	bl	8008398 <_free_r>
 8009c96:	230c      	movs	r3, #12
 8009c98:	f8ca 3000 	str.w	r3, [sl]
 8009c9c:	89a3      	ldrh	r3, [r4, #12]
 8009c9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ca2:	81a3      	strh	r3, [r4, #12]
 8009ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca8:	e7e9      	b.n	8009c7e <__ssputs_r+0x8a>
	...

08009cac <_svfiprintf_r>:
 8009cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb0:	4698      	mov	r8, r3
 8009cb2:	898b      	ldrh	r3, [r1, #12]
 8009cb4:	061b      	lsls	r3, r3, #24
 8009cb6:	b09d      	sub	sp, #116	@ 0x74
 8009cb8:	4607      	mov	r7, r0
 8009cba:	460d      	mov	r5, r1
 8009cbc:	4614      	mov	r4, r2
 8009cbe:	d510      	bpl.n	8009ce2 <_svfiprintf_r+0x36>
 8009cc0:	690b      	ldr	r3, [r1, #16]
 8009cc2:	b973      	cbnz	r3, 8009ce2 <_svfiprintf_r+0x36>
 8009cc4:	2140      	movs	r1, #64	@ 0x40
 8009cc6:	f7fe fbdb 	bl	8008480 <_malloc_r>
 8009cca:	6028      	str	r0, [r5, #0]
 8009ccc:	6128      	str	r0, [r5, #16]
 8009cce:	b930      	cbnz	r0, 8009cde <_svfiprintf_r+0x32>
 8009cd0:	230c      	movs	r3, #12
 8009cd2:	603b      	str	r3, [r7, #0]
 8009cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd8:	b01d      	add	sp, #116	@ 0x74
 8009cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cde:	2340      	movs	r3, #64	@ 0x40
 8009ce0:	616b      	str	r3, [r5, #20]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ce6:	2320      	movs	r3, #32
 8009ce8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009cec:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cf0:	2330      	movs	r3, #48	@ 0x30
 8009cf2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009e90 <_svfiprintf_r+0x1e4>
 8009cf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009cfa:	f04f 0901 	mov.w	r9, #1
 8009cfe:	4623      	mov	r3, r4
 8009d00:	469a      	mov	sl, r3
 8009d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d06:	b10a      	cbz	r2, 8009d0c <_svfiprintf_r+0x60>
 8009d08:	2a25      	cmp	r2, #37	@ 0x25
 8009d0a:	d1f9      	bne.n	8009d00 <_svfiprintf_r+0x54>
 8009d0c:	ebba 0b04 	subs.w	fp, sl, r4
 8009d10:	d00b      	beq.n	8009d2a <_svfiprintf_r+0x7e>
 8009d12:	465b      	mov	r3, fp
 8009d14:	4622      	mov	r2, r4
 8009d16:	4629      	mov	r1, r5
 8009d18:	4638      	mov	r0, r7
 8009d1a:	f7ff ff6b 	bl	8009bf4 <__ssputs_r>
 8009d1e:	3001      	adds	r0, #1
 8009d20:	f000 80a7 	beq.w	8009e72 <_svfiprintf_r+0x1c6>
 8009d24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d26:	445a      	add	r2, fp
 8009d28:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f000 809f 	beq.w	8009e72 <_svfiprintf_r+0x1c6>
 8009d34:	2300      	movs	r3, #0
 8009d36:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d3e:	f10a 0a01 	add.w	sl, sl, #1
 8009d42:	9304      	str	r3, [sp, #16]
 8009d44:	9307      	str	r3, [sp, #28]
 8009d46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d4c:	4654      	mov	r4, sl
 8009d4e:	2205      	movs	r2, #5
 8009d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d54:	484e      	ldr	r0, [pc, #312]	@ (8009e90 <_svfiprintf_r+0x1e4>)
 8009d56:	f7f6 fa5b 	bl	8000210 <memchr>
 8009d5a:	9a04      	ldr	r2, [sp, #16]
 8009d5c:	b9d8      	cbnz	r0, 8009d96 <_svfiprintf_r+0xea>
 8009d5e:	06d0      	lsls	r0, r2, #27
 8009d60:	bf44      	itt	mi
 8009d62:	2320      	movmi	r3, #32
 8009d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d68:	0711      	lsls	r1, r2, #28
 8009d6a:	bf44      	itt	mi
 8009d6c:	232b      	movmi	r3, #43	@ 0x2b
 8009d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d72:	f89a 3000 	ldrb.w	r3, [sl]
 8009d76:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d78:	d015      	beq.n	8009da6 <_svfiprintf_r+0xfa>
 8009d7a:	9a07      	ldr	r2, [sp, #28]
 8009d7c:	4654      	mov	r4, sl
 8009d7e:	2000      	movs	r0, #0
 8009d80:	f04f 0c0a 	mov.w	ip, #10
 8009d84:	4621      	mov	r1, r4
 8009d86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d8a:	3b30      	subs	r3, #48	@ 0x30
 8009d8c:	2b09      	cmp	r3, #9
 8009d8e:	d94b      	bls.n	8009e28 <_svfiprintf_r+0x17c>
 8009d90:	b1b0      	cbz	r0, 8009dc0 <_svfiprintf_r+0x114>
 8009d92:	9207      	str	r2, [sp, #28]
 8009d94:	e014      	b.n	8009dc0 <_svfiprintf_r+0x114>
 8009d96:	eba0 0308 	sub.w	r3, r0, r8
 8009d9a:	fa09 f303 	lsl.w	r3, r9, r3
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	9304      	str	r3, [sp, #16]
 8009da2:	46a2      	mov	sl, r4
 8009da4:	e7d2      	b.n	8009d4c <_svfiprintf_r+0xa0>
 8009da6:	9b03      	ldr	r3, [sp, #12]
 8009da8:	1d19      	adds	r1, r3, #4
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	9103      	str	r1, [sp, #12]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	bfbb      	ittet	lt
 8009db2:	425b      	neglt	r3, r3
 8009db4:	f042 0202 	orrlt.w	r2, r2, #2
 8009db8:	9307      	strge	r3, [sp, #28]
 8009dba:	9307      	strlt	r3, [sp, #28]
 8009dbc:	bfb8      	it	lt
 8009dbe:	9204      	strlt	r2, [sp, #16]
 8009dc0:	7823      	ldrb	r3, [r4, #0]
 8009dc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009dc4:	d10a      	bne.n	8009ddc <_svfiprintf_r+0x130>
 8009dc6:	7863      	ldrb	r3, [r4, #1]
 8009dc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dca:	d132      	bne.n	8009e32 <_svfiprintf_r+0x186>
 8009dcc:	9b03      	ldr	r3, [sp, #12]
 8009dce:	1d1a      	adds	r2, r3, #4
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	9203      	str	r2, [sp, #12]
 8009dd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009dd8:	3402      	adds	r4, #2
 8009dda:	9305      	str	r3, [sp, #20]
 8009ddc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009ea0 <_svfiprintf_r+0x1f4>
 8009de0:	7821      	ldrb	r1, [r4, #0]
 8009de2:	2203      	movs	r2, #3
 8009de4:	4650      	mov	r0, sl
 8009de6:	f7f6 fa13 	bl	8000210 <memchr>
 8009dea:	b138      	cbz	r0, 8009dfc <_svfiprintf_r+0x150>
 8009dec:	9b04      	ldr	r3, [sp, #16]
 8009dee:	eba0 000a 	sub.w	r0, r0, sl
 8009df2:	2240      	movs	r2, #64	@ 0x40
 8009df4:	4082      	lsls	r2, r0
 8009df6:	4313      	orrs	r3, r2
 8009df8:	3401      	adds	r4, #1
 8009dfa:	9304      	str	r3, [sp, #16]
 8009dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e00:	4824      	ldr	r0, [pc, #144]	@ (8009e94 <_svfiprintf_r+0x1e8>)
 8009e02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e06:	2206      	movs	r2, #6
 8009e08:	f7f6 fa02 	bl	8000210 <memchr>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d036      	beq.n	8009e7e <_svfiprintf_r+0x1d2>
 8009e10:	4b21      	ldr	r3, [pc, #132]	@ (8009e98 <_svfiprintf_r+0x1ec>)
 8009e12:	bb1b      	cbnz	r3, 8009e5c <_svfiprintf_r+0x1b0>
 8009e14:	9b03      	ldr	r3, [sp, #12]
 8009e16:	3307      	adds	r3, #7
 8009e18:	f023 0307 	bic.w	r3, r3, #7
 8009e1c:	3308      	adds	r3, #8
 8009e1e:	9303      	str	r3, [sp, #12]
 8009e20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e22:	4433      	add	r3, r6
 8009e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e26:	e76a      	b.n	8009cfe <_svfiprintf_r+0x52>
 8009e28:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	2001      	movs	r0, #1
 8009e30:	e7a8      	b.n	8009d84 <_svfiprintf_r+0xd8>
 8009e32:	2300      	movs	r3, #0
 8009e34:	3401      	adds	r4, #1
 8009e36:	9305      	str	r3, [sp, #20]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	f04f 0c0a 	mov.w	ip, #10
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e44:	3a30      	subs	r2, #48	@ 0x30
 8009e46:	2a09      	cmp	r2, #9
 8009e48:	d903      	bls.n	8009e52 <_svfiprintf_r+0x1a6>
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d0c6      	beq.n	8009ddc <_svfiprintf_r+0x130>
 8009e4e:	9105      	str	r1, [sp, #20]
 8009e50:	e7c4      	b.n	8009ddc <_svfiprintf_r+0x130>
 8009e52:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e56:	4604      	mov	r4, r0
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e7f0      	b.n	8009e3e <_svfiprintf_r+0x192>
 8009e5c:	ab03      	add	r3, sp, #12
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	462a      	mov	r2, r5
 8009e62:	4b0e      	ldr	r3, [pc, #56]	@ (8009e9c <_svfiprintf_r+0x1f0>)
 8009e64:	a904      	add	r1, sp, #16
 8009e66:	4638      	mov	r0, r7
 8009e68:	f7fc fcba 	bl	80067e0 <_printf_float>
 8009e6c:	1c42      	adds	r2, r0, #1
 8009e6e:	4606      	mov	r6, r0
 8009e70:	d1d6      	bne.n	8009e20 <_svfiprintf_r+0x174>
 8009e72:	89ab      	ldrh	r3, [r5, #12]
 8009e74:	065b      	lsls	r3, r3, #25
 8009e76:	f53f af2d 	bmi.w	8009cd4 <_svfiprintf_r+0x28>
 8009e7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e7c:	e72c      	b.n	8009cd8 <_svfiprintf_r+0x2c>
 8009e7e:	ab03      	add	r3, sp, #12
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	462a      	mov	r2, r5
 8009e84:	4b05      	ldr	r3, [pc, #20]	@ (8009e9c <_svfiprintf_r+0x1f0>)
 8009e86:	a904      	add	r1, sp, #16
 8009e88:	4638      	mov	r0, r7
 8009e8a:	f7fc ff41 	bl	8006d10 <_printf_i>
 8009e8e:	e7ed      	b.n	8009e6c <_svfiprintf_r+0x1c0>
 8009e90:	0800af55 	.word	0x0800af55
 8009e94:	0800af5f 	.word	0x0800af5f
 8009e98:	080067e1 	.word	0x080067e1
 8009e9c:	08009bf5 	.word	0x08009bf5
 8009ea0:	0800af5b 	.word	0x0800af5b

08009ea4 <__sfputc_r>:
 8009ea4:	6893      	ldr	r3, [r2, #8]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	b410      	push	{r4}
 8009eac:	6093      	str	r3, [r2, #8]
 8009eae:	da08      	bge.n	8009ec2 <__sfputc_r+0x1e>
 8009eb0:	6994      	ldr	r4, [r2, #24]
 8009eb2:	42a3      	cmp	r3, r4
 8009eb4:	db01      	blt.n	8009eba <__sfputc_r+0x16>
 8009eb6:	290a      	cmp	r1, #10
 8009eb8:	d103      	bne.n	8009ec2 <__sfputc_r+0x1e>
 8009eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ebe:	f000 b9df 	b.w	800a280 <__swbuf_r>
 8009ec2:	6813      	ldr	r3, [r2, #0]
 8009ec4:	1c58      	adds	r0, r3, #1
 8009ec6:	6010      	str	r0, [r2, #0]
 8009ec8:	7019      	strb	r1, [r3, #0]
 8009eca:	4608      	mov	r0, r1
 8009ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <__sfputs_r>:
 8009ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed4:	4606      	mov	r6, r0
 8009ed6:	460f      	mov	r7, r1
 8009ed8:	4614      	mov	r4, r2
 8009eda:	18d5      	adds	r5, r2, r3
 8009edc:	42ac      	cmp	r4, r5
 8009ede:	d101      	bne.n	8009ee4 <__sfputs_r+0x12>
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	e007      	b.n	8009ef4 <__sfputs_r+0x22>
 8009ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ee8:	463a      	mov	r2, r7
 8009eea:	4630      	mov	r0, r6
 8009eec:	f7ff ffda 	bl	8009ea4 <__sfputc_r>
 8009ef0:	1c43      	adds	r3, r0, #1
 8009ef2:	d1f3      	bne.n	8009edc <__sfputs_r+0xa>
 8009ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ef8 <_vfiprintf_r>:
 8009ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efc:	460d      	mov	r5, r1
 8009efe:	b09d      	sub	sp, #116	@ 0x74
 8009f00:	4614      	mov	r4, r2
 8009f02:	4698      	mov	r8, r3
 8009f04:	4606      	mov	r6, r0
 8009f06:	b118      	cbz	r0, 8009f10 <_vfiprintf_r+0x18>
 8009f08:	6a03      	ldr	r3, [r0, #32]
 8009f0a:	b90b      	cbnz	r3, 8009f10 <_vfiprintf_r+0x18>
 8009f0c:	f7fd fab8 	bl	8007480 <__sinit>
 8009f10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f12:	07d9      	lsls	r1, r3, #31
 8009f14:	d405      	bmi.n	8009f22 <_vfiprintf_r+0x2a>
 8009f16:	89ab      	ldrh	r3, [r5, #12]
 8009f18:	059a      	lsls	r2, r3, #22
 8009f1a:	d402      	bmi.n	8009f22 <_vfiprintf_r+0x2a>
 8009f1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f1e:	f7fd fbda 	bl	80076d6 <__retarget_lock_acquire_recursive>
 8009f22:	89ab      	ldrh	r3, [r5, #12]
 8009f24:	071b      	lsls	r3, r3, #28
 8009f26:	d501      	bpl.n	8009f2c <_vfiprintf_r+0x34>
 8009f28:	692b      	ldr	r3, [r5, #16]
 8009f2a:	b99b      	cbnz	r3, 8009f54 <_vfiprintf_r+0x5c>
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	4630      	mov	r0, r6
 8009f30:	f000 f9e4 	bl	800a2fc <__swsetup_r>
 8009f34:	b170      	cbz	r0, 8009f54 <_vfiprintf_r+0x5c>
 8009f36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f38:	07dc      	lsls	r4, r3, #31
 8009f3a:	d504      	bpl.n	8009f46 <_vfiprintf_r+0x4e>
 8009f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f40:	b01d      	add	sp, #116	@ 0x74
 8009f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f46:	89ab      	ldrh	r3, [r5, #12]
 8009f48:	0598      	lsls	r0, r3, #22
 8009f4a:	d4f7      	bmi.n	8009f3c <_vfiprintf_r+0x44>
 8009f4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f4e:	f7fd fbc3 	bl	80076d8 <__retarget_lock_release_recursive>
 8009f52:	e7f3      	b.n	8009f3c <_vfiprintf_r+0x44>
 8009f54:	2300      	movs	r3, #0
 8009f56:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f58:	2320      	movs	r3, #32
 8009f5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f62:	2330      	movs	r3, #48	@ 0x30
 8009f64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a114 <_vfiprintf_r+0x21c>
 8009f68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f6c:	f04f 0901 	mov.w	r9, #1
 8009f70:	4623      	mov	r3, r4
 8009f72:	469a      	mov	sl, r3
 8009f74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f78:	b10a      	cbz	r2, 8009f7e <_vfiprintf_r+0x86>
 8009f7a:	2a25      	cmp	r2, #37	@ 0x25
 8009f7c:	d1f9      	bne.n	8009f72 <_vfiprintf_r+0x7a>
 8009f7e:	ebba 0b04 	subs.w	fp, sl, r4
 8009f82:	d00b      	beq.n	8009f9c <_vfiprintf_r+0xa4>
 8009f84:	465b      	mov	r3, fp
 8009f86:	4622      	mov	r2, r4
 8009f88:	4629      	mov	r1, r5
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f7ff ffa1 	bl	8009ed2 <__sfputs_r>
 8009f90:	3001      	adds	r0, #1
 8009f92:	f000 80a7 	beq.w	800a0e4 <_vfiprintf_r+0x1ec>
 8009f96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f98:	445a      	add	r2, fp
 8009f9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f000 809f 	beq.w	800a0e4 <_vfiprintf_r+0x1ec>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fb0:	f10a 0a01 	add.w	sl, sl, #1
 8009fb4:	9304      	str	r3, [sp, #16]
 8009fb6:	9307      	str	r3, [sp, #28]
 8009fb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fbe:	4654      	mov	r4, sl
 8009fc0:	2205      	movs	r2, #5
 8009fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fc6:	4853      	ldr	r0, [pc, #332]	@ (800a114 <_vfiprintf_r+0x21c>)
 8009fc8:	f7f6 f922 	bl	8000210 <memchr>
 8009fcc:	9a04      	ldr	r2, [sp, #16]
 8009fce:	b9d8      	cbnz	r0, 800a008 <_vfiprintf_r+0x110>
 8009fd0:	06d1      	lsls	r1, r2, #27
 8009fd2:	bf44      	itt	mi
 8009fd4:	2320      	movmi	r3, #32
 8009fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fda:	0713      	lsls	r3, r2, #28
 8009fdc:	bf44      	itt	mi
 8009fde:	232b      	movmi	r3, #43	@ 0x2b
 8009fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fea:	d015      	beq.n	800a018 <_vfiprintf_r+0x120>
 8009fec:	9a07      	ldr	r2, [sp, #28]
 8009fee:	4654      	mov	r4, sl
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	f04f 0c0a 	mov.w	ip, #10
 8009ff6:	4621      	mov	r1, r4
 8009ff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ffc:	3b30      	subs	r3, #48	@ 0x30
 8009ffe:	2b09      	cmp	r3, #9
 800a000:	d94b      	bls.n	800a09a <_vfiprintf_r+0x1a2>
 800a002:	b1b0      	cbz	r0, 800a032 <_vfiprintf_r+0x13a>
 800a004:	9207      	str	r2, [sp, #28]
 800a006:	e014      	b.n	800a032 <_vfiprintf_r+0x13a>
 800a008:	eba0 0308 	sub.w	r3, r0, r8
 800a00c:	fa09 f303 	lsl.w	r3, r9, r3
 800a010:	4313      	orrs	r3, r2
 800a012:	9304      	str	r3, [sp, #16]
 800a014:	46a2      	mov	sl, r4
 800a016:	e7d2      	b.n	8009fbe <_vfiprintf_r+0xc6>
 800a018:	9b03      	ldr	r3, [sp, #12]
 800a01a:	1d19      	adds	r1, r3, #4
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	9103      	str	r1, [sp, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	bfbb      	ittet	lt
 800a024:	425b      	neglt	r3, r3
 800a026:	f042 0202 	orrlt.w	r2, r2, #2
 800a02a:	9307      	strge	r3, [sp, #28]
 800a02c:	9307      	strlt	r3, [sp, #28]
 800a02e:	bfb8      	it	lt
 800a030:	9204      	strlt	r2, [sp, #16]
 800a032:	7823      	ldrb	r3, [r4, #0]
 800a034:	2b2e      	cmp	r3, #46	@ 0x2e
 800a036:	d10a      	bne.n	800a04e <_vfiprintf_r+0x156>
 800a038:	7863      	ldrb	r3, [r4, #1]
 800a03a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a03c:	d132      	bne.n	800a0a4 <_vfiprintf_r+0x1ac>
 800a03e:	9b03      	ldr	r3, [sp, #12]
 800a040:	1d1a      	adds	r2, r3, #4
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	9203      	str	r2, [sp, #12]
 800a046:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a04a:	3402      	adds	r4, #2
 800a04c:	9305      	str	r3, [sp, #20]
 800a04e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a124 <_vfiprintf_r+0x22c>
 800a052:	7821      	ldrb	r1, [r4, #0]
 800a054:	2203      	movs	r2, #3
 800a056:	4650      	mov	r0, sl
 800a058:	f7f6 f8da 	bl	8000210 <memchr>
 800a05c:	b138      	cbz	r0, 800a06e <_vfiprintf_r+0x176>
 800a05e:	9b04      	ldr	r3, [sp, #16]
 800a060:	eba0 000a 	sub.w	r0, r0, sl
 800a064:	2240      	movs	r2, #64	@ 0x40
 800a066:	4082      	lsls	r2, r0
 800a068:	4313      	orrs	r3, r2
 800a06a:	3401      	adds	r4, #1
 800a06c:	9304      	str	r3, [sp, #16]
 800a06e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a072:	4829      	ldr	r0, [pc, #164]	@ (800a118 <_vfiprintf_r+0x220>)
 800a074:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a078:	2206      	movs	r2, #6
 800a07a:	f7f6 f8c9 	bl	8000210 <memchr>
 800a07e:	2800      	cmp	r0, #0
 800a080:	d03f      	beq.n	800a102 <_vfiprintf_r+0x20a>
 800a082:	4b26      	ldr	r3, [pc, #152]	@ (800a11c <_vfiprintf_r+0x224>)
 800a084:	bb1b      	cbnz	r3, 800a0ce <_vfiprintf_r+0x1d6>
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	3307      	adds	r3, #7
 800a08a:	f023 0307 	bic.w	r3, r3, #7
 800a08e:	3308      	adds	r3, #8
 800a090:	9303      	str	r3, [sp, #12]
 800a092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a094:	443b      	add	r3, r7
 800a096:	9309      	str	r3, [sp, #36]	@ 0x24
 800a098:	e76a      	b.n	8009f70 <_vfiprintf_r+0x78>
 800a09a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a09e:	460c      	mov	r4, r1
 800a0a0:	2001      	movs	r0, #1
 800a0a2:	e7a8      	b.n	8009ff6 <_vfiprintf_r+0xfe>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	3401      	adds	r4, #1
 800a0a8:	9305      	str	r3, [sp, #20]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	f04f 0c0a 	mov.w	ip, #10
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0b6:	3a30      	subs	r2, #48	@ 0x30
 800a0b8:	2a09      	cmp	r2, #9
 800a0ba:	d903      	bls.n	800a0c4 <_vfiprintf_r+0x1cc>
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d0c6      	beq.n	800a04e <_vfiprintf_r+0x156>
 800a0c0:	9105      	str	r1, [sp, #20]
 800a0c2:	e7c4      	b.n	800a04e <_vfiprintf_r+0x156>
 800a0c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e7f0      	b.n	800a0b0 <_vfiprintf_r+0x1b8>
 800a0ce:	ab03      	add	r3, sp, #12
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	462a      	mov	r2, r5
 800a0d4:	4b12      	ldr	r3, [pc, #72]	@ (800a120 <_vfiprintf_r+0x228>)
 800a0d6:	a904      	add	r1, sp, #16
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f7fc fb81 	bl	80067e0 <_printf_float>
 800a0de:	4607      	mov	r7, r0
 800a0e0:	1c78      	adds	r0, r7, #1
 800a0e2:	d1d6      	bne.n	800a092 <_vfiprintf_r+0x19a>
 800a0e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0e6:	07d9      	lsls	r1, r3, #31
 800a0e8:	d405      	bmi.n	800a0f6 <_vfiprintf_r+0x1fe>
 800a0ea:	89ab      	ldrh	r3, [r5, #12]
 800a0ec:	059a      	lsls	r2, r3, #22
 800a0ee:	d402      	bmi.n	800a0f6 <_vfiprintf_r+0x1fe>
 800a0f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0f2:	f7fd faf1 	bl	80076d8 <__retarget_lock_release_recursive>
 800a0f6:	89ab      	ldrh	r3, [r5, #12]
 800a0f8:	065b      	lsls	r3, r3, #25
 800a0fa:	f53f af1f 	bmi.w	8009f3c <_vfiprintf_r+0x44>
 800a0fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a100:	e71e      	b.n	8009f40 <_vfiprintf_r+0x48>
 800a102:	ab03      	add	r3, sp, #12
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	462a      	mov	r2, r5
 800a108:	4b05      	ldr	r3, [pc, #20]	@ (800a120 <_vfiprintf_r+0x228>)
 800a10a:	a904      	add	r1, sp, #16
 800a10c:	4630      	mov	r0, r6
 800a10e:	f7fc fdff 	bl	8006d10 <_printf_i>
 800a112:	e7e4      	b.n	800a0de <_vfiprintf_r+0x1e6>
 800a114:	0800af55 	.word	0x0800af55
 800a118:	0800af5f 	.word	0x0800af5f
 800a11c:	080067e1 	.word	0x080067e1
 800a120:	08009ed3 	.word	0x08009ed3
 800a124:	0800af5b 	.word	0x0800af5b

0800a128 <__sflush_r>:
 800a128:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a130:	0716      	lsls	r6, r2, #28
 800a132:	4605      	mov	r5, r0
 800a134:	460c      	mov	r4, r1
 800a136:	d454      	bmi.n	800a1e2 <__sflush_r+0xba>
 800a138:	684b      	ldr	r3, [r1, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	dc02      	bgt.n	800a144 <__sflush_r+0x1c>
 800a13e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a140:	2b00      	cmp	r3, #0
 800a142:	dd48      	ble.n	800a1d6 <__sflush_r+0xae>
 800a144:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a146:	2e00      	cmp	r6, #0
 800a148:	d045      	beq.n	800a1d6 <__sflush_r+0xae>
 800a14a:	2300      	movs	r3, #0
 800a14c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a150:	682f      	ldr	r7, [r5, #0]
 800a152:	6a21      	ldr	r1, [r4, #32]
 800a154:	602b      	str	r3, [r5, #0]
 800a156:	d030      	beq.n	800a1ba <__sflush_r+0x92>
 800a158:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a15a:	89a3      	ldrh	r3, [r4, #12]
 800a15c:	0759      	lsls	r1, r3, #29
 800a15e:	d505      	bpl.n	800a16c <__sflush_r+0x44>
 800a160:	6863      	ldr	r3, [r4, #4]
 800a162:	1ad2      	subs	r2, r2, r3
 800a164:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a166:	b10b      	cbz	r3, 800a16c <__sflush_r+0x44>
 800a168:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a16a:	1ad2      	subs	r2, r2, r3
 800a16c:	2300      	movs	r3, #0
 800a16e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a170:	6a21      	ldr	r1, [r4, #32]
 800a172:	4628      	mov	r0, r5
 800a174:	47b0      	blx	r6
 800a176:	1c43      	adds	r3, r0, #1
 800a178:	89a3      	ldrh	r3, [r4, #12]
 800a17a:	d106      	bne.n	800a18a <__sflush_r+0x62>
 800a17c:	6829      	ldr	r1, [r5, #0]
 800a17e:	291d      	cmp	r1, #29
 800a180:	d82b      	bhi.n	800a1da <__sflush_r+0xb2>
 800a182:	4a2a      	ldr	r2, [pc, #168]	@ (800a22c <__sflush_r+0x104>)
 800a184:	40ca      	lsrs	r2, r1
 800a186:	07d6      	lsls	r6, r2, #31
 800a188:	d527      	bpl.n	800a1da <__sflush_r+0xb2>
 800a18a:	2200      	movs	r2, #0
 800a18c:	6062      	str	r2, [r4, #4]
 800a18e:	04d9      	lsls	r1, r3, #19
 800a190:	6922      	ldr	r2, [r4, #16]
 800a192:	6022      	str	r2, [r4, #0]
 800a194:	d504      	bpl.n	800a1a0 <__sflush_r+0x78>
 800a196:	1c42      	adds	r2, r0, #1
 800a198:	d101      	bne.n	800a19e <__sflush_r+0x76>
 800a19a:	682b      	ldr	r3, [r5, #0]
 800a19c:	b903      	cbnz	r3, 800a1a0 <__sflush_r+0x78>
 800a19e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a1a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1a2:	602f      	str	r7, [r5, #0]
 800a1a4:	b1b9      	cbz	r1, 800a1d6 <__sflush_r+0xae>
 800a1a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1aa:	4299      	cmp	r1, r3
 800a1ac:	d002      	beq.n	800a1b4 <__sflush_r+0x8c>
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	f7fe f8f2 	bl	8008398 <_free_r>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1b8:	e00d      	b.n	800a1d6 <__sflush_r+0xae>
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	4628      	mov	r0, r5
 800a1be:	47b0      	blx	r6
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	1c50      	adds	r0, r2, #1
 800a1c4:	d1c9      	bne.n	800a15a <__sflush_r+0x32>
 800a1c6:	682b      	ldr	r3, [r5, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d0c6      	beq.n	800a15a <__sflush_r+0x32>
 800a1cc:	2b1d      	cmp	r3, #29
 800a1ce:	d001      	beq.n	800a1d4 <__sflush_r+0xac>
 800a1d0:	2b16      	cmp	r3, #22
 800a1d2:	d11e      	bne.n	800a212 <__sflush_r+0xea>
 800a1d4:	602f      	str	r7, [r5, #0]
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	e022      	b.n	800a220 <__sflush_r+0xf8>
 800a1da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1de:	b21b      	sxth	r3, r3
 800a1e0:	e01b      	b.n	800a21a <__sflush_r+0xf2>
 800a1e2:	690f      	ldr	r7, [r1, #16]
 800a1e4:	2f00      	cmp	r7, #0
 800a1e6:	d0f6      	beq.n	800a1d6 <__sflush_r+0xae>
 800a1e8:	0793      	lsls	r3, r2, #30
 800a1ea:	680e      	ldr	r6, [r1, #0]
 800a1ec:	bf08      	it	eq
 800a1ee:	694b      	ldreq	r3, [r1, #20]
 800a1f0:	600f      	str	r7, [r1, #0]
 800a1f2:	bf18      	it	ne
 800a1f4:	2300      	movne	r3, #0
 800a1f6:	eba6 0807 	sub.w	r8, r6, r7
 800a1fa:	608b      	str	r3, [r1, #8]
 800a1fc:	f1b8 0f00 	cmp.w	r8, #0
 800a200:	dde9      	ble.n	800a1d6 <__sflush_r+0xae>
 800a202:	6a21      	ldr	r1, [r4, #32]
 800a204:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a206:	4643      	mov	r3, r8
 800a208:	463a      	mov	r2, r7
 800a20a:	4628      	mov	r0, r5
 800a20c:	47b0      	blx	r6
 800a20e:	2800      	cmp	r0, #0
 800a210:	dc08      	bgt.n	800a224 <__sflush_r+0xfc>
 800a212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a21a:	81a3      	strh	r3, [r4, #12]
 800a21c:	f04f 30ff 	mov.w	r0, #4294967295
 800a220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a224:	4407      	add	r7, r0
 800a226:	eba8 0800 	sub.w	r8, r8, r0
 800a22a:	e7e7      	b.n	800a1fc <__sflush_r+0xd4>
 800a22c:	20400001 	.word	0x20400001

0800a230 <_fflush_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	690b      	ldr	r3, [r1, #16]
 800a234:	4605      	mov	r5, r0
 800a236:	460c      	mov	r4, r1
 800a238:	b913      	cbnz	r3, 800a240 <_fflush_r+0x10>
 800a23a:	2500      	movs	r5, #0
 800a23c:	4628      	mov	r0, r5
 800a23e:	bd38      	pop	{r3, r4, r5, pc}
 800a240:	b118      	cbz	r0, 800a24a <_fflush_r+0x1a>
 800a242:	6a03      	ldr	r3, [r0, #32]
 800a244:	b90b      	cbnz	r3, 800a24a <_fflush_r+0x1a>
 800a246:	f7fd f91b 	bl	8007480 <__sinit>
 800a24a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d0f3      	beq.n	800a23a <_fflush_r+0xa>
 800a252:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a254:	07d0      	lsls	r0, r2, #31
 800a256:	d404      	bmi.n	800a262 <_fflush_r+0x32>
 800a258:	0599      	lsls	r1, r3, #22
 800a25a:	d402      	bmi.n	800a262 <_fflush_r+0x32>
 800a25c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a25e:	f7fd fa3a 	bl	80076d6 <__retarget_lock_acquire_recursive>
 800a262:	4628      	mov	r0, r5
 800a264:	4621      	mov	r1, r4
 800a266:	f7ff ff5f 	bl	800a128 <__sflush_r>
 800a26a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a26c:	07da      	lsls	r2, r3, #31
 800a26e:	4605      	mov	r5, r0
 800a270:	d4e4      	bmi.n	800a23c <_fflush_r+0xc>
 800a272:	89a3      	ldrh	r3, [r4, #12]
 800a274:	059b      	lsls	r3, r3, #22
 800a276:	d4e1      	bmi.n	800a23c <_fflush_r+0xc>
 800a278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a27a:	f7fd fa2d 	bl	80076d8 <__retarget_lock_release_recursive>
 800a27e:	e7dd      	b.n	800a23c <_fflush_r+0xc>

0800a280 <__swbuf_r>:
 800a280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a282:	460e      	mov	r6, r1
 800a284:	4614      	mov	r4, r2
 800a286:	4605      	mov	r5, r0
 800a288:	b118      	cbz	r0, 800a292 <__swbuf_r+0x12>
 800a28a:	6a03      	ldr	r3, [r0, #32]
 800a28c:	b90b      	cbnz	r3, 800a292 <__swbuf_r+0x12>
 800a28e:	f7fd f8f7 	bl	8007480 <__sinit>
 800a292:	69a3      	ldr	r3, [r4, #24]
 800a294:	60a3      	str	r3, [r4, #8]
 800a296:	89a3      	ldrh	r3, [r4, #12]
 800a298:	071a      	lsls	r2, r3, #28
 800a29a:	d501      	bpl.n	800a2a0 <__swbuf_r+0x20>
 800a29c:	6923      	ldr	r3, [r4, #16]
 800a29e:	b943      	cbnz	r3, 800a2b2 <__swbuf_r+0x32>
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	f000 f82a 	bl	800a2fc <__swsetup_r>
 800a2a8:	b118      	cbz	r0, 800a2b2 <__swbuf_r+0x32>
 800a2aa:	f04f 37ff 	mov.w	r7, #4294967295
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2b2:	6823      	ldr	r3, [r4, #0]
 800a2b4:	6922      	ldr	r2, [r4, #16]
 800a2b6:	1a98      	subs	r0, r3, r2
 800a2b8:	6963      	ldr	r3, [r4, #20]
 800a2ba:	b2f6      	uxtb	r6, r6
 800a2bc:	4283      	cmp	r3, r0
 800a2be:	4637      	mov	r7, r6
 800a2c0:	dc05      	bgt.n	800a2ce <__swbuf_r+0x4e>
 800a2c2:	4621      	mov	r1, r4
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	f7ff ffb3 	bl	800a230 <_fflush_r>
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d1ed      	bne.n	800a2aa <__swbuf_r+0x2a>
 800a2ce:	68a3      	ldr	r3, [r4, #8]
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	60a3      	str	r3, [r4, #8]
 800a2d4:	6823      	ldr	r3, [r4, #0]
 800a2d6:	1c5a      	adds	r2, r3, #1
 800a2d8:	6022      	str	r2, [r4, #0]
 800a2da:	701e      	strb	r6, [r3, #0]
 800a2dc:	6962      	ldr	r2, [r4, #20]
 800a2de:	1c43      	adds	r3, r0, #1
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d004      	beq.n	800a2ee <__swbuf_r+0x6e>
 800a2e4:	89a3      	ldrh	r3, [r4, #12]
 800a2e6:	07db      	lsls	r3, r3, #31
 800a2e8:	d5e1      	bpl.n	800a2ae <__swbuf_r+0x2e>
 800a2ea:	2e0a      	cmp	r6, #10
 800a2ec:	d1df      	bne.n	800a2ae <__swbuf_r+0x2e>
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	f7ff ff9d 	bl	800a230 <_fflush_r>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d0d9      	beq.n	800a2ae <__swbuf_r+0x2e>
 800a2fa:	e7d6      	b.n	800a2aa <__swbuf_r+0x2a>

0800a2fc <__swsetup_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4b29      	ldr	r3, [pc, #164]	@ (800a3a4 <__swsetup_r+0xa8>)
 800a300:	4605      	mov	r5, r0
 800a302:	6818      	ldr	r0, [r3, #0]
 800a304:	460c      	mov	r4, r1
 800a306:	b118      	cbz	r0, 800a310 <__swsetup_r+0x14>
 800a308:	6a03      	ldr	r3, [r0, #32]
 800a30a:	b90b      	cbnz	r3, 800a310 <__swsetup_r+0x14>
 800a30c:	f7fd f8b8 	bl	8007480 <__sinit>
 800a310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a314:	0719      	lsls	r1, r3, #28
 800a316:	d422      	bmi.n	800a35e <__swsetup_r+0x62>
 800a318:	06da      	lsls	r2, r3, #27
 800a31a:	d407      	bmi.n	800a32c <__swsetup_r+0x30>
 800a31c:	2209      	movs	r2, #9
 800a31e:	602a      	str	r2, [r5, #0]
 800a320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a324:	81a3      	strh	r3, [r4, #12]
 800a326:	f04f 30ff 	mov.w	r0, #4294967295
 800a32a:	e033      	b.n	800a394 <__swsetup_r+0x98>
 800a32c:	0758      	lsls	r0, r3, #29
 800a32e:	d512      	bpl.n	800a356 <__swsetup_r+0x5a>
 800a330:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a332:	b141      	cbz	r1, 800a346 <__swsetup_r+0x4a>
 800a334:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a338:	4299      	cmp	r1, r3
 800a33a:	d002      	beq.n	800a342 <__swsetup_r+0x46>
 800a33c:	4628      	mov	r0, r5
 800a33e:	f7fe f82b 	bl	8008398 <_free_r>
 800a342:	2300      	movs	r3, #0
 800a344:	6363      	str	r3, [r4, #52]	@ 0x34
 800a346:	89a3      	ldrh	r3, [r4, #12]
 800a348:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a34c:	81a3      	strh	r3, [r4, #12]
 800a34e:	2300      	movs	r3, #0
 800a350:	6063      	str	r3, [r4, #4]
 800a352:	6923      	ldr	r3, [r4, #16]
 800a354:	6023      	str	r3, [r4, #0]
 800a356:	89a3      	ldrh	r3, [r4, #12]
 800a358:	f043 0308 	orr.w	r3, r3, #8
 800a35c:	81a3      	strh	r3, [r4, #12]
 800a35e:	6923      	ldr	r3, [r4, #16]
 800a360:	b94b      	cbnz	r3, 800a376 <__swsetup_r+0x7a>
 800a362:	89a3      	ldrh	r3, [r4, #12]
 800a364:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a36c:	d003      	beq.n	800a376 <__swsetup_r+0x7a>
 800a36e:	4621      	mov	r1, r4
 800a370:	4628      	mov	r0, r5
 800a372:	f000 fc5d 	bl	800ac30 <__smakebuf_r>
 800a376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a37a:	f013 0201 	ands.w	r2, r3, #1
 800a37e:	d00a      	beq.n	800a396 <__swsetup_r+0x9a>
 800a380:	2200      	movs	r2, #0
 800a382:	60a2      	str	r2, [r4, #8]
 800a384:	6962      	ldr	r2, [r4, #20]
 800a386:	4252      	negs	r2, r2
 800a388:	61a2      	str	r2, [r4, #24]
 800a38a:	6922      	ldr	r2, [r4, #16]
 800a38c:	b942      	cbnz	r2, 800a3a0 <__swsetup_r+0xa4>
 800a38e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a392:	d1c5      	bne.n	800a320 <__swsetup_r+0x24>
 800a394:	bd38      	pop	{r3, r4, r5, pc}
 800a396:	0799      	lsls	r1, r3, #30
 800a398:	bf58      	it	pl
 800a39a:	6962      	ldrpl	r2, [r4, #20]
 800a39c:	60a2      	str	r2, [r4, #8]
 800a39e:	e7f4      	b.n	800a38a <__swsetup_r+0x8e>
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	e7f7      	b.n	800a394 <__swsetup_r+0x98>
 800a3a4:	20000024 	.word	0x20000024

0800a3a8 <memmove>:
 800a3a8:	4288      	cmp	r0, r1
 800a3aa:	b510      	push	{r4, lr}
 800a3ac:	eb01 0402 	add.w	r4, r1, r2
 800a3b0:	d902      	bls.n	800a3b8 <memmove+0x10>
 800a3b2:	4284      	cmp	r4, r0
 800a3b4:	4623      	mov	r3, r4
 800a3b6:	d807      	bhi.n	800a3c8 <memmove+0x20>
 800a3b8:	1e43      	subs	r3, r0, #1
 800a3ba:	42a1      	cmp	r1, r4
 800a3bc:	d008      	beq.n	800a3d0 <memmove+0x28>
 800a3be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3c6:	e7f8      	b.n	800a3ba <memmove+0x12>
 800a3c8:	4402      	add	r2, r0
 800a3ca:	4601      	mov	r1, r0
 800a3cc:	428a      	cmp	r2, r1
 800a3ce:	d100      	bne.n	800a3d2 <memmove+0x2a>
 800a3d0:	bd10      	pop	{r4, pc}
 800a3d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3da:	e7f7      	b.n	800a3cc <memmove+0x24>

0800a3dc <strncmp>:
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	b16a      	cbz	r2, 800a3fc <strncmp+0x20>
 800a3e0:	3901      	subs	r1, #1
 800a3e2:	1884      	adds	r4, r0, r2
 800a3e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3e8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d103      	bne.n	800a3f8 <strncmp+0x1c>
 800a3f0:	42a0      	cmp	r0, r4
 800a3f2:	d001      	beq.n	800a3f8 <strncmp+0x1c>
 800a3f4:	2a00      	cmp	r2, #0
 800a3f6:	d1f5      	bne.n	800a3e4 <strncmp+0x8>
 800a3f8:	1ad0      	subs	r0, r2, r3
 800a3fa:	bd10      	pop	{r4, pc}
 800a3fc:	4610      	mov	r0, r2
 800a3fe:	e7fc      	b.n	800a3fa <strncmp+0x1e>

0800a400 <_sbrk_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	4d06      	ldr	r5, [pc, #24]	@ (800a41c <_sbrk_r+0x1c>)
 800a404:	2300      	movs	r3, #0
 800a406:	4604      	mov	r4, r0
 800a408:	4608      	mov	r0, r1
 800a40a:	602b      	str	r3, [r5, #0]
 800a40c:	f7f8 fa40 	bl	8002890 <_sbrk>
 800a410:	1c43      	adds	r3, r0, #1
 800a412:	d102      	bne.n	800a41a <_sbrk_r+0x1a>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	b103      	cbz	r3, 800a41a <_sbrk_r+0x1a>
 800a418:	6023      	str	r3, [r4, #0]
 800a41a:	bd38      	pop	{r3, r4, r5, pc}
 800a41c:	20000764 	.word	0x20000764

0800a420 <memcpy>:
 800a420:	440a      	add	r2, r1
 800a422:	4291      	cmp	r1, r2
 800a424:	f100 33ff 	add.w	r3, r0, #4294967295
 800a428:	d100      	bne.n	800a42c <memcpy+0xc>
 800a42a:	4770      	bx	lr
 800a42c:	b510      	push	{r4, lr}
 800a42e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a432:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a436:	4291      	cmp	r1, r2
 800a438:	d1f9      	bne.n	800a42e <memcpy+0xe>
 800a43a:	bd10      	pop	{r4, pc}
 800a43c:	0000      	movs	r0, r0
	...

0800a440 <nan>:
 800a440:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a448 <nan+0x8>
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	00000000 	.word	0x00000000
 800a44c:	7ff80000 	.word	0x7ff80000

0800a450 <__assert_func>:
 800a450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a452:	4614      	mov	r4, r2
 800a454:	461a      	mov	r2, r3
 800a456:	4b09      	ldr	r3, [pc, #36]	@ (800a47c <__assert_func+0x2c>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4605      	mov	r5, r0
 800a45c:	68d8      	ldr	r0, [r3, #12]
 800a45e:	b14c      	cbz	r4, 800a474 <__assert_func+0x24>
 800a460:	4b07      	ldr	r3, [pc, #28]	@ (800a480 <__assert_func+0x30>)
 800a462:	9100      	str	r1, [sp, #0]
 800a464:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a468:	4906      	ldr	r1, [pc, #24]	@ (800a484 <__assert_func+0x34>)
 800a46a:	462b      	mov	r3, r5
 800a46c:	f000 fba8 	bl	800abc0 <fiprintf>
 800a470:	f000 fc3c 	bl	800acec <abort>
 800a474:	4b04      	ldr	r3, [pc, #16]	@ (800a488 <__assert_func+0x38>)
 800a476:	461c      	mov	r4, r3
 800a478:	e7f3      	b.n	800a462 <__assert_func+0x12>
 800a47a:	bf00      	nop
 800a47c:	20000024 	.word	0x20000024
 800a480:	0800af6e 	.word	0x0800af6e
 800a484:	0800af7b 	.word	0x0800af7b
 800a488:	0800afa9 	.word	0x0800afa9

0800a48c <_calloc_r>:
 800a48c:	b570      	push	{r4, r5, r6, lr}
 800a48e:	fba1 5402 	umull	r5, r4, r1, r2
 800a492:	b934      	cbnz	r4, 800a4a2 <_calloc_r+0x16>
 800a494:	4629      	mov	r1, r5
 800a496:	f7fd fff3 	bl	8008480 <_malloc_r>
 800a49a:	4606      	mov	r6, r0
 800a49c:	b928      	cbnz	r0, 800a4aa <_calloc_r+0x1e>
 800a49e:	4630      	mov	r0, r6
 800a4a0:	bd70      	pop	{r4, r5, r6, pc}
 800a4a2:	220c      	movs	r2, #12
 800a4a4:	6002      	str	r2, [r0, #0]
 800a4a6:	2600      	movs	r6, #0
 800a4a8:	e7f9      	b.n	800a49e <_calloc_r+0x12>
 800a4aa:	462a      	mov	r2, r5
 800a4ac:	4621      	mov	r1, r4
 800a4ae:	f7fd f894 	bl	80075da <memset>
 800a4b2:	e7f4      	b.n	800a49e <_calloc_r+0x12>

0800a4b4 <rshift>:
 800a4b4:	6903      	ldr	r3, [r0, #16]
 800a4b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a4ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a4c2:	f100 0414 	add.w	r4, r0, #20
 800a4c6:	dd45      	ble.n	800a554 <rshift+0xa0>
 800a4c8:	f011 011f 	ands.w	r1, r1, #31
 800a4cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a4d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a4d4:	d10c      	bne.n	800a4f0 <rshift+0x3c>
 800a4d6:	f100 0710 	add.w	r7, r0, #16
 800a4da:	4629      	mov	r1, r5
 800a4dc:	42b1      	cmp	r1, r6
 800a4de:	d334      	bcc.n	800a54a <rshift+0x96>
 800a4e0:	1a9b      	subs	r3, r3, r2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	1eea      	subs	r2, r5, #3
 800a4e6:	4296      	cmp	r6, r2
 800a4e8:	bf38      	it	cc
 800a4ea:	2300      	movcc	r3, #0
 800a4ec:	4423      	add	r3, r4
 800a4ee:	e015      	b.n	800a51c <rshift+0x68>
 800a4f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a4f4:	f1c1 0820 	rsb	r8, r1, #32
 800a4f8:	40cf      	lsrs	r7, r1
 800a4fa:	f105 0e04 	add.w	lr, r5, #4
 800a4fe:	46a1      	mov	r9, r4
 800a500:	4576      	cmp	r6, lr
 800a502:	46f4      	mov	ip, lr
 800a504:	d815      	bhi.n	800a532 <rshift+0x7e>
 800a506:	1a9a      	subs	r2, r3, r2
 800a508:	0092      	lsls	r2, r2, #2
 800a50a:	3a04      	subs	r2, #4
 800a50c:	3501      	adds	r5, #1
 800a50e:	42ae      	cmp	r6, r5
 800a510:	bf38      	it	cc
 800a512:	2200      	movcc	r2, #0
 800a514:	18a3      	adds	r3, r4, r2
 800a516:	50a7      	str	r7, [r4, r2]
 800a518:	b107      	cbz	r7, 800a51c <rshift+0x68>
 800a51a:	3304      	adds	r3, #4
 800a51c:	1b1a      	subs	r2, r3, r4
 800a51e:	42a3      	cmp	r3, r4
 800a520:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a524:	bf08      	it	eq
 800a526:	2300      	moveq	r3, #0
 800a528:	6102      	str	r2, [r0, #16]
 800a52a:	bf08      	it	eq
 800a52c:	6143      	streq	r3, [r0, #20]
 800a52e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a532:	f8dc c000 	ldr.w	ip, [ip]
 800a536:	fa0c fc08 	lsl.w	ip, ip, r8
 800a53a:	ea4c 0707 	orr.w	r7, ip, r7
 800a53e:	f849 7b04 	str.w	r7, [r9], #4
 800a542:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a546:	40cf      	lsrs	r7, r1
 800a548:	e7da      	b.n	800a500 <rshift+0x4c>
 800a54a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a54e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a552:	e7c3      	b.n	800a4dc <rshift+0x28>
 800a554:	4623      	mov	r3, r4
 800a556:	e7e1      	b.n	800a51c <rshift+0x68>

0800a558 <__hexdig_fun>:
 800a558:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a55c:	2b09      	cmp	r3, #9
 800a55e:	d802      	bhi.n	800a566 <__hexdig_fun+0xe>
 800a560:	3820      	subs	r0, #32
 800a562:	b2c0      	uxtb	r0, r0
 800a564:	4770      	bx	lr
 800a566:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a56a:	2b05      	cmp	r3, #5
 800a56c:	d801      	bhi.n	800a572 <__hexdig_fun+0x1a>
 800a56e:	3847      	subs	r0, #71	@ 0x47
 800a570:	e7f7      	b.n	800a562 <__hexdig_fun+0xa>
 800a572:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a576:	2b05      	cmp	r3, #5
 800a578:	d801      	bhi.n	800a57e <__hexdig_fun+0x26>
 800a57a:	3827      	subs	r0, #39	@ 0x27
 800a57c:	e7f1      	b.n	800a562 <__hexdig_fun+0xa>
 800a57e:	2000      	movs	r0, #0
 800a580:	4770      	bx	lr
	...

0800a584 <__gethex>:
 800a584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a588:	b085      	sub	sp, #20
 800a58a:	468a      	mov	sl, r1
 800a58c:	9302      	str	r3, [sp, #8]
 800a58e:	680b      	ldr	r3, [r1, #0]
 800a590:	9001      	str	r0, [sp, #4]
 800a592:	4690      	mov	r8, r2
 800a594:	1c9c      	adds	r4, r3, #2
 800a596:	46a1      	mov	r9, r4
 800a598:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a59c:	2830      	cmp	r0, #48	@ 0x30
 800a59e:	d0fa      	beq.n	800a596 <__gethex+0x12>
 800a5a0:	eba9 0303 	sub.w	r3, r9, r3
 800a5a4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a5a8:	f7ff ffd6 	bl	800a558 <__hexdig_fun>
 800a5ac:	4605      	mov	r5, r0
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	d168      	bne.n	800a684 <__gethex+0x100>
 800a5b2:	49a0      	ldr	r1, [pc, #640]	@ (800a834 <__gethex+0x2b0>)
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	4648      	mov	r0, r9
 800a5b8:	f7ff ff10 	bl	800a3dc <strncmp>
 800a5bc:	4607      	mov	r7, r0
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d167      	bne.n	800a692 <__gethex+0x10e>
 800a5c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a5c6:	4626      	mov	r6, r4
 800a5c8:	f7ff ffc6 	bl	800a558 <__hexdig_fun>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d062      	beq.n	800a696 <__gethex+0x112>
 800a5d0:	4623      	mov	r3, r4
 800a5d2:	7818      	ldrb	r0, [r3, #0]
 800a5d4:	2830      	cmp	r0, #48	@ 0x30
 800a5d6:	4699      	mov	r9, r3
 800a5d8:	f103 0301 	add.w	r3, r3, #1
 800a5dc:	d0f9      	beq.n	800a5d2 <__gethex+0x4e>
 800a5de:	f7ff ffbb 	bl	800a558 <__hexdig_fun>
 800a5e2:	fab0 f580 	clz	r5, r0
 800a5e6:	096d      	lsrs	r5, r5, #5
 800a5e8:	f04f 0b01 	mov.w	fp, #1
 800a5ec:	464a      	mov	r2, r9
 800a5ee:	4616      	mov	r6, r2
 800a5f0:	3201      	adds	r2, #1
 800a5f2:	7830      	ldrb	r0, [r6, #0]
 800a5f4:	f7ff ffb0 	bl	800a558 <__hexdig_fun>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d1f8      	bne.n	800a5ee <__gethex+0x6a>
 800a5fc:	498d      	ldr	r1, [pc, #564]	@ (800a834 <__gethex+0x2b0>)
 800a5fe:	2201      	movs	r2, #1
 800a600:	4630      	mov	r0, r6
 800a602:	f7ff feeb 	bl	800a3dc <strncmp>
 800a606:	2800      	cmp	r0, #0
 800a608:	d13f      	bne.n	800a68a <__gethex+0x106>
 800a60a:	b944      	cbnz	r4, 800a61e <__gethex+0x9a>
 800a60c:	1c74      	adds	r4, r6, #1
 800a60e:	4622      	mov	r2, r4
 800a610:	4616      	mov	r6, r2
 800a612:	3201      	adds	r2, #1
 800a614:	7830      	ldrb	r0, [r6, #0]
 800a616:	f7ff ff9f 	bl	800a558 <__hexdig_fun>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	d1f8      	bne.n	800a610 <__gethex+0x8c>
 800a61e:	1ba4      	subs	r4, r4, r6
 800a620:	00a7      	lsls	r7, r4, #2
 800a622:	7833      	ldrb	r3, [r6, #0]
 800a624:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a628:	2b50      	cmp	r3, #80	@ 0x50
 800a62a:	d13e      	bne.n	800a6aa <__gethex+0x126>
 800a62c:	7873      	ldrb	r3, [r6, #1]
 800a62e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a630:	d033      	beq.n	800a69a <__gethex+0x116>
 800a632:	2b2d      	cmp	r3, #45	@ 0x2d
 800a634:	d034      	beq.n	800a6a0 <__gethex+0x11c>
 800a636:	1c71      	adds	r1, r6, #1
 800a638:	2400      	movs	r4, #0
 800a63a:	7808      	ldrb	r0, [r1, #0]
 800a63c:	f7ff ff8c 	bl	800a558 <__hexdig_fun>
 800a640:	1e43      	subs	r3, r0, #1
 800a642:	b2db      	uxtb	r3, r3
 800a644:	2b18      	cmp	r3, #24
 800a646:	d830      	bhi.n	800a6aa <__gethex+0x126>
 800a648:	f1a0 0210 	sub.w	r2, r0, #16
 800a64c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a650:	f7ff ff82 	bl	800a558 <__hexdig_fun>
 800a654:	f100 3cff 	add.w	ip, r0, #4294967295
 800a658:	fa5f fc8c 	uxtb.w	ip, ip
 800a65c:	f1bc 0f18 	cmp.w	ip, #24
 800a660:	f04f 030a 	mov.w	r3, #10
 800a664:	d91e      	bls.n	800a6a4 <__gethex+0x120>
 800a666:	b104      	cbz	r4, 800a66a <__gethex+0xe6>
 800a668:	4252      	negs	r2, r2
 800a66a:	4417      	add	r7, r2
 800a66c:	f8ca 1000 	str.w	r1, [sl]
 800a670:	b1ed      	cbz	r5, 800a6ae <__gethex+0x12a>
 800a672:	f1bb 0f00 	cmp.w	fp, #0
 800a676:	bf0c      	ite	eq
 800a678:	2506      	moveq	r5, #6
 800a67a:	2500      	movne	r5, #0
 800a67c:	4628      	mov	r0, r5
 800a67e:	b005      	add	sp, #20
 800a680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a684:	2500      	movs	r5, #0
 800a686:	462c      	mov	r4, r5
 800a688:	e7b0      	b.n	800a5ec <__gethex+0x68>
 800a68a:	2c00      	cmp	r4, #0
 800a68c:	d1c7      	bne.n	800a61e <__gethex+0x9a>
 800a68e:	4627      	mov	r7, r4
 800a690:	e7c7      	b.n	800a622 <__gethex+0x9e>
 800a692:	464e      	mov	r6, r9
 800a694:	462f      	mov	r7, r5
 800a696:	2501      	movs	r5, #1
 800a698:	e7c3      	b.n	800a622 <__gethex+0x9e>
 800a69a:	2400      	movs	r4, #0
 800a69c:	1cb1      	adds	r1, r6, #2
 800a69e:	e7cc      	b.n	800a63a <__gethex+0xb6>
 800a6a0:	2401      	movs	r4, #1
 800a6a2:	e7fb      	b.n	800a69c <__gethex+0x118>
 800a6a4:	fb03 0002 	mla	r0, r3, r2, r0
 800a6a8:	e7ce      	b.n	800a648 <__gethex+0xc4>
 800a6aa:	4631      	mov	r1, r6
 800a6ac:	e7de      	b.n	800a66c <__gethex+0xe8>
 800a6ae:	eba6 0309 	sub.w	r3, r6, r9
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	4629      	mov	r1, r5
 800a6b6:	2b07      	cmp	r3, #7
 800a6b8:	dc0a      	bgt.n	800a6d0 <__gethex+0x14c>
 800a6ba:	9801      	ldr	r0, [sp, #4]
 800a6bc:	f7fd ff6c 	bl	8008598 <_Balloc>
 800a6c0:	4604      	mov	r4, r0
 800a6c2:	b940      	cbnz	r0, 800a6d6 <__gethex+0x152>
 800a6c4:	4b5c      	ldr	r3, [pc, #368]	@ (800a838 <__gethex+0x2b4>)
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	21e4      	movs	r1, #228	@ 0xe4
 800a6ca:	485c      	ldr	r0, [pc, #368]	@ (800a83c <__gethex+0x2b8>)
 800a6cc:	f7ff fec0 	bl	800a450 <__assert_func>
 800a6d0:	3101      	adds	r1, #1
 800a6d2:	105b      	asrs	r3, r3, #1
 800a6d4:	e7ef      	b.n	800a6b6 <__gethex+0x132>
 800a6d6:	f100 0a14 	add.w	sl, r0, #20
 800a6da:	2300      	movs	r3, #0
 800a6dc:	4655      	mov	r5, sl
 800a6de:	469b      	mov	fp, r3
 800a6e0:	45b1      	cmp	r9, r6
 800a6e2:	d337      	bcc.n	800a754 <__gethex+0x1d0>
 800a6e4:	f845 bb04 	str.w	fp, [r5], #4
 800a6e8:	eba5 050a 	sub.w	r5, r5, sl
 800a6ec:	10ad      	asrs	r5, r5, #2
 800a6ee:	6125      	str	r5, [r4, #16]
 800a6f0:	4658      	mov	r0, fp
 800a6f2:	f7fe f843 	bl	800877c <__hi0bits>
 800a6f6:	016d      	lsls	r5, r5, #5
 800a6f8:	f8d8 6000 	ldr.w	r6, [r8]
 800a6fc:	1a2d      	subs	r5, r5, r0
 800a6fe:	42b5      	cmp	r5, r6
 800a700:	dd54      	ble.n	800a7ac <__gethex+0x228>
 800a702:	1bad      	subs	r5, r5, r6
 800a704:	4629      	mov	r1, r5
 800a706:	4620      	mov	r0, r4
 800a708:	f7fe fbcf 	bl	8008eaa <__any_on>
 800a70c:	4681      	mov	r9, r0
 800a70e:	b178      	cbz	r0, 800a730 <__gethex+0x1ac>
 800a710:	1e6b      	subs	r3, r5, #1
 800a712:	1159      	asrs	r1, r3, #5
 800a714:	f003 021f 	and.w	r2, r3, #31
 800a718:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a71c:	f04f 0901 	mov.w	r9, #1
 800a720:	fa09 f202 	lsl.w	r2, r9, r2
 800a724:	420a      	tst	r2, r1
 800a726:	d003      	beq.n	800a730 <__gethex+0x1ac>
 800a728:	454b      	cmp	r3, r9
 800a72a:	dc36      	bgt.n	800a79a <__gethex+0x216>
 800a72c:	f04f 0902 	mov.w	r9, #2
 800a730:	4629      	mov	r1, r5
 800a732:	4620      	mov	r0, r4
 800a734:	f7ff febe 	bl	800a4b4 <rshift>
 800a738:	442f      	add	r7, r5
 800a73a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a73e:	42bb      	cmp	r3, r7
 800a740:	da42      	bge.n	800a7c8 <__gethex+0x244>
 800a742:	9801      	ldr	r0, [sp, #4]
 800a744:	4621      	mov	r1, r4
 800a746:	f7fd ff67 	bl	8008618 <_Bfree>
 800a74a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a74c:	2300      	movs	r3, #0
 800a74e:	6013      	str	r3, [r2, #0]
 800a750:	25a3      	movs	r5, #163	@ 0xa3
 800a752:	e793      	b.n	800a67c <__gethex+0xf8>
 800a754:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a758:	2a2e      	cmp	r2, #46	@ 0x2e
 800a75a:	d012      	beq.n	800a782 <__gethex+0x1fe>
 800a75c:	2b20      	cmp	r3, #32
 800a75e:	d104      	bne.n	800a76a <__gethex+0x1e6>
 800a760:	f845 bb04 	str.w	fp, [r5], #4
 800a764:	f04f 0b00 	mov.w	fp, #0
 800a768:	465b      	mov	r3, fp
 800a76a:	7830      	ldrb	r0, [r6, #0]
 800a76c:	9303      	str	r3, [sp, #12]
 800a76e:	f7ff fef3 	bl	800a558 <__hexdig_fun>
 800a772:	9b03      	ldr	r3, [sp, #12]
 800a774:	f000 000f 	and.w	r0, r0, #15
 800a778:	4098      	lsls	r0, r3
 800a77a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a77e:	3304      	adds	r3, #4
 800a780:	e7ae      	b.n	800a6e0 <__gethex+0x15c>
 800a782:	45b1      	cmp	r9, r6
 800a784:	d8ea      	bhi.n	800a75c <__gethex+0x1d8>
 800a786:	492b      	ldr	r1, [pc, #172]	@ (800a834 <__gethex+0x2b0>)
 800a788:	9303      	str	r3, [sp, #12]
 800a78a:	2201      	movs	r2, #1
 800a78c:	4630      	mov	r0, r6
 800a78e:	f7ff fe25 	bl	800a3dc <strncmp>
 800a792:	9b03      	ldr	r3, [sp, #12]
 800a794:	2800      	cmp	r0, #0
 800a796:	d1e1      	bne.n	800a75c <__gethex+0x1d8>
 800a798:	e7a2      	b.n	800a6e0 <__gethex+0x15c>
 800a79a:	1ea9      	subs	r1, r5, #2
 800a79c:	4620      	mov	r0, r4
 800a79e:	f7fe fb84 	bl	8008eaa <__any_on>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	d0c2      	beq.n	800a72c <__gethex+0x1a8>
 800a7a6:	f04f 0903 	mov.w	r9, #3
 800a7aa:	e7c1      	b.n	800a730 <__gethex+0x1ac>
 800a7ac:	da09      	bge.n	800a7c2 <__gethex+0x23e>
 800a7ae:	1b75      	subs	r5, r6, r5
 800a7b0:	4621      	mov	r1, r4
 800a7b2:	9801      	ldr	r0, [sp, #4]
 800a7b4:	462a      	mov	r2, r5
 800a7b6:	f7fe f93f 	bl	8008a38 <__lshift>
 800a7ba:	1b7f      	subs	r7, r7, r5
 800a7bc:	4604      	mov	r4, r0
 800a7be:	f100 0a14 	add.w	sl, r0, #20
 800a7c2:	f04f 0900 	mov.w	r9, #0
 800a7c6:	e7b8      	b.n	800a73a <__gethex+0x1b6>
 800a7c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a7cc:	42bd      	cmp	r5, r7
 800a7ce:	dd6f      	ble.n	800a8b0 <__gethex+0x32c>
 800a7d0:	1bed      	subs	r5, r5, r7
 800a7d2:	42ae      	cmp	r6, r5
 800a7d4:	dc34      	bgt.n	800a840 <__gethex+0x2bc>
 800a7d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7da:	2b02      	cmp	r3, #2
 800a7dc:	d022      	beq.n	800a824 <__gethex+0x2a0>
 800a7de:	2b03      	cmp	r3, #3
 800a7e0:	d024      	beq.n	800a82c <__gethex+0x2a8>
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d115      	bne.n	800a812 <__gethex+0x28e>
 800a7e6:	42ae      	cmp	r6, r5
 800a7e8:	d113      	bne.n	800a812 <__gethex+0x28e>
 800a7ea:	2e01      	cmp	r6, #1
 800a7ec:	d10b      	bne.n	800a806 <__gethex+0x282>
 800a7ee:	9a02      	ldr	r2, [sp, #8]
 800a7f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a7f4:	6013      	str	r3, [r2, #0]
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	6123      	str	r3, [r4, #16]
 800a7fa:	f8ca 3000 	str.w	r3, [sl]
 800a7fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a800:	2562      	movs	r5, #98	@ 0x62
 800a802:	601c      	str	r4, [r3, #0]
 800a804:	e73a      	b.n	800a67c <__gethex+0xf8>
 800a806:	1e71      	subs	r1, r6, #1
 800a808:	4620      	mov	r0, r4
 800a80a:	f7fe fb4e 	bl	8008eaa <__any_on>
 800a80e:	2800      	cmp	r0, #0
 800a810:	d1ed      	bne.n	800a7ee <__gethex+0x26a>
 800a812:	9801      	ldr	r0, [sp, #4]
 800a814:	4621      	mov	r1, r4
 800a816:	f7fd feff 	bl	8008618 <_Bfree>
 800a81a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a81c:	2300      	movs	r3, #0
 800a81e:	6013      	str	r3, [r2, #0]
 800a820:	2550      	movs	r5, #80	@ 0x50
 800a822:	e72b      	b.n	800a67c <__gethex+0xf8>
 800a824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1f3      	bne.n	800a812 <__gethex+0x28e>
 800a82a:	e7e0      	b.n	800a7ee <__gethex+0x26a>
 800a82c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d1dd      	bne.n	800a7ee <__gethex+0x26a>
 800a832:	e7ee      	b.n	800a812 <__gethex+0x28e>
 800a834:	0800af53 	.word	0x0800af53
 800a838:	0800aee9 	.word	0x0800aee9
 800a83c:	0800afaa 	.word	0x0800afaa
 800a840:	1e6f      	subs	r7, r5, #1
 800a842:	f1b9 0f00 	cmp.w	r9, #0
 800a846:	d130      	bne.n	800a8aa <__gethex+0x326>
 800a848:	b127      	cbz	r7, 800a854 <__gethex+0x2d0>
 800a84a:	4639      	mov	r1, r7
 800a84c:	4620      	mov	r0, r4
 800a84e:	f7fe fb2c 	bl	8008eaa <__any_on>
 800a852:	4681      	mov	r9, r0
 800a854:	117a      	asrs	r2, r7, #5
 800a856:	2301      	movs	r3, #1
 800a858:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a85c:	f007 071f 	and.w	r7, r7, #31
 800a860:	40bb      	lsls	r3, r7
 800a862:	4213      	tst	r3, r2
 800a864:	4629      	mov	r1, r5
 800a866:	4620      	mov	r0, r4
 800a868:	bf18      	it	ne
 800a86a:	f049 0902 	orrne.w	r9, r9, #2
 800a86e:	f7ff fe21 	bl	800a4b4 <rshift>
 800a872:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a876:	1b76      	subs	r6, r6, r5
 800a878:	2502      	movs	r5, #2
 800a87a:	f1b9 0f00 	cmp.w	r9, #0
 800a87e:	d047      	beq.n	800a910 <__gethex+0x38c>
 800a880:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a884:	2b02      	cmp	r3, #2
 800a886:	d015      	beq.n	800a8b4 <__gethex+0x330>
 800a888:	2b03      	cmp	r3, #3
 800a88a:	d017      	beq.n	800a8bc <__gethex+0x338>
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d109      	bne.n	800a8a4 <__gethex+0x320>
 800a890:	f019 0f02 	tst.w	r9, #2
 800a894:	d006      	beq.n	800a8a4 <__gethex+0x320>
 800a896:	f8da 3000 	ldr.w	r3, [sl]
 800a89a:	ea49 0903 	orr.w	r9, r9, r3
 800a89e:	f019 0f01 	tst.w	r9, #1
 800a8a2:	d10e      	bne.n	800a8c2 <__gethex+0x33e>
 800a8a4:	f045 0510 	orr.w	r5, r5, #16
 800a8a8:	e032      	b.n	800a910 <__gethex+0x38c>
 800a8aa:	f04f 0901 	mov.w	r9, #1
 800a8ae:	e7d1      	b.n	800a854 <__gethex+0x2d0>
 800a8b0:	2501      	movs	r5, #1
 800a8b2:	e7e2      	b.n	800a87a <__gethex+0x2f6>
 800a8b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8b6:	f1c3 0301 	rsb	r3, r3, #1
 800a8ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d0f0      	beq.n	800a8a4 <__gethex+0x320>
 800a8c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a8c6:	f104 0314 	add.w	r3, r4, #20
 800a8ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a8ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a8d2:	f04f 0c00 	mov.w	ip, #0
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a8e0:	d01b      	beq.n	800a91a <__gethex+0x396>
 800a8e2:	3201      	adds	r2, #1
 800a8e4:	6002      	str	r2, [r0, #0]
 800a8e6:	2d02      	cmp	r5, #2
 800a8e8:	f104 0314 	add.w	r3, r4, #20
 800a8ec:	d13c      	bne.n	800a968 <__gethex+0x3e4>
 800a8ee:	f8d8 2000 	ldr.w	r2, [r8]
 800a8f2:	3a01      	subs	r2, #1
 800a8f4:	42b2      	cmp	r2, r6
 800a8f6:	d109      	bne.n	800a90c <__gethex+0x388>
 800a8f8:	1171      	asrs	r1, r6, #5
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a900:	f006 061f 	and.w	r6, r6, #31
 800a904:	fa02 f606 	lsl.w	r6, r2, r6
 800a908:	421e      	tst	r6, r3
 800a90a:	d13a      	bne.n	800a982 <__gethex+0x3fe>
 800a90c:	f045 0520 	orr.w	r5, r5, #32
 800a910:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a912:	601c      	str	r4, [r3, #0]
 800a914:	9b02      	ldr	r3, [sp, #8]
 800a916:	601f      	str	r7, [r3, #0]
 800a918:	e6b0      	b.n	800a67c <__gethex+0xf8>
 800a91a:	4299      	cmp	r1, r3
 800a91c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a920:	d8d9      	bhi.n	800a8d6 <__gethex+0x352>
 800a922:	68a3      	ldr	r3, [r4, #8]
 800a924:	459b      	cmp	fp, r3
 800a926:	db17      	blt.n	800a958 <__gethex+0x3d4>
 800a928:	6861      	ldr	r1, [r4, #4]
 800a92a:	9801      	ldr	r0, [sp, #4]
 800a92c:	3101      	adds	r1, #1
 800a92e:	f7fd fe33 	bl	8008598 <_Balloc>
 800a932:	4681      	mov	r9, r0
 800a934:	b918      	cbnz	r0, 800a93e <__gethex+0x3ba>
 800a936:	4b1a      	ldr	r3, [pc, #104]	@ (800a9a0 <__gethex+0x41c>)
 800a938:	4602      	mov	r2, r0
 800a93a:	2184      	movs	r1, #132	@ 0x84
 800a93c:	e6c5      	b.n	800a6ca <__gethex+0x146>
 800a93e:	6922      	ldr	r2, [r4, #16]
 800a940:	3202      	adds	r2, #2
 800a942:	f104 010c 	add.w	r1, r4, #12
 800a946:	0092      	lsls	r2, r2, #2
 800a948:	300c      	adds	r0, #12
 800a94a:	f7ff fd69 	bl	800a420 <memcpy>
 800a94e:	4621      	mov	r1, r4
 800a950:	9801      	ldr	r0, [sp, #4]
 800a952:	f7fd fe61 	bl	8008618 <_Bfree>
 800a956:	464c      	mov	r4, r9
 800a958:	6923      	ldr	r3, [r4, #16]
 800a95a:	1c5a      	adds	r2, r3, #1
 800a95c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a960:	6122      	str	r2, [r4, #16]
 800a962:	2201      	movs	r2, #1
 800a964:	615a      	str	r2, [r3, #20]
 800a966:	e7be      	b.n	800a8e6 <__gethex+0x362>
 800a968:	6922      	ldr	r2, [r4, #16]
 800a96a:	455a      	cmp	r2, fp
 800a96c:	dd0b      	ble.n	800a986 <__gethex+0x402>
 800a96e:	2101      	movs	r1, #1
 800a970:	4620      	mov	r0, r4
 800a972:	f7ff fd9f 	bl	800a4b4 <rshift>
 800a976:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a97a:	3701      	adds	r7, #1
 800a97c:	42bb      	cmp	r3, r7
 800a97e:	f6ff aee0 	blt.w	800a742 <__gethex+0x1be>
 800a982:	2501      	movs	r5, #1
 800a984:	e7c2      	b.n	800a90c <__gethex+0x388>
 800a986:	f016 061f 	ands.w	r6, r6, #31
 800a98a:	d0fa      	beq.n	800a982 <__gethex+0x3fe>
 800a98c:	4453      	add	r3, sl
 800a98e:	f1c6 0620 	rsb	r6, r6, #32
 800a992:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a996:	f7fd fef1 	bl	800877c <__hi0bits>
 800a99a:	42b0      	cmp	r0, r6
 800a99c:	dbe7      	blt.n	800a96e <__gethex+0x3ea>
 800a99e:	e7f0      	b.n	800a982 <__gethex+0x3fe>
 800a9a0:	0800aee9 	.word	0x0800aee9

0800a9a4 <L_shift>:
 800a9a4:	f1c2 0208 	rsb	r2, r2, #8
 800a9a8:	0092      	lsls	r2, r2, #2
 800a9aa:	b570      	push	{r4, r5, r6, lr}
 800a9ac:	f1c2 0620 	rsb	r6, r2, #32
 800a9b0:	6843      	ldr	r3, [r0, #4]
 800a9b2:	6804      	ldr	r4, [r0, #0]
 800a9b4:	fa03 f506 	lsl.w	r5, r3, r6
 800a9b8:	432c      	orrs	r4, r5
 800a9ba:	40d3      	lsrs	r3, r2
 800a9bc:	6004      	str	r4, [r0, #0]
 800a9be:	f840 3f04 	str.w	r3, [r0, #4]!
 800a9c2:	4288      	cmp	r0, r1
 800a9c4:	d3f4      	bcc.n	800a9b0 <L_shift+0xc>
 800a9c6:	bd70      	pop	{r4, r5, r6, pc}

0800a9c8 <__match>:
 800a9c8:	b530      	push	{r4, r5, lr}
 800a9ca:	6803      	ldr	r3, [r0, #0]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9d2:	b914      	cbnz	r4, 800a9da <__match+0x12>
 800a9d4:	6003      	str	r3, [r0, #0]
 800a9d6:	2001      	movs	r0, #1
 800a9d8:	bd30      	pop	{r4, r5, pc}
 800a9da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a9e2:	2d19      	cmp	r5, #25
 800a9e4:	bf98      	it	ls
 800a9e6:	3220      	addls	r2, #32
 800a9e8:	42a2      	cmp	r2, r4
 800a9ea:	d0f0      	beq.n	800a9ce <__match+0x6>
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	e7f3      	b.n	800a9d8 <__match+0x10>

0800a9f0 <__hexnan>:
 800a9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f4:	680b      	ldr	r3, [r1, #0]
 800a9f6:	6801      	ldr	r1, [r0, #0]
 800a9f8:	115e      	asrs	r6, r3, #5
 800a9fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a9fe:	f013 031f 	ands.w	r3, r3, #31
 800aa02:	b087      	sub	sp, #28
 800aa04:	bf18      	it	ne
 800aa06:	3604      	addne	r6, #4
 800aa08:	2500      	movs	r5, #0
 800aa0a:	1f37      	subs	r7, r6, #4
 800aa0c:	4682      	mov	sl, r0
 800aa0e:	4690      	mov	r8, r2
 800aa10:	9301      	str	r3, [sp, #4]
 800aa12:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa16:	46b9      	mov	r9, r7
 800aa18:	463c      	mov	r4, r7
 800aa1a:	9502      	str	r5, [sp, #8]
 800aa1c:	46ab      	mov	fp, r5
 800aa1e:	784a      	ldrb	r2, [r1, #1]
 800aa20:	1c4b      	adds	r3, r1, #1
 800aa22:	9303      	str	r3, [sp, #12]
 800aa24:	b342      	cbz	r2, 800aa78 <__hexnan+0x88>
 800aa26:	4610      	mov	r0, r2
 800aa28:	9105      	str	r1, [sp, #20]
 800aa2a:	9204      	str	r2, [sp, #16]
 800aa2c:	f7ff fd94 	bl	800a558 <__hexdig_fun>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d151      	bne.n	800aad8 <__hexnan+0xe8>
 800aa34:	9a04      	ldr	r2, [sp, #16]
 800aa36:	9905      	ldr	r1, [sp, #20]
 800aa38:	2a20      	cmp	r2, #32
 800aa3a:	d818      	bhi.n	800aa6e <__hexnan+0x7e>
 800aa3c:	9b02      	ldr	r3, [sp, #8]
 800aa3e:	459b      	cmp	fp, r3
 800aa40:	dd13      	ble.n	800aa6a <__hexnan+0x7a>
 800aa42:	454c      	cmp	r4, r9
 800aa44:	d206      	bcs.n	800aa54 <__hexnan+0x64>
 800aa46:	2d07      	cmp	r5, #7
 800aa48:	dc04      	bgt.n	800aa54 <__hexnan+0x64>
 800aa4a:	462a      	mov	r2, r5
 800aa4c:	4649      	mov	r1, r9
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f7ff ffa8 	bl	800a9a4 <L_shift>
 800aa54:	4544      	cmp	r4, r8
 800aa56:	d952      	bls.n	800aafe <__hexnan+0x10e>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f1a4 0904 	sub.w	r9, r4, #4
 800aa5e:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa62:	f8cd b008 	str.w	fp, [sp, #8]
 800aa66:	464c      	mov	r4, r9
 800aa68:	461d      	mov	r5, r3
 800aa6a:	9903      	ldr	r1, [sp, #12]
 800aa6c:	e7d7      	b.n	800aa1e <__hexnan+0x2e>
 800aa6e:	2a29      	cmp	r2, #41	@ 0x29
 800aa70:	d157      	bne.n	800ab22 <__hexnan+0x132>
 800aa72:	3102      	adds	r1, #2
 800aa74:	f8ca 1000 	str.w	r1, [sl]
 800aa78:	f1bb 0f00 	cmp.w	fp, #0
 800aa7c:	d051      	beq.n	800ab22 <__hexnan+0x132>
 800aa7e:	454c      	cmp	r4, r9
 800aa80:	d206      	bcs.n	800aa90 <__hexnan+0xa0>
 800aa82:	2d07      	cmp	r5, #7
 800aa84:	dc04      	bgt.n	800aa90 <__hexnan+0xa0>
 800aa86:	462a      	mov	r2, r5
 800aa88:	4649      	mov	r1, r9
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	f7ff ff8a 	bl	800a9a4 <L_shift>
 800aa90:	4544      	cmp	r4, r8
 800aa92:	d936      	bls.n	800ab02 <__hexnan+0x112>
 800aa94:	f1a8 0204 	sub.w	r2, r8, #4
 800aa98:	4623      	mov	r3, r4
 800aa9a:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa9e:	f842 1f04 	str.w	r1, [r2, #4]!
 800aaa2:	429f      	cmp	r7, r3
 800aaa4:	d2f9      	bcs.n	800aa9a <__hexnan+0xaa>
 800aaa6:	1b3b      	subs	r3, r7, r4
 800aaa8:	f023 0303 	bic.w	r3, r3, #3
 800aaac:	3304      	adds	r3, #4
 800aaae:	3401      	adds	r4, #1
 800aab0:	3e03      	subs	r6, #3
 800aab2:	42b4      	cmp	r4, r6
 800aab4:	bf88      	it	hi
 800aab6:	2304      	movhi	r3, #4
 800aab8:	4443      	add	r3, r8
 800aaba:	2200      	movs	r2, #0
 800aabc:	f843 2b04 	str.w	r2, [r3], #4
 800aac0:	429f      	cmp	r7, r3
 800aac2:	d2fb      	bcs.n	800aabc <__hexnan+0xcc>
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	b91b      	cbnz	r3, 800aad0 <__hexnan+0xe0>
 800aac8:	4547      	cmp	r7, r8
 800aaca:	d128      	bne.n	800ab1e <__hexnan+0x12e>
 800aacc:	2301      	movs	r3, #1
 800aace:	603b      	str	r3, [r7, #0]
 800aad0:	2005      	movs	r0, #5
 800aad2:	b007      	add	sp, #28
 800aad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aad8:	3501      	adds	r5, #1
 800aada:	2d08      	cmp	r5, #8
 800aadc:	f10b 0b01 	add.w	fp, fp, #1
 800aae0:	dd06      	ble.n	800aaf0 <__hexnan+0x100>
 800aae2:	4544      	cmp	r4, r8
 800aae4:	d9c1      	bls.n	800aa6a <__hexnan+0x7a>
 800aae6:	2300      	movs	r3, #0
 800aae8:	f844 3c04 	str.w	r3, [r4, #-4]
 800aaec:	2501      	movs	r5, #1
 800aaee:	3c04      	subs	r4, #4
 800aaf0:	6822      	ldr	r2, [r4, #0]
 800aaf2:	f000 000f 	and.w	r0, r0, #15
 800aaf6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aafa:	6020      	str	r0, [r4, #0]
 800aafc:	e7b5      	b.n	800aa6a <__hexnan+0x7a>
 800aafe:	2508      	movs	r5, #8
 800ab00:	e7b3      	b.n	800aa6a <__hexnan+0x7a>
 800ab02:	9b01      	ldr	r3, [sp, #4]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d0dd      	beq.n	800aac4 <__hexnan+0xd4>
 800ab08:	f1c3 0320 	rsb	r3, r3, #32
 800ab0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab10:	40da      	lsrs	r2, r3
 800ab12:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ab16:	4013      	ands	r3, r2
 800ab18:	f846 3c04 	str.w	r3, [r6, #-4]
 800ab1c:	e7d2      	b.n	800aac4 <__hexnan+0xd4>
 800ab1e:	3f04      	subs	r7, #4
 800ab20:	e7d0      	b.n	800aac4 <__hexnan+0xd4>
 800ab22:	2004      	movs	r0, #4
 800ab24:	e7d5      	b.n	800aad2 <__hexnan+0xe2>

0800ab26 <__ascii_mbtowc>:
 800ab26:	b082      	sub	sp, #8
 800ab28:	b901      	cbnz	r1, 800ab2c <__ascii_mbtowc+0x6>
 800ab2a:	a901      	add	r1, sp, #4
 800ab2c:	b142      	cbz	r2, 800ab40 <__ascii_mbtowc+0x1a>
 800ab2e:	b14b      	cbz	r3, 800ab44 <__ascii_mbtowc+0x1e>
 800ab30:	7813      	ldrb	r3, [r2, #0]
 800ab32:	600b      	str	r3, [r1, #0]
 800ab34:	7812      	ldrb	r2, [r2, #0]
 800ab36:	1e10      	subs	r0, r2, #0
 800ab38:	bf18      	it	ne
 800ab3a:	2001      	movne	r0, #1
 800ab3c:	b002      	add	sp, #8
 800ab3e:	4770      	bx	lr
 800ab40:	4610      	mov	r0, r2
 800ab42:	e7fb      	b.n	800ab3c <__ascii_mbtowc+0x16>
 800ab44:	f06f 0001 	mvn.w	r0, #1
 800ab48:	e7f8      	b.n	800ab3c <__ascii_mbtowc+0x16>

0800ab4a <_realloc_r>:
 800ab4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4e:	4607      	mov	r7, r0
 800ab50:	4614      	mov	r4, r2
 800ab52:	460d      	mov	r5, r1
 800ab54:	b921      	cbnz	r1, 800ab60 <_realloc_r+0x16>
 800ab56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	f7fd bc90 	b.w	8008480 <_malloc_r>
 800ab60:	b92a      	cbnz	r2, 800ab6e <_realloc_r+0x24>
 800ab62:	f7fd fc19 	bl	8008398 <_free_r>
 800ab66:	4625      	mov	r5, r4
 800ab68:	4628      	mov	r0, r5
 800ab6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab6e:	f000 f8c4 	bl	800acfa <_malloc_usable_size_r>
 800ab72:	4284      	cmp	r4, r0
 800ab74:	4606      	mov	r6, r0
 800ab76:	d802      	bhi.n	800ab7e <_realloc_r+0x34>
 800ab78:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab7c:	d8f4      	bhi.n	800ab68 <_realloc_r+0x1e>
 800ab7e:	4621      	mov	r1, r4
 800ab80:	4638      	mov	r0, r7
 800ab82:	f7fd fc7d 	bl	8008480 <_malloc_r>
 800ab86:	4680      	mov	r8, r0
 800ab88:	b908      	cbnz	r0, 800ab8e <_realloc_r+0x44>
 800ab8a:	4645      	mov	r5, r8
 800ab8c:	e7ec      	b.n	800ab68 <_realloc_r+0x1e>
 800ab8e:	42b4      	cmp	r4, r6
 800ab90:	4622      	mov	r2, r4
 800ab92:	4629      	mov	r1, r5
 800ab94:	bf28      	it	cs
 800ab96:	4632      	movcs	r2, r6
 800ab98:	f7ff fc42 	bl	800a420 <memcpy>
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	4638      	mov	r0, r7
 800aba0:	f7fd fbfa 	bl	8008398 <_free_r>
 800aba4:	e7f1      	b.n	800ab8a <_realloc_r+0x40>

0800aba6 <__ascii_wctomb>:
 800aba6:	4603      	mov	r3, r0
 800aba8:	4608      	mov	r0, r1
 800abaa:	b141      	cbz	r1, 800abbe <__ascii_wctomb+0x18>
 800abac:	2aff      	cmp	r2, #255	@ 0xff
 800abae:	d904      	bls.n	800abba <__ascii_wctomb+0x14>
 800abb0:	228a      	movs	r2, #138	@ 0x8a
 800abb2:	601a      	str	r2, [r3, #0]
 800abb4:	f04f 30ff 	mov.w	r0, #4294967295
 800abb8:	4770      	bx	lr
 800abba:	700a      	strb	r2, [r1, #0]
 800abbc:	2001      	movs	r0, #1
 800abbe:	4770      	bx	lr

0800abc0 <fiprintf>:
 800abc0:	b40e      	push	{r1, r2, r3}
 800abc2:	b503      	push	{r0, r1, lr}
 800abc4:	4601      	mov	r1, r0
 800abc6:	ab03      	add	r3, sp, #12
 800abc8:	4805      	ldr	r0, [pc, #20]	@ (800abe0 <fiprintf+0x20>)
 800abca:	f853 2b04 	ldr.w	r2, [r3], #4
 800abce:	6800      	ldr	r0, [r0, #0]
 800abd0:	9301      	str	r3, [sp, #4]
 800abd2:	f7ff f991 	bl	8009ef8 <_vfiprintf_r>
 800abd6:	b002      	add	sp, #8
 800abd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800abdc:	b003      	add	sp, #12
 800abde:	4770      	bx	lr
 800abe0:	20000024 	.word	0x20000024

0800abe4 <__swhatbuf_r>:
 800abe4:	b570      	push	{r4, r5, r6, lr}
 800abe6:	460c      	mov	r4, r1
 800abe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abec:	2900      	cmp	r1, #0
 800abee:	b096      	sub	sp, #88	@ 0x58
 800abf0:	4615      	mov	r5, r2
 800abf2:	461e      	mov	r6, r3
 800abf4:	da0d      	bge.n	800ac12 <__swhatbuf_r+0x2e>
 800abf6:	89a3      	ldrh	r3, [r4, #12]
 800abf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800abfc:	f04f 0100 	mov.w	r1, #0
 800ac00:	bf14      	ite	ne
 800ac02:	2340      	movne	r3, #64	@ 0x40
 800ac04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac08:	2000      	movs	r0, #0
 800ac0a:	6031      	str	r1, [r6, #0]
 800ac0c:	602b      	str	r3, [r5, #0]
 800ac0e:	b016      	add	sp, #88	@ 0x58
 800ac10:	bd70      	pop	{r4, r5, r6, pc}
 800ac12:	466a      	mov	r2, sp
 800ac14:	f000 f848 	bl	800aca8 <_fstat_r>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	dbec      	blt.n	800abf6 <__swhatbuf_r+0x12>
 800ac1c:	9901      	ldr	r1, [sp, #4]
 800ac1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac26:	4259      	negs	r1, r3
 800ac28:	4159      	adcs	r1, r3
 800ac2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac2e:	e7eb      	b.n	800ac08 <__swhatbuf_r+0x24>

0800ac30 <__smakebuf_r>:
 800ac30:	898b      	ldrh	r3, [r1, #12]
 800ac32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac34:	079d      	lsls	r5, r3, #30
 800ac36:	4606      	mov	r6, r0
 800ac38:	460c      	mov	r4, r1
 800ac3a:	d507      	bpl.n	800ac4c <__smakebuf_r+0x1c>
 800ac3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	6123      	str	r3, [r4, #16]
 800ac44:	2301      	movs	r3, #1
 800ac46:	6163      	str	r3, [r4, #20]
 800ac48:	b003      	add	sp, #12
 800ac4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac4c:	ab01      	add	r3, sp, #4
 800ac4e:	466a      	mov	r2, sp
 800ac50:	f7ff ffc8 	bl	800abe4 <__swhatbuf_r>
 800ac54:	9f00      	ldr	r7, [sp, #0]
 800ac56:	4605      	mov	r5, r0
 800ac58:	4639      	mov	r1, r7
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	f7fd fc10 	bl	8008480 <_malloc_r>
 800ac60:	b948      	cbnz	r0, 800ac76 <__smakebuf_r+0x46>
 800ac62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac66:	059a      	lsls	r2, r3, #22
 800ac68:	d4ee      	bmi.n	800ac48 <__smakebuf_r+0x18>
 800ac6a:	f023 0303 	bic.w	r3, r3, #3
 800ac6e:	f043 0302 	orr.w	r3, r3, #2
 800ac72:	81a3      	strh	r3, [r4, #12]
 800ac74:	e7e2      	b.n	800ac3c <__smakebuf_r+0xc>
 800ac76:	89a3      	ldrh	r3, [r4, #12]
 800ac78:	6020      	str	r0, [r4, #0]
 800ac7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac7e:	81a3      	strh	r3, [r4, #12]
 800ac80:	9b01      	ldr	r3, [sp, #4]
 800ac82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac86:	b15b      	cbz	r3, 800aca0 <__smakebuf_r+0x70>
 800ac88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	f000 f81d 	bl	800accc <_isatty_r>
 800ac92:	b128      	cbz	r0, 800aca0 <__smakebuf_r+0x70>
 800ac94:	89a3      	ldrh	r3, [r4, #12]
 800ac96:	f023 0303 	bic.w	r3, r3, #3
 800ac9a:	f043 0301 	orr.w	r3, r3, #1
 800ac9e:	81a3      	strh	r3, [r4, #12]
 800aca0:	89a3      	ldrh	r3, [r4, #12]
 800aca2:	431d      	orrs	r5, r3
 800aca4:	81a5      	strh	r5, [r4, #12]
 800aca6:	e7cf      	b.n	800ac48 <__smakebuf_r+0x18>

0800aca8 <_fstat_r>:
 800aca8:	b538      	push	{r3, r4, r5, lr}
 800acaa:	4d07      	ldr	r5, [pc, #28]	@ (800acc8 <_fstat_r+0x20>)
 800acac:	2300      	movs	r3, #0
 800acae:	4604      	mov	r4, r0
 800acb0:	4608      	mov	r0, r1
 800acb2:	4611      	mov	r1, r2
 800acb4:	602b      	str	r3, [r5, #0]
 800acb6:	f7f7 fdc3 	bl	8002840 <_fstat>
 800acba:	1c43      	adds	r3, r0, #1
 800acbc:	d102      	bne.n	800acc4 <_fstat_r+0x1c>
 800acbe:	682b      	ldr	r3, [r5, #0]
 800acc0:	b103      	cbz	r3, 800acc4 <_fstat_r+0x1c>
 800acc2:	6023      	str	r3, [r4, #0]
 800acc4:	bd38      	pop	{r3, r4, r5, pc}
 800acc6:	bf00      	nop
 800acc8:	20000764 	.word	0x20000764

0800accc <_isatty_r>:
 800accc:	b538      	push	{r3, r4, r5, lr}
 800acce:	4d06      	ldr	r5, [pc, #24]	@ (800ace8 <_isatty_r+0x1c>)
 800acd0:	2300      	movs	r3, #0
 800acd2:	4604      	mov	r4, r0
 800acd4:	4608      	mov	r0, r1
 800acd6:	602b      	str	r3, [r5, #0]
 800acd8:	f7f7 fdc2 	bl	8002860 <_isatty>
 800acdc:	1c43      	adds	r3, r0, #1
 800acde:	d102      	bne.n	800ace6 <_isatty_r+0x1a>
 800ace0:	682b      	ldr	r3, [r5, #0]
 800ace2:	b103      	cbz	r3, 800ace6 <_isatty_r+0x1a>
 800ace4:	6023      	str	r3, [r4, #0]
 800ace6:	bd38      	pop	{r3, r4, r5, pc}
 800ace8:	20000764 	.word	0x20000764

0800acec <abort>:
 800acec:	b508      	push	{r3, lr}
 800acee:	2006      	movs	r0, #6
 800acf0:	f000 f834 	bl	800ad5c <raise>
 800acf4:	2001      	movs	r0, #1
 800acf6:	f7f7 fd6f 	bl	80027d8 <_exit>

0800acfa <_malloc_usable_size_r>:
 800acfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acfe:	1f18      	subs	r0, r3, #4
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	bfbc      	itt	lt
 800ad04:	580b      	ldrlt	r3, [r1, r0]
 800ad06:	18c0      	addlt	r0, r0, r3
 800ad08:	4770      	bx	lr

0800ad0a <_raise_r>:
 800ad0a:	291f      	cmp	r1, #31
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	4605      	mov	r5, r0
 800ad10:	460c      	mov	r4, r1
 800ad12:	d904      	bls.n	800ad1e <_raise_r+0x14>
 800ad14:	2316      	movs	r3, #22
 800ad16:	6003      	str	r3, [r0, #0]
 800ad18:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1c:	bd38      	pop	{r3, r4, r5, pc}
 800ad1e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ad20:	b112      	cbz	r2, 800ad28 <_raise_r+0x1e>
 800ad22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad26:	b94b      	cbnz	r3, 800ad3c <_raise_r+0x32>
 800ad28:	4628      	mov	r0, r5
 800ad2a:	f000 f831 	bl	800ad90 <_getpid_r>
 800ad2e:	4622      	mov	r2, r4
 800ad30:	4601      	mov	r1, r0
 800ad32:	4628      	mov	r0, r5
 800ad34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad38:	f000 b818 	b.w	800ad6c <_kill_r>
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d00a      	beq.n	800ad56 <_raise_r+0x4c>
 800ad40:	1c59      	adds	r1, r3, #1
 800ad42:	d103      	bne.n	800ad4c <_raise_r+0x42>
 800ad44:	2316      	movs	r3, #22
 800ad46:	6003      	str	r3, [r0, #0]
 800ad48:	2001      	movs	r0, #1
 800ad4a:	e7e7      	b.n	800ad1c <_raise_r+0x12>
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ad52:	4620      	mov	r0, r4
 800ad54:	4798      	blx	r3
 800ad56:	2000      	movs	r0, #0
 800ad58:	e7e0      	b.n	800ad1c <_raise_r+0x12>
	...

0800ad5c <raise>:
 800ad5c:	4b02      	ldr	r3, [pc, #8]	@ (800ad68 <raise+0xc>)
 800ad5e:	4601      	mov	r1, r0
 800ad60:	6818      	ldr	r0, [r3, #0]
 800ad62:	f7ff bfd2 	b.w	800ad0a <_raise_r>
 800ad66:	bf00      	nop
 800ad68:	20000024 	.word	0x20000024

0800ad6c <_kill_r>:
 800ad6c:	b538      	push	{r3, r4, r5, lr}
 800ad6e:	4d07      	ldr	r5, [pc, #28]	@ (800ad8c <_kill_r+0x20>)
 800ad70:	2300      	movs	r3, #0
 800ad72:	4604      	mov	r4, r0
 800ad74:	4608      	mov	r0, r1
 800ad76:	4611      	mov	r1, r2
 800ad78:	602b      	str	r3, [r5, #0]
 800ad7a:	f7f7 fd1d 	bl	80027b8 <_kill>
 800ad7e:	1c43      	adds	r3, r0, #1
 800ad80:	d102      	bne.n	800ad88 <_kill_r+0x1c>
 800ad82:	682b      	ldr	r3, [r5, #0]
 800ad84:	b103      	cbz	r3, 800ad88 <_kill_r+0x1c>
 800ad86:	6023      	str	r3, [r4, #0]
 800ad88:	bd38      	pop	{r3, r4, r5, pc}
 800ad8a:	bf00      	nop
 800ad8c:	20000764 	.word	0x20000764

0800ad90 <_getpid_r>:
 800ad90:	f7f7 bd0a 	b.w	80027a8 <_getpid>

0800ad94 <_init>:
 800ad94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad96:	bf00      	nop
 800ad98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad9a:	bc08      	pop	{r3}
 800ad9c:	469e      	mov	lr, r3
 800ad9e:	4770      	bx	lr

0800ada0 <_fini>:
 800ada0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada2:	bf00      	nop
 800ada4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ada6:	bc08      	pop	{r3}
 800ada8:	469e      	mov	lr, r3
 800adaa:	4770      	bx	lr
